
BLDC_ESC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a424  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  0800a5b8  0800a5b8  0000b5b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad74  0800ad74  0000c1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ad74  0800ad74  0000bd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad7c  0800ad7c  0000c1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad7c  0800ad7c  0000bd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad80  0800ad80  0000bd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800ad84  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  200001d8  0800af5c  0000c1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800af5c  0000c448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108dc  00000000  00000000  0000c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002570  00000000  00000000  0001cae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  0001f054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d47  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029101  00000000  00000000  00020ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001273f  00000000  00000000  00049fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102de8  00000000  00000000  0005c713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f4fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cc4  00000000  00000000  0015f540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a59c 	.word	0x0800a59c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a59c 	.word	0x0800a59c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <LcdStrobe>:

const unsigned short LCDpinMapBoard[LCD_Interface_No] = {0x0080,0x0040,0x0020,0x0010}; // upper 4 nibbles
const unsigned short LCDpinMapLCM[LCD_Interface_No] = {0x0400,0x0010,0x0020,0x0008}; 	// PB10, PB4, PB5, PB3

void LcdStrobe()
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LCD_EN, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c56:	f003 fa0f 	bl	8004078 <HAL_GPIO_WritePin>
	HAL_Delay(0.1);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f001 f958 	bl	8001f10 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, LCD_EN, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6a:	f003 fa05 	bl	8004078 <HAL_GPIO_WritePin>
	HAL_Delay(0.1);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f001 f94e 	bl	8001f10 <HAL_Delay>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <LcdWriteCmd>:

void LcdWriteCmd(unsigned short data)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f8d3 	bl	8000e30 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_RESET);		// clear RS, Low is for Cmd
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c94:	f003 f9f0 	bl	8004078 <HAL_GPIO_WritePin>
	LcdStrobe();
 8000c98:	f7ff ffd6 	bl	8000c48 <LcdStrobe>

	data = (data << 4) & 0x00F0;						// load lower nibbles
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f8c1 	bl	8000e30 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_RESET);		// clear RS, Low is for Cmd
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb8:	f003 f9de 	bl	8004078 <HAL_GPIO_WritePin>
	LcdStrobe();
 8000cbc:	f7ff ffc4 	bl	8000c48 <LcdStrobe>
	HAL_Delay(0.1);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f001 f925 	bl	8001f10 <HAL_Delay>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <LcdWriteData>:

void LcdWriteData(unsigned short data)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000cd8:	88fb      	ldrh	r3, [r7, #6]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 f8a8 	bl	8000e30 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_SET);		// clear RS, high is for Data
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cea:	f003 f9c5 	bl	8004078 <HAL_GPIO_WritePin>
	LcdStrobe();
 8000cee:	f7ff ffab 	bl	8000c48 <LcdStrobe>

	data = (data << 4) & 0x00F0;						// load lower nibbles
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f896 	bl	8000e30 <LcdPortPinConvert>
	HAL_GPIO_WritePin(GPIOA,LCD_RS,GPIO_PIN_SET);		// clear RS, high is for Data
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d0e:	f003 f9b3 	bl	8004078 <HAL_GPIO_WritePin>
	LcdStrobe();
 8000d12:	f7ff ff99 	bl	8000c48 <LcdStrobe>
	HAL_Delay(0.1);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f001 f8fa 	bl	8001f10 <HAL_Delay>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <LcdClear>:

void LcdClear()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	LcdWriteCmd(0x01);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff ffa5 	bl	8000c78 <LcdWriteCmd>
	HAL_Delay(5);
 8000d2e:	2005      	movs	r0, #5
 8000d30:	f001 f8ee 	bl	8001f10 <HAL_Delay>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <LcdPutS>:

void LcdPutS(char *s)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	while (*s)
 8000d40:	e006      	b.n	8000d50 <LcdPutS+0x18>
	  LcdWriteData(*s++);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	1c5a      	adds	r2, r3, #1
 8000d46:	607a      	str	r2, [r7, #4]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ffbf 	bl	8000cce <LcdWriteData>
	while (*s)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1f4      	bne.n	8000d42 <LcdPutS+0xa>
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <LcdGoto>:
	LcdStrobe();
	HAL_Delay(0.1);
}

void LcdGoto(int row, int col)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	char addr;
	if (row == 0)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <LcdGoto+0x14>
		addr = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
	if (row == 1)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d101      	bne.n	8000d80 <LcdGoto+0x1e>
		addr = 0x40;
 8000d7c:	2340      	movs	r3, #64	@ 0x40
 8000d7e:	73fb      	strb	r3, [r7, #15]

	addr += col;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	4413      	add	r3, r2
 8000d88:	73fb      	strb	r3, [r7, #15]
	LcdWriteCmd(0x80 | addr);
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff70 	bl	8000c78 <LcdWriteCmd>
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <LcdInit>:

void LcdInit()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
	unsigned short data;

	data = 0x0000;
 8000da6:	2300      	movs	r3, #0
 8000da8:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000daa:	88fb      	ldrh	r3, [r7, #6]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f83f 	bl	8000e30 <LcdPortPinConvert>
	HAL_Delay(50);
 8000db2:	2032      	movs	r0, #50	@ 0x32
 8000db4:	f001 f8ac 	bl	8001f10 <HAL_Delay>

	data = 0x0030;
 8000db8:	2330      	movs	r3, #48	@ 0x30
 8000dba:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f836 	bl	8000e30 <LcdPortPinConvert>
	LcdStrobe();
 8000dc4:	f7ff ff40 	bl	8000c48 <LcdStrobe>
	HAL_Delay(30);
 8000dc8:	201e      	movs	r0, #30
 8000dca:	f001 f8a1 	bl	8001f10 <HAL_Delay>
	LcdStrobe();
 8000dce:	f7ff ff3b 	bl	8000c48 <LcdStrobe>
	HAL_Delay(20);
 8000dd2:	2014      	movs	r0, #20
 8000dd4:	f001 f89c 	bl	8001f10 <HAL_Delay>
	LcdStrobe();
 8000dd8:	f7ff ff36 	bl	8000c48 <LcdStrobe>
	HAL_Delay(20);
 8000ddc:	2014      	movs	r0, #20
 8000dde:	f001 f897 	bl	8001f10 <HAL_Delay>

	data = 0x0020;
 8000de2:	2320      	movs	r3, #32
 8000de4:	80fb      	strh	r3, [r7, #6]
	// Translate upper 4 nibbles to PB10, PB4, PB5 and PB3
	LcdPortPinConvert(data);
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f821 	bl	8000e30 <LcdPortPinConvert>
	LcdStrobe();
 8000dee:	f7ff ff2b 	bl	8000c48 <LcdStrobe>
	HAL_Delay(5);
 8000df2:	2005      	movs	r0, #5
 8000df4:	f001 f88c 	bl	8001f10 <HAL_Delay>
	LcdWriteCmd(0x28);
 8000df8:	2028      	movs	r0, #40	@ 0x28
 8000dfa:	f7ff ff3d 	bl	8000c78 <LcdWriteCmd>
	HAL_Delay(5);
 8000dfe:	2005      	movs	r0, #5
 8000e00:	f001 f886 	bl	8001f10 <HAL_Delay>
	LcdWriteCmd(0x0F);
 8000e04:	200f      	movs	r0, #15
 8000e06:	f7ff ff37 	bl	8000c78 <LcdWriteCmd>
	HAL_Delay(5);
 8000e0a:	2005      	movs	r0, #5
 8000e0c:	f001 f880 	bl	8001f10 <HAL_Delay>
	LcdWriteCmd(0x01);
 8000e10:	2001      	movs	r0, #1
 8000e12:	f7ff ff31 	bl	8000c78 <LcdWriteCmd>
	HAL_Delay(5);
 8000e16:	2005      	movs	r0, #5
 8000e18:	f001 f87a 	bl	8001f10 <HAL_Delay>
	LcdWriteCmd(0x06);
 8000e1c:	2006      	movs	r0, #6
 8000e1e:	f7ff ff2b 	bl	8000c78 <LcdWriteCmd>
	HAL_Delay(5);
 8000e22:	2005      	movs	r0, #5
 8000e24:	f001 f874 	bl	8001f10 <HAL_Delay>

}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <LcdPortPinConvert>:

void LcdPortPinConvert(unsigned short data)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]
	unsigned short sIndex;

	for (sIndex=0; sIndex<LCD_Interface_No; sIndex++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	81fb      	strh	r3, [r7, #14]
 8000e3e:	e021      	b.n	8000e84 <LcdPortPinConvert+0x54>
	{
		if (data & LCDpinMapBoard[sIndex])
 8000e40:	89fb      	ldrh	r3, [r7, #14]
 8000e42:	4a15      	ldr	r2, [pc, #84]	@ (8000e98 <LcdPortPinConvert+0x68>)
 8000e44:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e48:	88fb      	ldrh	r3, [r7, #6]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00a      	beq.n	8000e68 <LcdPortPinConvert+0x38>
			GPIOB->ODR |= LCDpinMapLCM[sIndex];
 8000e52:	4b12      	ldr	r3, [pc, #72]	@ (8000e9c <LcdPortPinConvert+0x6c>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	89fa      	ldrh	r2, [r7, #14]
 8000e58:	4911      	ldr	r1, [pc, #68]	@ (8000ea0 <LcdPortPinConvert+0x70>)
 8000e5a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4a0e      	ldr	r2, [pc, #56]	@ (8000e9c <LcdPortPinConvert+0x6c>)
 8000e62:	430b      	orrs	r3, r1
 8000e64:	6153      	str	r3, [r2, #20]
 8000e66:	e00a      	b.n	8000e7e <LcdPortPinConvert+0x4e>
		else
			GPIOB->ODR &= ~LCDpinMapLCM[sIndex];
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <LcdPortPinConvert+0x6c>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	89fa      	ldrh	r2, [r7, #14]
 8000e6e:	490c      	ldr	r1, [pc, #48]	@ (8000ea0 <LcdPortPinConvert+0x70>)
 8000e70:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000e74:	43d2      	mvns	r2, r2
 8000e76:	4611      	mov	r1, r2
 8000e78:	4a08      	ldr	r2, [pc, #32]	@ (8000e9c <LcdPortPinConvert+0x6c>)
 8000e7a:	400b      	ands	r3, r1
 8000e7c:	6153      	str	r3, [r2, #20]
	for (sIndex=0; sIndex<LCD_Interface_No; sIndex++)
 8000e7e:	89fb      	ldrh	r3, [r7, #14]
 8000e80:	3301      	adds	r3, #1
 8000e82:	81fb      	strh	r3, [r7, #14]
 8000e84:	89fb      	ldrh	r3, [r7, #14]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d9da      	bls.n	8000e40 <LcdPortPinConvert+0x10>
	}
}
 8000e8a:	bf00      	nop
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	0800a5e0 	.word	0x0800a5e0
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	0800a5e8 	.word	0x0800a5e8

08000ea4 <TIMER2_HANDLE>:
#define _TIMER_C

#include "TIMER.h"

void TIMER2_HANDLE(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
	unsigned short sIndex;
	//__disable_irq();

	for (sIndex=0; sIndex<NUMBER_OF_TIMERS; sIndex++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	80fb      	strh	r3, [r7, #6]
 8000eae:	e011      	b.n	8000ed4 <TIMER2_HANDLE+0x30>
	{
		if (sTimer[sIndex] != 0)
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <TIMER2_HANDLE+0x44>)
 8000eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d008      	beq.n	8000ece <TIMER2_HANDLE+0x2a>
			sTimer[sIndex]--;
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <TIMER2_HANDLE+0x44>)
 8000ec0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ec4:	3a01      	subs	r2, #1
 8000ec6:	b291      	uxth	r1, r2
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <TIMER2_HANDLE+0x44>)
 8000eca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (sIndex=0; sIndex<NUMBER_OF_TIMERS; sIndex++)
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	80fb      	strh	r3, [r7, #6]
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d9ea      	bls.n	8000eb0 <TIMER2_HANDLE+0xc>
	}
	//__enable_irq();
}
 8000eda:	bf00      	nop
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	200001f4 	.word	0x200001f4

08000eec <HAL_ADC_ConvCpltCallback>:
static void SetDutyCycles(uint16_t dutyA, uint16_t dutyB, uint16_t dutyC);
static void Recalculate_Update_Time(float mv_input, uint16_t *update_time, float *dtheta);

// ADC conversion completion interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1A)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	//ADC_HandleTypeDef *hadcA = hadc1;
	flags |= ADC_EOC;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <HAL_ADC_ConvCpltCallback+0x24>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f00:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop_IT(hadc1A);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 fcea 	bl	80028dc <HAL_ADC_Stop_IT>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000000 	.word	0x20000000

08000f14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	TIMER2_HANDLE();
 8000f1c:	f7ff ffc2 	bl	8000ea4 <TIMER2_HANDLE>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <main>:


int main(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08e      	sub	sp, #56	@ 0x38
 8000f2c:	af00      	add	r7, sp, #0
  HAL_Init();
 8000f2e:	f000 ff7a 	bl	8001e26 <HAL_Init>
  SystemClock_Config();
 8000f32:	f000 fab3 	bl	800149c <SystemClock_Config>
  MX_GPIO_Init();
 8000f36:	f000 fc8d 	bl	8001854 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f3a:	f000 fb01 	bl	8001540 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000f3e:	f000 fb75 	bl	800162c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f42:	f000 fc39 	bl	80017b8 <MX_TIM2_Init>
  HAL_TIM_MspPostInit(&htim1);
 8000f46:	4880      	ldr	r0, [pc, #512]	@ (8001148 <main+0x220>)
 8000f48:	f000 fdbe 	bl	8001ac8 <HAL_TIM_MspPostInit>

  LcdInit();
 8000f4c:	f7ff ff28 	bl	8000da0 <LcdInit>
  LcdClear();
 8000f50:	f7ff fee8 	bl	8000d24 <LcdClear>
  LcdPutS("Voltmeter INT");
 8000f54:	487d      	ldr	r0, [pc, #500]	@ (800114c <main+0x224>)
 8000f56:	f7ff feef 	bl	8000d38 <LcdPutS>
  LcdGoto(1, 7);
 8000f5a:	2107      	movs	r1, #7
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f7ff ff00 	bl	8000d62 <LcdGoto>
  LcdPutS("mV");
 8000f62:	487b      	ldr	r0, [pc, #492]	@ (8001150 <main+0x228>)
 8000f64:	f7ff fee8 	bl	8000d38 <LcdPutS>
  LcdWriteCmd(0x0C);  // Cursor off
 8000f68:	200c      	movs	r0, #12
 8000f6a:	f7ff fe85 	bl	8000c78 <LcdWriteCmd>

  HAL_ADC_Init(&hadc1);
 8000f6e:	4879      	ldr	r0, [pc, #484]	@ (8001154 <main+0x22c>)
 8000f70:	f001 fa36 	bl	80023e0 <HAL_ADC_Init>
  HAL_ADC_Start_IT(&hadc1);
 8000f74:	4877      	ldr	r0, [pc, #476]	@ (8001154 <main+0x22c>)
 8000f76:	f001 fb83 	bl	8002680 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);  // Start timer 2 interrupt
 8000f7a:	4877      	ldr	r0, [pc, #476]	@ (8001158 <main+0x230>)
 8000f7c:	f004 fbd4 	bl	8005728 <HAL_TIM_Base_Start_IT>

  uint32_t adcResult;
  char buff[10];
  float mv;

  const uint32_t channels[3] = { TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3 };
 8000f80:	4a76      	ldr	r2, [pc, #472]	@ (800115c <main+0x234>)
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f88:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  for (int i = 0; i < 3; ++i) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f90:	e011      	b.n	8000fb6 <main+0x8e>
      uint32_t ch = channels[i];
 8000f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	3338      	adds	r3, #56	@ 0x38
 8000f98:	443b      	add	r3, r7
 8000f9a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
      HAL_TIM_PWM_Start   (&htim1,   ch);   // high-side
 8000fa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000fa2:	4869      	ldr	r0, [pc, #420]	@ (8001148 <main+0x220>)
 8000fa4:	f004 fc92 	bl	80058cc <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim1,   ch);   // low-side complement
 8000fa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000faa:	4867      	ldr	r0, [pc, #412]	@ (8001148 <main+0x220>)
 8000fac:	f005 fcde 	bl	800696c <HAL_TIMEx_PWMN_Start>
  for (int i = 0; i < 3; ++i) {
 8000fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8000fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	ddea      	ble.n	8000f92 <main+0x6a>
  }

  float dtheta = MIN_DTHETA;
 8000fbc:	4b68      	ldr	r3, [pc, #416]	@ (8001160 <main+0x238>)
 8000fbe:	60bb      	str	r3, [r7, #8]
  float theta = 0.0f;
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t dutyA, dutyB, dutyC;
  uint16_t update_time = 1000;
 8000fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fca:	803b      	strh	r3, [r7, #0]

  while (1)
  {
	  if (flags & STARTUP) {
 8000fcc:	4b65      	ldr	r3, [pc, #404]	@ (8001164 <main+0x23c>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d017      	beq.n	8001008 <main+0xe0>
		  if (update_time <= 2 * MAX_T) {
 8000fd8:	883b      	ldrh	r3, [r7, #0]
 8000fda:	2b0a      	cmp	r3, #10
 8000fdc:	d808      	bhi.n	8000ff0 <main+0xc8>
			  update_time = MAX_T;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	803b      	strh	r3, [r7, #0]
			  flags &= ~STARTUP;
 8000fe2:	4b60      	ldr	r3, [pc, #384]	@ (8001164 <main+0x23c>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	f023 0302 	bic.w	r3, r3, #2
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	4b5d      	ldr	r3, [pc, #372]	@ (8001164 <main+0x23c>)
 8000fee:	801a      	strh	r2, [r3, #0]
		  }

		  if (update_time <= 100)
 8000ff0:	883b      	ldrh	r3, [r7, #0]
 8000ff2:	2b64      	cmp	r3, #100	@ 0x64
 8000ff4:	d804      	bhi.n	8001000 <main+0xd8>
			  update_time -= 5;
 8000ff6:	883b      	ldrh	r3, [r7, #0]
 8000ff8:	3b05      	subs	r3, #5
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	803b      	strh	r3, [r7, #0]
 8000ffe:	e003      	b.n	8001008 <main+0xe0>
		  else
			  update_time -= 50;
 8001000:	883b      	ldrh	r3, [r7, #0]
 8001002:	3b32      	subs	r3, #50	@ 0x32
 8001004:	b29b      	uxth	r3, r3
 8001006:	803b      	strh	r3, [r7, #0]
	  }

	  if (sTimer[RECALCULATE_PWM_UPDATE_TIMER] == 0 && ((flags & ~STARTUP) ^ STARTUP)) {
 8001008:	4b57      	ldr	r3, [pc, #348]	@ (8001168 <main+0x240>)
 800100a:	885b      	ldrh	r3, [r3, #2]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10b      	bne.n	8001028 <main+0x100>
		  Recalculate_Update_Time(mv, &update_time, &dtheta);
 8001010:	f107 0208 	add.w	r2, r7, #8
 8001014:	463b      	mov	r3, r7
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800101e:	f000 f9c3 	bl	80013a8 <Recalculate_Update_Time>
		  sTimer[RECALCULATE_PWM_UPDATE_TIMER] = RECALCULATE_PWM_UPDATE_TIME;
 8001022:	4b51      	ldr	r3, [pc, #324]	@ (8001168 <main+0x240>)
 8001024:	2264      	movs	r2, #100	@ 0x64
 8001026:	805a      	strh	r2, [r3, #2]
	  }

	  if (sTimer[UPDATE_PWM_TIMER] == 0) {
 8001028:	4b4f      	ldr	r3, [pc, #316]	@ (8001168 <main+0x240>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d135      	bne.n	800109c <main+0x174>
		  theta += dtheta;
 8001030:	edd7 7a02 	vldr	s15, [r7, #8]
 8001034:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800103c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		  if (theta >= TWO_PI)
 8001040:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001042:	f7ff fa81 	bl	8000548 <__aeabi_f2d>
 8001046:	a33a      	add	r3, pc, #232	@ (adr r3, 8001130 <main+0x208>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff fd5a 	bl	8000b04 <__aeabi_dcmpge>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00f      	beq.n	8001076 <main+0x14e>
			  theta = theta - TWO_PI;
 8001056:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001058:	f7ff fa76 	bl	8000548 <__aeabi_f2d>
 800105c:	a334      	add	r3, pc, #208	@ (adr r3, 8001130 <main+0x208>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff f911 	bl	8000288 <__aeabi_dsub>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff fd9b 	bl	8000ba8 <__aeabi_d2f>
 8001072:	4603      	mov	r3, r0
 8001074:	62fb      	str	r3, [r7, #44]	@ 0x2c

		  ComputeSVPWMDuties(theta, 0.9f, &dutyA, &dutyB, &dutyC);
 8001076:	1cba      	adds	r2, r7, #2
 8001078:	1d39      	adds	r1, r7, #4
 800107a:	1dbb      	adds	r3, r7, #6
 800107c:	4618      	mov	r0, r3
 800107e:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 800116c <main+0x244>
 8001082:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001086:	f000 f875 	bl	8001174 <ComputeSVPWMDuties>

		  SetDutyCycles(dutyA, dutyB, dutyC);
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	88b9      	ldrh	r1, [r7, #4]
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f933 	bl	80012fc <SetDutyCycles>

		  sTimer[UPDATE_PWM_TIMER] = update_time;
 8001096:	883a      	ldrh	r2, [r7, #0]
 8001098:	4b33      	ldr	r3, [pc, #204]	@ (8001168 <main+0x240>)
 800109a:	801a      	strh	r2, [r3, #0]
	  }

	  if (flags & ADC_EOC)
 800109c:	4b31      	ldr	r3, [pc, #196]	@ (8001164 <main+0x23c>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d091      	beq.n	8000fcc <main+0xa4>
	  {
		  //HAL_ADC_Stop_IT(&hadc1);
		  adcResult = HAL_ADC_GetValue(&hadc1);		// get ADC value
 80010a8:	482a      	ldr	r0, [pc, #168]	@ (8001154 <main+0x22c>)
 80010aa:	f001 fc52 	bl	8002952 <HAL_ADC_GetValue>
 80010ae:	62b8      	str	r0, [r7, #40]	@ 0x28
		  mv = ((float)adcResult) * 3300.0 / 4095.0;	// Convert to milli Volt
 80010b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ba:	ee17 0a90 	vmov	r0, s15
 80010be:	f7ff fa43 	bl	8000548 <__aeabi_f2d>
 80010c2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001138 <main+0x210>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f7ff fa96 	bl	80005f8 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4610      	mov	r0, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	a31a      	add	r3, pc, #104	@ (adr r3, 8001140 <main+0x218>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fbb7 	bl	800084c <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f7ff fd5f 	bl	8000ba8 <__aeabi_d2f>
 80010ea:	4603      	mov	r3, r0
 80010ec:	637b      	str	r3, [r7, #52]	@ 0x34
		  sprintf(buff, "%7.2f", mv);
 80010ee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80010f0:	f7ff fa2a 	bl	8000548 <__aeabi_f2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	f107 0018 	add.w	r0, r7, #24
 80010fc:	491c      	ldr	r1, [pc, #112]	@ (8001170 <main+0x248>)
 80010fe:	f006 fb4f 	bl	80077a0 <siprintf>
		  LcdGoto(1, 0);
 8001102:	2100      	movs	r1, #0
 8001104:	2001      	movs	r0, #1
 8001106:	f7ff fe2c 	bl	8000d62 <LcdGoto>
		  LcdPutS(buff);
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fe12 	bl	8000d38 <LcdPutS>
		  flags &= ~ADC_EOC;
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <main+0x23c>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	b29a      	uxth	r2, r3
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <main+0x23c>)
 8001120:	801a      	strh	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc1);					// Restart ADC
 8001122:	480c      	ldr	r0, [pc, #48]	@ (8001154 <main+0x22c>)
 8001124:	f001 faac 	bl	8002680 <HAL_ADC_Start_IT>
	  if (flags & STARTUP) {
 8001128:	e750      	b.n	8000fcc <main+0xa4>
 800112a:	bf00      	nop
 800112c:	f3af 8000 	nop.w
 8001130:	54442d18 	.word	0x54442d18
 8001134:	401921fb 	.word	0x401921fb
 8001138:	00000000 	.word	0x00000000
 800113c:	40a9c800 	.word	0x40a9c800
 8001140:	00000000 	.word	0x00000000
 8001144:	40affe00 	.word	0x40affe00
 8001148:	2000025c 	.word	0x2000025c
 800114c:	0800a5b8 	.word	0x0800a5b8
 8001150:	0800a5c8 	.word	0x0800a5c8
 8001154:	200001f8 	.word	0x200001f8
 8001158:	200002a8 	.word	0x200002a8
 800115c:	0800a5d4 	.word	0x0800a5d4
 8001160:	3db2b8c2 	.word	0x3db2b8c2
 8001164:	20000000 	.word	0x20000000
 8001168:	200001f4 	.word	0x200001f4
 800116c:	3f666666 	.word	0x3f666666
 8001170:	0800a5cc 	.word	0x0800a5cc

08001174 <ComputeSVPWMDuties>:
	  }
  }
}

static void ComputeSVPWMDuties(float theta, float magnitude, uint16_t *pdutyA, uint16_t *pdutyB, uint16_t *pdutyC)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	@ 0x38
 8001178:	af00      	add	r7, sp, #0
 800117a:	ed87 0a05 	vstr	s0, [r7, #20]
 800117e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
	// Inverse Park to generate alpha and beta components from angle with vd=m, vq=0
	float v_alpha =  magnitude * cosf(theta);
 8001188:	ed97 0a05 	vldr	s0, [r7, #20]
 800118c:	f008 fc3c 	bl	8009a08 <cosf>
 8001190:	eeb0 7a40 	vmov.f32	s14, s0
 8001194:	edd7 7a04 	vldr	s15, [r7, #16]
 8001198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float v_beta  =  magnitude * sinf(theta);
 80011a0:	ed97 0a05 	vldr	s0, [r7, #20]
 80011a4:	f008 fc74 	bl	8009a90 <sinf>
 80011a8:	eeb0 7a40 	vmov.f32	s14, s0
 80011ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80011b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	// Inverse Clarke to get raw phases
	float va =  v_alpha;
 80011b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float vb = -0.5f * v_alpha + SQRT3_OVER_2 * v_beta;
 80011bc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011c0:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80011c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011c8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011cc:	eddf 6a49 	vldr	s13, [pc, #292]	@ 80012f4 <ComputeSVPWMDuties+0x180>
 80011d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float vc = -0.5f * v_alpha - SQRT3_OVER_2 * v_beta;
 80011dc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011e0:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80011e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011e8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011ec:	eddf 6a41 	vldr	s13, [pc, #260]	@ 80012f4 <ComputeSVPWMDuties+0x180>
 80011f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// shift all three so that the min goes to -1 and max to 1
	float vmax = fmaxf(fmaxf(va, vb), vc);
 80011fc:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001200:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001204:	f008 fc8a 	bl	8009b1c <fmaxf>
 8001208:	eef0 7a40 	vmov.f32	s15, s0
 800120c:	eef0 0a67 	vmov.f32	s1, s15
 8001210:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001214:	f008 fc82 	bl	8009b1c <fmaxf>
 8001218:	ed87 0a08 	vstr	s0, [r7, #32]
	float vmin = fminf(fminf(va, vb), vc);
 800121c:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001220:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001224:	f008 fc97 	bl	8009b56 <fminf>
 8001228:	eef0 7a40 	vmov.f32	s15, s0
 800122c:	eef0 0a67 	vmov.f32	s1, s15
 8001230:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001234:	f008 fc8f 	bl	8009b56 <fminf>
 8001238:	ed87 0a07 	vstr	s0, [r7, #28]
	float v0   = 0.5f * (vmax + vmin);
 800123c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001240:	edd7 7a07 	vldr	s15, [r7, #28]
 8001244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001248:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800124c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001250:	edc7 7a06 	vstr	s15, [r7, #24]
	va -= v0;
 8001254:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001258:	edd7 7a06 	vldr	s15, [r7, #24]
 800125c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001260:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	vb -= v0;
 8001264:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001268:	edd7 7a06 	vldr	s15, [r7, #24]
 800126c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001270:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	vc -= v0;
 8001274:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001278:	edd7 7a06 	vldr	s15, [r7, #24]
 800127c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001280:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Scale [–1, +1] to duty [0, 100]
	// duty = (voltage_fraction + 1)/2 * 100
	*pdutyA = (uint16_t)((va + 1.0f) * 50.0f);
 8001284:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001288:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800128c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001290:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80012f8 <ComputeSVPWMDuties+0x184>
 8001294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800129c:	ee17 3a90 	vmov	r3, s15
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	801a      	strh	r2, [r3, #0]
	*pdutyB = (uint16_t)((vb + 1.0f) * 50.0f);
 80012a6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80012aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012b2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80012f8 <ComputeSVPWMDuties+0x184>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012be:	ee17 3a90 	vmov	r3, s15
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	801a      	strh	r2, [r3, #0]
	*pdutyC = (uint16_t)((vc + 1.0f) * 50.0f);
 80012c8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012d4:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80012f8 <ComputeSVPWMDuties+0x184>
 80012d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e0:	ee17 3a90 	vmov	r3, s15
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	801a      	strh	r2, [r3, #0]
}
 80012ea:	bf00      	nop
 80012ec:	3738      	adds	r7, #56	@ 0x38
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	3f5db3d7 	.word	0x3f5db3d7
 80012f8:	42480000 	.word	0x42480000

080012fc <SetDutyCycles>:

static void SetDutyCycles(uint16_t dutyA_pct, uint16_t dutyB_pct, uint16_t dutyC_pct)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
 8001306:	460b      	mov	r3, r1
 8001308:	80bb      	strh	r3, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	807b      	strh	r3, [r7, #2]
    // Read the auto-reload (ARR) so we know full-scale
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim1);
 800130e:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <SetDutyCycles+0xa4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001314:	617b      	str	r3, [r7, #20]

    // Compute compare values
    uint16_t cmpA = (uint16_t)((arr * dutyA_pct) / 100.0f);
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001326:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80013a4 <SetDutyCycles+0xa8>
 800132a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001332:	ee17 3a90 	vmov	r3, s15
 8001336:	827b      	strh	r3, [r7, #18]
    uint16_t cmpB = (uint16_t)((arr * dutyB_pct) / 100.0f);
 8001338:	88bb      	ldrh	r3, [r7, #4]
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001348:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80013a4 <SetDutyCycles+0xa8>
 800134c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001354:	ee17 3a90 	vmov	r3, s15
 8001358:	823b      	strh	r3, [r7, #16]
    uint16_t cmpC = (uint16_t)((arr * dutyC_pct) / 100.0f);
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	fb02 f303 	mul.w	r3, r2, r3
 8001362:	ee07 3a90 	vmov	s15, r3
 8001366:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800136a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80013a4 <SetDutyCycles+0xa8>
 800136e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001376:	ee17 3a90 	vmov	r3, s15
 800137a:	81fb      	strh	r3, [r7, #14]

    // Write them into TIM1 channels 1–3
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, cmpA);
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <SetDutyCycles+0xa4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	8a7a      	ldrh	r2, [r7, #18]
 8001382:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, cmpB);
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <SetDutyCycles+0xa4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	8a3a      	ldrh	r2, [r7, #16]
 800138a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, cmpC);
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <SetDutyCycles+0xa4>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	89fa      	ldrh	r2, [r7, #14]
 8001392:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001394:	bf00      	nop
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	2000025c 	.word	0x2000025c
 80013a4:	42c80000 	.word	0x42c80000

080013a8 <Recalculate_Update_Time>:

static void Recalculate_Update_Time(float mv_input,
                                    uint16_t *update_time,
                                    float *dtheta)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80013b2:	60b8      	str	r0, [r7, #8]
 80013b4:	6079      	str	r1, [r7, #4]
    // mv_input clamped from 0 to 3100
	mv_input -= 200.0f;
 80013b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ba:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001488 <Recalculate_Update_Time+0xe0>
 80013be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013c2:	edc7 7a03 	vstr	s15, [r7, #12]
    if (mv_input < 0.0f) {
 80013c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	d511      	bpl.n	80013f8 <Recalculate_Update_Time+0x50>
    	mv_input = 0.0f;
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
    	*update_time = 1000;
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80013e0:	801a      	strh	r2, [r3, #0]
    	*dtheta = MIN_DTHETA;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a29      	ldr	r2, [pc, #164]	@ (800148c <Recalculate_Update_Time+0xe4>)
 80013e6:	601a      	str	r2, [r3, #0]
    	flags |= STARTUP;
 80013e8:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <Recalculate_Update_Time+0xe8>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <Recalculate_Update_Time+0xe8>)
 80013f4:	801a      	strh	r2, [r3, #0]
    	return;
 80013f6:	e03c      	b.n	8001472 <Recalculate_Update_Time+0xca>
    }
    else if (mv_input > 3100.0f) mv_input = 3100.0f;
 80013f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80013fc:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001494 <Recalculate_Update_Time+0xec>
 8001400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001408:	dd01      	ble.n	800140e <Recalculate_Update_Time+0x66>
 800140a:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <Recalculate_Update_Time+0xf0>)
 800140c:	60fb      	str	r3, [r7, #12]

    // normalize to [0, 1]
    float ratio = mv_input / 3100.0f;
 800140e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001412:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001494 <Recalculate_Update_Time+0xec>
 8001416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800141a:	edc7 7a05 	vstr	s15, [r7, #20]

    // time is proportionaly to negative mv_input
    *update_time = MAX_T - (uint16_t)(ratio * (MAX_T - MIN_T));
 800141e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001422:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800142e:	ee17 3a90 	vmov	r3, s15
 8001432:	b29b      	uxth	r3, r3
 8001434:	f1c3 0305 	rsb	r3, r3, #5
 8001438:	b29a      	uxth	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	801a      	strh	r2, [r3, #0]
    // dtheta is proportional to mv_input
    *dtheta = MIN_DTHETA + ratio * (MAX_DTHETA - MIN_DTHETA);
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff f882 	bl	8000548 <__aeabi_f2d>
 8001444:	a30c      	add	r3, pc, #48	@ (adr r3, 8001478 <Recalculate_Update_Time+0xd0>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f8d5 	bl	80005f8 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	a30a      	add	r3, pc, #40	@ (adr r3, 8001480 <Recalculate_Update_Time+0xd8>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7fe ff16 	bl	800028c <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fb9e 	bl	8000ba8 <__aeabi_d2f>
 800146c:	4602      	mov	r2, r0
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	601a      	str	r2, [r3, #0]
}
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	382d7365 	.word	0x382d7365
 800147c:	3fd0c152 	.word	0x3fd0c152
 8001480:	4ae74487 	.word	0x4ae74487
 8001484:	3fb65718 	.word	0x3fb65718
 8001488:	43480000 	.word	0x43480000
 800148c:	3db2b8c2 	.word	0x3db2b8c2
 8001490:	20000000 	.word	0x20000000
 8001494:	4541c000 	.word	0x4541c000
 8001498:	4541c000 	.word	0x4541c000

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b096      	sub	sp, #88	@ 0x58
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2244      	movs	r2, #68	@ 0x44
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f006 f9dd 	bl	800786a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014be:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80014c2:	f002 fdff 	bl	80040c4 <HAL_PWREx_ControlVoltageScaling>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014cc:	f000 fa1a 	bl	8001904 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d0:	2302      	movs	r3, #2
 80014d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014da:	2310      	movs	r3, #16
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e2:	2302      	movs	r3, #2
 80014e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014ea:	230a      	movs	r3, #10
 80014ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014ee:	2307      	movs	r3, #7
 80014f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 fe36 	bl	8004170 <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800150a:	f000 f9fb 	bl	8001904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2303      	movs	r3, #3
 8001514:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	2104      	movs	r1, #4
 8001526:	4618      	mov	r0, r3
 8001528:	f003 f9fe 	bl	8004928 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001532:	f000 f9e7 	bl	8001904 <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3758      	adds	r7, #88	@ 0x58
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	@ 0x28
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
 8001560:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001562:	4b2f      	ldr	r3, [pc, #188]	@ (8001620 <MX_ADC1_Init+0xe0>)
 8001564:	4a2f      	ldr	r2, [pc, #188]	@ (8001624 <MX_ADC1_Init+0xe4>)
 8001566:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001568:	4b2d      	ldr	r3, [pc, #180]	@ (8001620 <MX_ADC1_Init+0xe0>)
 800156a:	2200      	movs	r2, #0
 800156c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800156e:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <MX_ADC1_Init+0xe0>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001574:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <MX_ADC1_Init+0xe0>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800157a:	4b29      	ldr	r3, [pc, #164]	@ (8001620 <MX_ADC1_Init+0xe0>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001580:	4b27      	ldr	r3, [pc, #156]	@ (8001620 <MX_ADC1_Init+0xe0>)
 8001582:	2204      	movs	r2, #4
 8001584:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001586:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <MX_ADC1_Init+0xe0>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800158c:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <MX_ADC1_Init+0xe0>)
 800158e:	2200      	movs	r2, #0
 8001590:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001592:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <MX_ADC1_Init+0xe0>)
 8001594:	2201      	movs	r2, #1
 8001596:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001598:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <MX_ADC1_Init+0xe0>)
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <MX_ADC1_Init+0xe0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <MX_ADC1_Init+0xe0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <MX_ADC1_Init+0xe0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <MX_ADC1_Init+0xe0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <MX_ADC1_Init+0xe0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015c2:	4817      	ldr	r0, [pc, #92]	@ (8001620 <MX_ADC1_Init+0xe0>)
 80015c4:	f000 ff0c 	bl	80023e0 <HAL_ADC_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80015ce:	f000 f999 	bl	8001904 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	4619      	mov	r1, r3
 80015dc:	4810      	ldr	r0, [pc, #64]	@ (8001620 <MX_ADC1_Init+0xe0>)
 80015de:	f002 f9df 	bl	80039a0 <HAL_ADCEx_MultiModeConfigChannel>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015e8:	f000 f98c 	bl	8001904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_ADC1_Init+0xe8>)
 80015ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015f0:	2306      	movs	r3, #6
 80015f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015f8:	237f      	movs	r3, #127	@ 0x7f
 80015fa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015fc:	2304      	movs	r3, #4
 80015fe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_ADC1_Init+0xe0>)
 800160a:	f001 fbdd 	bl	8002dc8 <HAL_ADC_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001614:	f000 f976 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	@ 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200001f8 	.word	0x200001f8
 8001624:	50040000 	.word	0x50040000
 8001628:	2a000400 	.word	0x2a000400

0800162c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b09a      	sub	sp, #104	@ 0x68
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]
 800165e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	222c      	movs	r2, #44	@ 0x2c
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f006 f8ff 	bl	800786a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800166c:	4b50      	ldr	r3, [pc, #320]	@ (80017b0 <MX_TIM1_Init+0x184>)
 800166e:	4a51      	ldr	r2, [pc, #324]	@ (80017b4 <MX_TIM1_Init+0x188>)
 8001670:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8001672:	4b4f      	ldr	r3, [pc, #316]	@ (80017b0 <MX_TIM1_Init+0x184>)
 8001674:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001678:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800167a:	4b4d      	ldr	r3, [pc, #308]	@ (80017b0 <MX_TIM1_Init+0x184>)
 800167c:	2210      	movs	r2, #16
 800167e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19;
 8001680:	4b4b      	ldr	r3, [pc, #300]	@ (80017b0 <MX_TIM1_Init+0x184>)
 8001682:	2213      	movs	r2, #19
 8001684:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001686:	4b4a      	ldr	r3, [pc, #296]	@ (80017b0 <MX_TIM1_Init+0x184>)
 8001688:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800168c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800168e:	4b48      	ldr	r3, [pc, #288]	@ (80017b0 <MX_TIM1_Init+0x184>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001694:	4b46      	ldr	r3, [pc, #280]	@ (80017b0 <MX_TIM1_Init+0x184>)
 8001696:	2280      	movs	r2, #128	@ 0x80
 8001698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800169a:	4845      	ldr	r0, [pc, #276]	@ (80017b0 <MX_TIM1_Init+0x184>)
 800169c:	f003 ffec 	bl	8005678 <HAL_TIM_Base_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80016a6:	f000 f92d 	bl	8001904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016b0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80016b4:	4619      	mov	r1, r3
 80016b6:	483e      	ldr	r0, [pc, #248]	@ (80017b0 <MX_TIM1_Init+0x184>)
 80016b8:	f004 fc2a 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80016c2:	f000 f91f 	bl	8001904 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016c6:	483a      	ldr	r0, [pc, #232]	@ (80017b0 <MX_TIM1_Init+0x184>)
 80016c8:	f004 f89e 	bl	8005808 <HAL_TIM_PWM_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80016d2:	f000 f917 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016e2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016e6:	4619      	mov	r1, r3
 80016e8:	4831      	ldr	r0, [pc, #196]	@ (80017b0 <MX_TIM1_Init+0x184>)
 80016ea:	f005 f9f9 	bl	8006ae0 <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80016f4:	f000 f906 	bl	8001904 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f8:	2360      	movs	r3, #96	@ 0x60
 80016fa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001700:	2300      	movs	r3, #0
 8001702:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001704:	2300      	movs	r3, #0
 8001706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001710:	2300      	movs	r3, #0
 8001712:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001714:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	4824      	ldr	r0, [pc, #144]	@ (80017b0 <MX_TIM1_Init+0x184>)
 800171e:	f004 fae3 	bl	8005ce8 <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001728:	f000 f8ec 	bl	8001904 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800172c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001730:	2204      	movs	r2, #4
 8001732:	4619      	mov	r1, r3
 8001734:	481e      	ldr	r0, [pc, #120]	@ (80017b0 <MX_TIM1_Init+0x184>)
 8001736:	f004 fad7 	bl	8005ce8 <HAL_TIM_PWM_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001740:	f000 f8e0 	bl	8001904 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001744:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001748:	2208      	movs	r2, #8
 800174a:	4619      	mov	r1, r3
 800174c:	4818      	ldr	r0, [pc, #96]	@ (80017b0 <MX_TIM1_Init+0x184>)
 800174e:	f004 facb 	bl	8005ce8 <HAL_TIM_PWM_ConfigChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001758:	f000 f8d4 	bl	8001904 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 20;
 8001768:	2314      	movs	r3, #20
 800176a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001774:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800177e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001788:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800178c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <MX_TIM1_Init+0x184>)
 8001794:	f005 fa2c 	bl	8006bf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 800179e:	f000 f8b1 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017a2:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <MX_TIM1_Init+0x184>)
 80017a4:	f000 f990 	bl	8001ac8 <HAL_TIM_MspPostInit>

}
 80017a8:	bf00      	nop
 80017aa:	3768      	adds	r7, #104	@ 0x68
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	2000025c 	.word	0x2000025c
 80017b4:	40012c00 	.word	0x40012c00

080017b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017be:	f107 0310 	add.w	r3, r7, #16
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <MX_TIM2_Init+0x98>)
 80017d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <MX_TIM2_Init+0x98>)
 80017e0:	f640 729f 	movw	r2, #3999	@ 0xf9f
 80017e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_TIM2_Init+0x98>)
 80017e8:	2210      	movs	r2, #16
 80017ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 80017ec:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <MX_TIM2_Init+0x98>)
 80017ee:	2213      	movs	r2, #19
 80017f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80017f2:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <MX_TIM2_Init+0x98>)
 80017f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <MX_TIM2_Init+0x98>)
 80017fc:	2280      	movs	r2, #128	@ 0x80
 80017fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001800:	4813      	ldr	r0, [pc, #76]	@ (8001850 <MX_TIM2_Init+0x98>)
 8001802:	f003 ff39 	bl	8005678 <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800180c:	f000 f87a 	bl	8001904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001814:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001816:	f107 0310 	add.w	r3, r7, #16
 800181a:	4619      	mov	r1, r3
 800181c:	480c      	ldr	r0, [pc, #48]	@ (8001850 <MX_TIM2_Init+0x98>)
 800181e:	f004 fb77 	bl	8005f10 <HAL_TIM_ConfigClockSource>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001828:	f000 f86c 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_TIM2_Init+0x98>)
 800183a:	f005 f951 	bl	8006ae0 <HAL_TIMEx_MasterConfigSynchronization>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001844:	f000 f85e 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200002a8 	.word	0x200002a8

08001854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	4b24      	ldr	r3, [pc, #144]	@ (80018fc <MX_GPIO_Init+0xa8>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186e:	4a23      	ldr	r2, [pc, #140]	@ (80018fc <MX_GPIO_Init+0xa8>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001876:	4b21      	ldr	r3, [pc, #132]	@ (80018fc <MX_GPIO_Init+0xa8>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b1e      	ldr	r3, [pc, #120]	@ (80018fc <MX_GPIO_Init+0xa8>)
 8001884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001886:	4a1d      	ldr	r2, [pc, #116]	@ (80018fc <MX_GPIO_Init+0xa8>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <MX_GPIO_Init+0xa8>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 80018a0:	4817      	ldr	r0, [pc, #92]	@ (8001900 <MX_GPIO_Init+0xac>)
 80018a2:	f002 fbe9 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b0:	f002 fbe2 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80018b4:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 80018b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4619      	mov	r1, r3
 80018cc:	480c      	ldr	r0, [pc, #48]	@ (8001900 <MX_GPIO_Init+0xac>)
 80018ce:	f002 fa29 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018d2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80018d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	4619      	mov	r1, r3
 80018ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ee:	f002 fa19 	bl	8003d24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018f2:	bf00      	nop
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	48000400 	.word	0x48000400

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <Error_Handler+0x8>

08001910 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	4b0f      	ldr	r3, [pc, #60]	@ (8001954 <HAL_MspInit+0x44>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191a:	4a0e      	ldr	r2, [pc, #56]	@ (8001954 <HAL_MspInit+0x44>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6613      	str	r3, [r2, #96]	@ 0x60
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <HAL_MspInit+0x44>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_MspInit+0x44>)
 8001930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001932:	4a08      	ldr	r2, [pc, #32]	@ (8001954 <HAL_MspInit+0x44>)
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001938:	6593      	str	r3, [r2, #88]	@ 0x58
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <HAL_MspInit+0x44>)
 800193c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0ac      	sub	sp, #176	@ 0xb0
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2288      	movs	r2, #136	@ 0x88
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f005 ff76 	bl	800786a <memset>
  if(hadc->Instance==ADC1)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a2b      	ldr	r2, [pc, #172]	@ (8001a30 <HAL_ADC_MspInit+0xd8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d14f      	bne.n	8001a28 <HAL_ADC_MspInit+0xd0>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001988:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800198c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800198e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001992:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001996:	2302      	movs	r3, #2
 8001998:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800199a:	2301      	movs	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800199e:	2308      	movs	r3, #8
 80019a0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80019a2:	2307      	movs	r3, #7
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80019a6:	2302      	movs	r3, #2
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80019aa:	2302      	movs	r3, #2
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80019ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019b2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 f9a1 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80019c4:	f7ff ff9e 	bl	8001904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <HAL_ADC_MspInit+0xdc>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019cc:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <HAL_ADC_MspInit+0xdc>)
 80019ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <HAL_ADC_MspInit+0xdc>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <HAL_ADC_MspInit+0xdc>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e4:	4a13      	ldr	r2, [pc, #76]	@ (8001a34 <HAL_ADC_MspInit+0xdc>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <HAL_ADC_MspInit+0xdc>)
 80019ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80019f8:	2320      	movs	r3, #32
 80019fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019fe:	230b      	movs	r3, #11
 8001a00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a14:	f002 f986 	bl	8003d24 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2012      	movs	r0, #18
 8001a1e:	f002 f94a 	bl	8003cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001a22:	2012      	movs	r0, #18
 8001a24:	f002 f963 	bl	8003cee <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a28:	bf00      	nop
 8001a2a:	37b0      	adds	r7, #176	@ 0xb0
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	50040000 	.word	0x50040000
 8001a34:	40021000 	.word	0x40021000

08001a38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac0 <HAL_TIM_Base_MspInit+0x88>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d11c      	bne.n	8001a84 <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x8c>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x8c>)
 8001a50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a56:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x8c>)
 8001a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	2019      	movs	r0, #25
 8001a68:	f002 f925 	bl	8003cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a6c:	2019      	movs	r0, #25
 8001a6e:	f002 f93e 	bl	8003cee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	201a      	movs	r0, #26
 8001a78:	f002 f91d 	bl	8003cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001a7c:	201a      	movs	r0, #26
 8001a7e:	f002 f936 	bl	8003cee <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a82:	e018      	b.n	8001ab6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a8c:	d113      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x8c>)
 8001a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a92:	4a0c      	ldr	r2, [pc, #48]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x8c>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <HAL_TIM_Base_MspInit+0x8c>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	201c      	movs	r0, #28
 8001aac:	f002 f903 	bl	8003cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ab0:	201c      	movs	r0, #28
 8001ab2:	f002 f91c 	bl	8003cee <HAL_NVIC_EnableIRQ>
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40012c00 	.word	0x40012c00
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08a      	sub	sp, #40	@ 0x28
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a20      	ldr	r2, [pc, #128]	@ (8001b68 <HAL_TIM_MspPostInit+0xa0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d139      	bne.n	8001b5e <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <HAL_TIM_MspPostInit+0xa4>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	4a1f      	ldr	r2, [pc, #124]	@ (8001b6c <HAL_TIM_MspPostInit+0xa4>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <HAL_TIM_MspPostInit+0xa4>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	4b1a      	ldr	r3, [pc, #104]	@ (8001b6c <HAL_TIM_MspPostInit+0xa4>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b06:	4a19      	ldr	r2, [pc, #100]	@ (8001b6c <HAL_TIM_MspPostInit+0xa4>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0e:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <HAL_TIM_MspPostInit+0xa4>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b1a:	f44f 63f0 	mov.w	r3, #1920	@ 0x780
 8001b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4619      	mov	r1, r3
 8001b36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b3a:	f002 f8f3 	bl	8003d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <HAL_TIM_MspPostInit+0xa8>)
 8001b5a:	f002 f8e3 	bl	8003d24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	@ 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40012c00 	.word	0x40012c00
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	48000400 	.word	0x48000400

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <NMI_Handler+0x4>

08001b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bca:	f000 f981 	bl	8001ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <ADC1_2_IRQHandler+0x10>)
 8001bda:	f000 fec7 	bl	800296c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200001f8 	.word	0x200001f8

08001be8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bec:	4802      	ldr	r0, [pc, #8]	@ (8001bf8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001bee:	f003 ff73 	bl	8005ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000025c 	.word	0x2000025c

08001bfc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c00:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001c02:	f003 ff69 	bl	8005ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	2000025c 	.word	0x2000025c

08001c10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c14:	4802      	ldr	r0, [pc, #8]	@ (8001c20 <TIM2_IRQHandler+0x10>)
 8001c16:	f003 ff5f 	bl	8005ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	200002a8 	.word	0x200002a8

08001c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return 1;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_kill>:

int _kill(int pid, int sig)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c3e:	f005 fe67 	bl	8007910 <__errno>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2216      	movs	r2, #22
 8001c46:	601a      	str	r2, [r3, #0]
  return -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_exit>:

void _exit (int status)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ffe7 	bl	8001c34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c66:	bf00      	nop
 8001c68:	e7fd      	b.n	8001c66 <_exit+0x12>

08001c6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b086      	sub	sp, #24
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60f8      	str	r0, [r7, #12]
 8001c72:	60b9      	str	r1, [r7, #8]
 8001c74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e00a      	b.n	8001c92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c7c:	f3af 8000 	nop.w
 8001c80:	4601      	mov	r1, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	60ba      	str	r2, [r7, #8]
 8001c88:	b2ca      	uxtb	r2, r1
 8001c8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	dbf0      	blt.n	8001c7c <_read+0x12>
  }

  return len;
 8001c9a:	687b      	ldr	r3, [r7, #4]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e009      	b.n	8001cca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	60ba      	str	r2, [r7, #8]
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	dbf1      	blt.n	8001cb6 <_write+0x12>
  }
  return len;
 8001cd2:	687b      	ldr	r3, [r7, #4]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_close>:

int _close(int file)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d04:	605a      	str	r2, [r3, #4]
  return 0;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_isatty>:

int _isatty(int file)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <_sbrk+0x5c>)
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <_sbrk+0x60>)
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d58:	4b13      	ldr	r3, [pc, #76]	@ (8001da8 <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <_sbrk+0x64>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	@ (8001dac <_sbrk+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d207      	bcs.n	8001d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d74:	f005 fdcc 	bl	8007910 <__errno>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	e009      	b.n	8001d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d84:	4b08      	ldr	r3, [pc, #32]	@ (8001da8 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a05      	ldr	r2, [pc, #20]	@ (8001da8 <_sbrk+0x64>)
 8001d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20018000 	.word	0x20018000
 8001da4:	00000400 	.word	0x00000400
 8001da8:	200002f4 	.word	0x200002f4
 8001dac:	20000448 	.word	0x20000448

08001db0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <SystemInit+0x20>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dba:	4a05      	ldr	r2, [pc, #20]	@ (8001dd0 <SystemInit+0x20>)
 8001dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <Reset_Handler>:
 8001dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e0c <LoopForever+0x2>
 8001dd8:	f7ff ffea 	bl	8001db0 <SystemInit>
 8001ddc:	480c      	ldr	r0, [pc, #48]	@ (8001e10 <LoopForever+0x6>)
 8001dde:	490d      	ldr	r1, [pc, #52]	@ (8001e14 <LoopForever+0xa>)
 8001de0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e18 <LoopForever+0xe>)
 8001de2:	2300      	movs	r3, #0
 8001de4:	e002      	b.n	8001dec <LoopCopyDataInit>

08001de6 <CopyDataInit>:
 8001de6:	58d4      	ldr	r4, [r2, r3]
 8001de8:	50c4      	str	r4, [r0, r3]
 8001dea:	3304      	adds	r3, #4

08001dec <LoopCopyDataInit>:
 8001dec:	18c4      	adds	r4, r0, r3
 8001dee:	428c      	cmp	r4, r1
 8001df0:	d3f9      	bcc.n	8001de6 <CopyDataInit>
 8001df2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e1c <LoopForever+0x12>)
 8001df4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e20 <LoopForever+0x16>)
 8001df6:	2300      	movs	r3, #0
 8001df8:	e001      	b.n	8001dfe <LoopFillZerobss>

08001dfa <FillZerobss>:
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	3204      	adds	r2, #4

08001dfe <LoopFillZerobss>:
 8001dfe:	42a2      	cmp	r2, r4
 8001e00:	d3fb      	bcc.n	8001dfa <FillZerobss>
 8001e02:	f005 fd8b 	bl	800791c <__libc_init_array>
 8001e06:	f7ff f88f 	bl	8000f28 <main>

08001e0a <LoopForever>:
 8001e0a:	e7fe      	b.n	8001e0a <LoopForever>
 8001e0c:	20018000 	.word	0x20018000
 8001e10:	20000000 	.word	0x20000000
 8001e14:	200001d8 	.word	0x200001d8
 8001e18:	0800ad84 	.word	0x0800ad84
 8001e1c:	200001d8 	.word	0x200001d8
 8001e20:	20000448 	.word	0x20000448

08001e24 <ADC3_IRQHandler>:
 8001e24:	e7fe      	b.n	8001e24 <ADC3_IRQHandler>

08001e26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f001 ff35 	bl	8003ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e36:	200f      	movs	r0, #15
 8001e38:	f000 f80e 	bl	8001e58 <HAL_InitTick>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	71fb      	strb	r3, [r7, #7]
 8001e46:	e001      	b.n	8001e4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e48:	f7ff fd62 	bl	8001910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e64:	4b17      	ldr	r3, [pc, #92]	@ (8001ec4 <HAL_InitTick+0x6c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d023      	beq.n	8001eb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <HAL_InitTick+0x70>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <HAL_InitTick+0x6c>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4619      	mov	r1, r3
 8001e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e82:	4618      	mov	r0, r3
 8001e84:	f001 ff41 	bl	8003d0a <HAL_SYSTICK_Config>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10f      	bne.n	8001eae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b0f      	cmp	r3, #15
 8001e92:	d809      	bhi.n	8001ea8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e94:	2200      	movs	r2, #0
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	f001 ff0b 	bl	8003cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ecc <HAL_InitTick+0x74>)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e007      	b.n	8001eb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	73fb      	strb	r3, [r7, #15]
 8001eac:	e004      	b.n	8001eb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e001      	b.n	8001eb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000000c 	.word	0x2000000c
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ed4:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_IncTick+0x20>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <HAL_IncTick+0x24>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <HAL_IncTick+0x24>)
 8001ee2:	6013      	str	r3, [r2, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	2000000c 	.word	0x2000000c
 8001ef4:	200002f8 	.word	0x200002f8

08001ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return uwTick;
 8001efc:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <HAL_GetTick+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	200002f8 	.word	0x200002f8

08001f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f18:	f7ff ffee 	bl	8001ef8 <HAL_GetTick>
 8001f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f28:	d005      	beq.n	8001f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <HAL_Delay+0x44>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f36:	bf00      	nop
 8001f38:	f7ff ffde 	bl	8001ef8 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d8f7      	bhi.n	8001f38 <HAL_Delay+0x28>
  {
  }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2000000c 	.word	0x2000000c

08001f58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	609a      	str	r2, [r3, #8]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3360      	adds	r3, #96	@ 0x60
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <LL_ADC_SetOffset+0x44>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ff8:	bf00      	nop
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	03fff000 	.word	0x03fff000

08002008 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3360      	adds	r3, #96	@ 0x60
 8002016:	461a      	mov	r2, r3
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3360      	adds	r3, #96	@ 0x60
 8002044:	461a      	mov	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	431a      	orrs	r2, r3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800205e:	bf00      	nop
 8002060:	371c      	adds	r7, #28
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3330      	adds	r3, #48	@ 0x30
 80020a0:	461a      	mov	r2, r3
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	f003 030c 	and.w	r3, r3, #12
 80020ac:	4413      	add	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	211f      	movs	r1, #31
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	0e9b      	lsrs	r3, r3, #26
 80020c8:	f003 011f 	and.w	r1, r3, #31
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	431a      	orrs	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800210e:	b480      	push	{r7}
 8002110:	b087      	sub	sp, #28
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3314      	adds	r3, #20
 800211e:	461a      	mov	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	0e5b      	lsrs	r3, r3, #25
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	4413      	add	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	0d1b      	lsrs	r3, r3, #20
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	2107      	movs	r1, #7
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	0d1b      	lsrs	r3, r3, #20
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	431a      	orrs	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217c:	43db      	mvns	r3, r3
 800217e:	401a      	ands	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0318 	and.w	r3, r3, #24
 8002186:	4908      	ldr	r1, [pc, #32]	@ (80021a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002188:	40d9      	lsrs	r1, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	400b      	ands	r3, r1
 800218e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002192:	431a      	orrs	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800219a:	bf00      	nop
 800219c:	3714      	adds	r7, #20
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	0007ffff 	.word	0x0007ffff

080021ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 031f 	and.w	r3, r3, #31
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80021f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6093      	str	r3, [r2, #8]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002218:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800221c:	d101      	bne.n	8002222 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002240:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002244:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002268:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800226c:	d101      	bne.n	8002272 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002290:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022bc:	f043 0202 	orr.w	r2, r3, #2
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <LL_ADC_IsEnabled+0x18>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <LL_ADC_IsEnabled+0x1a>
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b02      	cmp	r3, #2
 8002308:	d101      	bne.n	800230e <LL_ADC_IsDisableOngoing+0x18>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <LL_ADC_IsDisableOngoing+0x1a>
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800232c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002330:	f043 0204 	orr.w	r2, r3, #4
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002354:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002358:	f043 0210 	orr.w	r2, r3, #16
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b04      	cmp	r3, #4
 800237e:	d101      	bne.n	8002384 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023a6:	f043 0220 	orr.w	r2, r3, #32
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d101      	bne.n	80023d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b089      	sub	sp, #36	@ 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e130      	b.n	800265c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff faa5 	bl	8001958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff fef1 	bl	8002208 <LL_ADC_IsDeepPowerDownEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fed7 	bl	80021e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ff0c 	bl	8002258 <LL_ADC_IsInternalRegulatorEnabled>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d115      	bne.n	8002472 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fef0 	bl	8002230 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002450:	4b84      	ldr	r3, [pc, #528]	@ (8002664 <HAL_ADC_Init+0x284>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	4a84      	ldr	r2, [pc, #528]	@ (8002668 <HAL_ADC_Init+0x288>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	3301      	adds	r3, #1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002464:	e002      	b.n	800246c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b01      	subs	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f9      	bne.n	8002466 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff feee 	bl	8002258 <LL_ADC_IsInternalRegulatorEnabled>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10d      	bne.n	800249e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002486:	f043 0210 	orr.w	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff62 	bl	800236c <LL_ADC_REG_IsConversionOngoing>
 80024a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 80c9 	bne.w	800264a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 80c5 	bne.w	800264a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024c8:	f043 0202 	orr.w	r2, r3, #2
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fefb 	bl	80022d0 <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d115      	bne.n	800250c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024e0:	4862      	ldr	r0, [pc, #392]	@ (800266c <HAL_ADC_Init+0x28c>)
 80024e2:	f7ff fef5 	bl	80022d0 <LL_ADC_IsEnabled>
 80024e6:	4604      	mov	r4, r0
 80024e8:	4861      	ldr	r0, [pc, #388]	@ (8002670 <HAL_ADC_Init+0x290>)
 80024ea:	f7ff fef1 	bl	80022d0 <LL_ADC_IsEnabled>
 80024ee:	4603      	mov	r3, r0
 80024f0:	431c      	orrs	r4, r3
 80024f2:	4860      	ldr	r0, [pc, #384]	@ (8002674 <HAL_ADC_Init+0x294>)
 80024f4:	f7ff feec 	bl	80022d0 <LL_ADC_IsEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4323      	orrs	r3, r4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4619      	mov	r1, r3
 8002506:	485c      	ldr	r0, [pc, #368]	@ (8002678 <HAL_ADC_Init+0x298>)
 8002508:	f7ff fd26 	bl	8001f58 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7e5b      	ldrb	r3, [r3, #25]
 8002510:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002516:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800251c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002522:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800252a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d106      	bne.n	8002548 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253e:	3b01      	subs	r3, #1
 8002540:	045b      	lsls	r3, r3, #17
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800255c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	4b44      	ldr	r3, [pc, #272]	@ (800267c <HAL_ADC_Init+0x29c>)
 800256c:	4013      	ands	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	69b9      	ldr	r1, [r7, #24]
 8002574:	430b      	orrs	r3, r1
 8002576:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff1c 	bl	80023ba <LL_ADC_INJ_IsConversionOngoing>
 8002582:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d13d      	bne.n	8002606 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d13a      	bne.n	8002606 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002594:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800259c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025ac:	f023 0302 	bic.w	r3, r3, #2
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	69b9      	ldr	r1, [r7, #24]
 80025b6:	430b      	orrs	r3, r1
 80025b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d118      	bne.n	80025f6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025ce:	f023 0304 	bic.w	r3, r3, #4
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025da:	4311      	orrs	r1, r2
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025e0:	4311      	orrs	r1, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025e6:	430a      	orrs	r2, r1
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	611a      	str	r2, [r3, #16]
 80025f4:	e007      	b.n	8002606 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d10c      	bne.n	8002628 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002614:	f023 010f 	bic.w	r1, r3, #15
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	1e5a      	subs	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	631a      	str	r2, [r3, #48]	@ 0x30
 8002626:	e007      	b.n	8002638 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 020f 	bic.w	r2, r2, #15
 8002636:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263c:	f023 0303 	bic.w	r3, r3, #3
 8002640:	f043 0201 	orr.w	r2, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	655a      	str	r2, [r3, #84]	@ 0x54
 8002648:	e007      	b.n	800265a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800264e:	f043 0210 	orr.w	r2, r3, #16
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800265a:	7ffb      	ldrb	r3, [r7, #31]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3724      	adds	r7, #36	@ 0x24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd90      	pop	{r4, r7, pc}
 8002664:	20000004 	.word	0x20000004
 8002668:	053e2d63 	.word	0x053e2d63
 800266c:	50040000 	.word	0x50040000
 8002670:	50040100 	.word	0x50040100
 8002674:	50040200 	.word	0x50040200
 8002678:	50040300 	.word	0x50040300
 800267c:	fff0c007 	.word	0xfff0c007

08002680 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002688:	4891      	ldr	r0, [pc, #580]	@ (80028d0 <HAL_ADC_Start_IT+0x250>)
 800268a:	f7ff fd8f 	bl	80021ac <LL_ADC_GetMultimode>
 800268e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fe69 	bl	800236c <LL_ADC_REG_IsConversionOngoing>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	f040 8110 	bne.w	80028c2 <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_Start_IT+0x30>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e10b      	b.n	80028c8 <HAL_ADC_Start_IT+0x248>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f001 f833 	bl	8003724 <ADC_Enable>
 80026be:	4603      	mov	r3, r0
 80026c0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f040 80f7 	bne.w	80028b8 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80026d2:	f023 0301 	bic.w	r3, r3, #1
 80026d6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a7c      	ldr	r2, [pc, #496]	@ (80028d4 <HAL_ADC_Start_IT+0x254>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d002      	beq.n	80026ee <HAL_ADC_Start_IT+0x6e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	e000      	b.n	80026f0 <HAL_ADC_Start_IT+0x70>
 80026ee:	4b7a      	ldr	r3, [pc, #488]	@ (80028d8 <HAL_ADC_Start_IT+0x258>)
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d002      	beq.n	80026fe <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002702:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271a:	f023 0206 	bic.w	r2, r3, #6
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	659a      	str	r2, [r3, #88]	@ 0x58
 8002722:	e002      	b.n	800272a <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	221c      	movs	r2, #28
 8002730:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 021c 	bic.w	r2, r2, #28
 8002748:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d108      	bne.n	8002764 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0208 	orr.w	r2, r2, #8
 8002760:	605a      	str	r2, [r3, #4]
          break;
 8002762:	e008      	b.n	8002776 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0204 	orr.w	r2, r2, #4
 8002772:	605a      	str	r2, [r3, #4]
          break;
 8002774:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0210 	orr.w	r2, r2, #16
 800278c:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a50      	ldr	r2, [pc, #320]	@ (80028d4 <HAL_ADC_Start_IT+0x254>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d002      	beq.n	800279e <HAL_ADC_Start_IT+0x11e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	e000      	b.n	80027a0 <HAL_ADC_Start_IT+0x120>
 800279e:	4b4e      	ldr	r3, [pc, #312]	@ (80028d8 <HAL_ADC_Start_IT+0x258>)
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d008      	beq.n	80027ba <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b05      	cmp	r3, #5
 80027b2:	d002      	beq.n	80027ba <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	2b09      	cmp	r3, #9
 80027b8:	d13a      	bne.n	8002830 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d02d      	beq.n	8002824 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d110      	bne.n	8002802 <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0220 	bic.w	r2, r2, #32
 80027ee:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80027fe:	605a      	str	r2, [r3, #4]
              break;
 8002800:	e010      	b.n	8002824 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002810:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0220 	orr.w	r2, r2, #32
 8002820:	605a      	str	r2, [r3, #4]
              break;
 8002822:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fd77 	bl	800231c <LL_ADC_REG_StartConversion>
 800282e:	e04a      	b.n	80028c6 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002834:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a24      	ldr	r2, [pc, #144]	@ (80028d4 <HAL_ADC_Start_IT+0x254>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d002      	beq.n	800284c <HAL_ADC_Start_IT+0x1cc>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	e000      	b.n	800284e <HAL_ADC_Start_IT+0x1ce>
 800284c:	4b22      	ldr	r3, [pc, #136]	@ (80028d8 <HAL_ADC_Start_IT+0x258>)
 800284e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d034      	beq.n	80028c6 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002860:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002864:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	655a      	str	r2, [r3, #84]	@ 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d110      	bne.n	8002896 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0220 	bic.w	r2, r2, #32
 8002882:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002892:	605a      	str	r2, [r3, #4]
              break;
 8002894:	e017      	b.n	80028c6 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028a4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0220 	orr.w	r2, r2, #32
 80028b4:	605a      	str	r2, [r3, #4]
              break;
 80028b6:	e006      	b.n	80028c6 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80028c0:	e001      	b.n	80028c6 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	50040300 	.word	0x50040300
 80028d4:	50040100 	.word	0x50040100
 80028d8:	50040000 	.word	0x50040000

080028dc <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_Stop_IT+0x16>
 80028ee:	2302      	movs	r3, #2
 80028f0:	e02b      	b.n	800294a <HAL_ADC_Stop_IT+0x6e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80028fa:	2103      	movs	r1, #3
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fe55 	bl	80035ac <ADC_ConversionStop>
 8002902:	4603      	mov	r3, r0
 8002904:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d119      	bne.n	8002940 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 021c 	bic.w	r2, r2, #28
 800291a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f000 ff87 	bl	8003830 <ADC_Disable>
 8002922:	4603      	mov	r3, r0
 8002924:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d109      	bne.n	8002940 <HAL_ADC_Stop_IT+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002930:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	f043 0201 	orr.w	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	@ 0x28
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002988:	4882      	ldr	r0, [pc, #520]	@ (8002b94 <HAL_ADC_IRQHandler+0x228>)
 800298a:	f7ff fc0f 	bl	80021ac <LL_ADC_GetMultimode>
 800298e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d017      	beq.n	80029ca <HAL_ADC_IRQHandler+0x5e>
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a8:	f003 0310 	and.w	r3, r3, #16
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 ffe4 	bl	800398a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2202      	movs	r2, #2
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <HAL_ADC_IRQHandler+0x72>
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10a      	bne.n	80029f4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 8083 	beq.w	8002af0 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d07d      	beq.n	8002af0 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d105      	bne.n	8002a0c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a04:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fb2a 	bl	800206a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d062      	beq.n	8002ae2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a5d      	ldr	r2, [pc, #372]	@ (8002b98 <HAL_ADC_IRQHandler+0x22c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d002      	beq.n	8002a2c <HAL_ADC_IRQHandler+0xc0>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	e000      	b.n	8002a2e <HAL_ADC_IRQHandler+0xc2>
 8002a2c:	4b5b      	ldr	r3, [pc, #364]	@ (8002b9c <HAL_ADC_IRQHandler+0x230>)
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d008      	beq.n	8002a48 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d002      	beq.n	8002a48 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b09      	cmp	r3, #9
 8002a46:	d104      	bne.n	8002a52 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	623b      	str	r3, [r7, #32]
 8002a50:	e00c      	b.n	8002a6c <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a50      	ldr	r2, [pc, #320]	@ (8002b98 <HAL_ADC_IRQHandler+0x22c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d002      	beq.n	8002a62 <HAL_ADC_IRQHandler+0xf6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	e000      	b.n	8002a64 <HAL_ADC_IRQHandler+0xf8>
 8002a62:	4b4e      	ldr	r3, [pc, #312]	@ (8002b9c <HAL_ADC_IRQHandler+0x230>)
 8002a64:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d135      	bne.n	8002ae2 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d12e      	bne.n	8002ae2 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fc6f 	bl	800236c <LL_ADC_REG_IsConversionOngoing>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11a      	bne.n	8002aca <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 020c 	bic.w	r2, r2, #12
 8002aa2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d112      	bne.n	8002ae2 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac0:	f043 0201 	orr.w	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ac8:	e00b      	b.n	8002ae2 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ace:	f043 0210 	orr.w	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ada:	f043 0201 	orr.w	r2, r3, #1
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fe fa02 	bl	8000eec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	220c      	movs	r2, #12
 8002aee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d004      	beq.n	8002b04 <HAL_ADC_IRQHandler+0x198>
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 809f 	beq.w	8002c4e <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8099 	beq.w	8002c4e <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fad5 	bl	80020e8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b3e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fa90 	bl	800206a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b4a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a11      	ldr	r2, [pc, #68]	@ (8002b98 <HAL_ADC_IRQHandler+0x22c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d002      	beq.n	8002b5c <HAL_ADC_IRQHandler+0x1f0>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	e000      	b.n	8002b5e <HAL_ADC_IRQHandler+0x1f2>
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b9c <HAL_ADC_IRQHandler+0x230>)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d008      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b06      	cmp	r3, #6
 8002b70:	d002      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2b07      	cmp	r3, #7
 8002b76:	d104      	bne.n	8002b82 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	623b      	str	r3, [r7, #32]
 8002b80:	e013      	b.n	8002baa <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <HAL_ADC_IRQHandler+0x22c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d009      	beq.n	8002ba0 <HAL_ADC_IRQHandler+0x234>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	e007      	b.n	8002ba2 <HAL_ADC_IRQHandler+0x236>
 8002b92:	bf00      	nop
 8002b94:	50040300 	.word	0x50040300
 8002b98:	50040100 	.word	0x50040100
 8002b9c:	50040000 	.word	0x50040000
 8002ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8002d98 <HAL_ADC_IRQHandler+0x42c>)
 8002ba2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d047      	beq.n	8002c40 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <HAL_ADC_IRQHandler+0x25e>
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d03f      	beq.n	8002c40 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d13a      	bne.n	8002c40 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd4:	2b40      	cmp	r3, #64	@ 0x40
 8002bd6:	d133      	bne.n	8002c40 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d12e      	bne.n	8002c40 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fbe7 	bl	80023ba <LL_ADC_INJ_IsConversionOngoing>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11a      	bne.n	8002c28 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c00:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d112      	bne.n	8002c40 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1e:	f043 0201 	orr.w	r2, r3, #1
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c26:	e00b      	b.n	8002c40 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c2c:	f043 0210 	orr.w	r2, r3, #16
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fe7a 	bl	800393a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2260      	movs	r2, #96	@ 0x60
 8002c4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d011      	beq.n	8002c7c <HAL_ADC_IRQHandler+0x310>
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00c      	beq.n	8002c7c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c66:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f896 	bl	8002da0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2280      	movs	r2, #128	@ 0x80
 8002c7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d012      	beq.n	8002cac <HAL_ADC_IRQHandler+0x340>
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00d      	beq.n	8002cac <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c94:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 fe60 	bl	8003962 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002caa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d012      	beq.n	8002cdc <HAL_ADC_IRQHandler+0x370>
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00d      	beq.n	8002cdc <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fe52 	bl	8003976 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cda:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d036      	beq.n	8002d54 <HAL_ADC_IRQHandler+0x3e8>
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d031      	beq.n	8002d54 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d102      	bne.n	8002cfe <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cfc:	e014      	b.n	8002d28 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d04:	4825      	ldr	r0, [pc, #148]	@ (8002d9c <HAL_ADC_IRQHandler+0x430>)
 8002d06:	f7ff fa5f 	bl	80021c8 <LL_ADC_GetMultiDMATransfer>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002d10:	2301      	movs	r3, #1
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d14:	e008      	b.n	8002d28 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002d24:	2301      	movs	r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d10e      	bne.n	8002d4c <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d32:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3e:	f043 0202 	orr.w	r2, r3, #2
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f834 	bl	8002db4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2210      	movs	r2, #16
 8002d52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d018      	beq.n	8002d90 <HAL_ADC_IRQHandler+0x424>
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d78:	f043 0208 	orr.w	r2, r3, #8
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d88:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fddf 	bl	800394e <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002d90:	bf00      	nop
 8002d92:	3728      	adds	r7, #40	@ 0x28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	50040000 	.word	0x50040000
 8002d9c:	50040300 	.word	0x50040300

08002da0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b0b6      	sub	sp, #216	@ 0xd8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x22>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e3c9      	b.n	800357e <HAL_ADC_ConfigChannel+0x7b6>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fab8 	bl	800236c <LL_ADC_REG_IsConversionOngoing>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 83aa 	bne.w	8003558 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d824      	bhi.n	8002e5e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	3b02      	subs	r3, #2
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d81b      	bhi.n	8002e56 <HAL_ADC_ConfigChannel+0x8e>
 8002e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e24 <HAL_ADC_ConfigChannel+0x5c>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002e35 	.word	0x08002e35
 8002e28:	08002e3d 	.word	0x08002e3d
 8002e2c:	08002e45 	.word	0x08002e45
 8002e30:	08002e4d 	.word	0x08002e4d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002e34:	230c      	movs	r3, #12
 8002e36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e3a:	e010      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002e3c:	2312      	movs	r3, #18
 8002e3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e42:	e00c      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002e44:	2318      	movs	r3, #24
 8002e46:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e4a:	e008      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002e4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e54:	e003      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002e56:	2306      	movs	r3, #6
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002e5c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002e6c:	f7ff f910 	bl	8002090 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fa79 	bl	800236c <LL_ADC_REG_IsConversionOngoing>
 8002e7a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fa99 	bl	80023ba <LL_ADC_INJ_IsConversionOngoing>
 8002e88:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f040 81a4 	bne.w	80031de <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f040 819f 	bne.w	80031de <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	6819      	ldr	r1, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	461a      	mov	r2, r3
 8002eae:	f7ff f92e 	bl	800210e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	08db      	lsrs	r3, r3, #3
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d00a      	beq.n	8002eea <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6919      	ldr	r1, [r3, #16]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ee4:	f7ff f86c 	bl	8001fc0 <LL_ADC_SetOffset>
 8002ee8:	e179      	b.n	80031de <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f889 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10a      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x14e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff f87e 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	0e9b      	lsrs	r3, r3, #26
 8002f10:	f003 021f 	and.w	r2, r3, #31
 8002f14:	e01e      	b.n	8002f54 <HAL_ADC_ConfigChannel+0x18c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff f873 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002f44:	2320      	movs	r3, #32
 8002f46:	e004      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002f48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d105      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x1a4>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	0e9b      	lsrs	r3, r3, #26
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	e018      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x1d6>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002f80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002f88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e004      	b.n	8002f9e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002f94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f98:	fab3 f383 	clz	r3, r3
 8002f9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d106      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f842 	bl	8002034 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff f826 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x214>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2101      	movs	r1, #1
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff f81b 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	0e9b      	lsrs	r3, r3, #26
 8002fd6:	f003 021f 	and.w	r2, r3, #31
 8002fda:	e01e      	b.n	800301a <HAL_ADC_ConfigChannel+0x252>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff f810 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ff2:	fa93 f3a3 	rbit	r3, r3
 8002ff6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002ffa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003002:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800300a:	2320      	movs	r3, #32
 800300c:	e004      	b.n	8003018 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800300e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003022:	2b00      	cmp	r3, #0
 8003024:	d105      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x26a>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	0e9b      	lsrs	r3, r3, #26
 800302c:	f003 031f 	and.w	r3, r3, #31
 8003030:	e018      	b.n	8003064 <HAL_ADC_ConfigChannel+0x29c>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003046:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800304a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800304e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003056:	2320      	movs	r3, #32
 8003058:	e004      	b.n	8003064 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800305a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003064:	429a      	cmp	r2, r3
 8003066:	d106      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2200      	movs	r2, #0
 800306e:	2101      	movs	r1, #1
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe ffdf 	bl	8002034 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2102      	movs	r1, #2
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe ffc3 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8003082:	4603      	mov	r3, r0
 8003084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x2da>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2102      	movs	r1, #2
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe ffb8 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8003098:	4603      	mov	r3, r0
 800309a:	0e9b      	lsrs	r3, r3, #26
 800309c:	f003 021f 	and.w	r2, r3, #31
 80030a0:	e01e      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x318>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2102      	movs	r1, #2
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7fe ffad 	bl	8002008 <LL_ADC_GetOffsetChannel>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80030c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80030c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80030d0:	2320      	movs	r3, #32
 80030d2:	e004      	b.n	80030de <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80030d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d105      	bne.n	80030f8 <HAL_ADC_ConfigChannel+0x330>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	0e9b      	lsrs	r3, r3, #26
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	e014      	b.n	8003122 <HAL_ADC_ConfigChannel+0x35a>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003100:	fa93 f3a3 	rbit	r3, r3
 8003104:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003106:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003108:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800310c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003114:	2320      	movs	r3, #32
 8003116:	e004      	b.n	8003122 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003118:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800311c:	fab3 f383 	clz	r3, r3
 8003120:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003122:	429a      	cmp	r2, r3
 8003124:	d106      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2200      	movs	r2, #0
 800312c:	2102      	movs	r1, #2
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe ff80 	bl	8002034 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2103      	movs	r1, #3
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe ff64 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x398>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2103      	movs	r1, #3
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe ff59 	bl	8002008 <LL_ADC_GetOffsetChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	f003 021f 	and.w	r2, r3, #31
 800315e:	e017      	b.n	8003190 <HAL_ADC_ConfigChannel+0x3c8>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2103      	movs	r1, #3
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe ff4e 	bl	8002008 <LL_ADC_GetOffsetChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800317a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800317c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003182:	2320      	movs	r3, #32
 8003184:	e003      	b.n	800318e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	b2db      	uxtb	r3, r3
 800318e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x3e0>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	0e9b      	lsrs	r3, r3, #26
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	e011      	b.n	80031cc <HAL_ADC_ConfigChannel+0x404>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80031b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80031b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80031ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80031c0:	2320      	movs	r3, #32
 80031c2:	e003      	b.n	80031cc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80031c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d106      	bne.n	80031de <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2200      	movs	r2, #0
 80031d6:	2103      	movs	r1, #3
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fe ff2b 	bl	8002034 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f874 	bl	80022d0 <LL_ADC_IsEnabled>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f040 8140 	bne.w	8003470 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6818      	ldr	r0, [r3, #0]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6819      	ldr	r1, [r3, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	461a      	mov	r2, r3
 80031fe:	f7fe ffb1 	bl	8002164 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	4a8f      	ldr	r2, [pc, #572]	@ (8003444 <HAL_ADC_ConfigChannel+0x67c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	f040 8131 	bne.w	8003470 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10b      	bne.n	8003236 <HAL_ADC_ConfigChannel+0x46e>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	0e9b      	lsrs	r3, r3, #26
 8003224:	3301      	adds	r3, #1
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2b09      	cmp	r3, #9
 800322c:	bf94      	ite	ls
 800322e:	2301      	movls	r3, #1
 8003230:	2300      	movhi	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	e019      	b.n	800326a <HAL_ADC_ConfigChannel+0x4a2>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003246:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003248:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800324e:	2320      	movs	r3, #32
 8003250:	e003      	b.n	800325a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003252:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003254:	fab3 f383 	clz	r3, r3
 8003258:	b2db      	uxtb	r3, r3
 800325a:	3301      	adds	r3, #1
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2b09      	cmp	r3, #9
 8003262:	bf94      	ite	ls
 8003264:	2301      	movls	r3, #1
 8003266:	2300      	movhi	r3, #0
 8003268:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800326a:	2b00      	cmp	r3, #0
 800326c:	d079      	beq.n	8003362 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003276:	2b00      	cmp	r3, #0
 8003278:	d107      	bne.n	800328a <HAL_ADC_ConfigChannel+0x4c2>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	0e9b      	lsrs	r3, r3, #26
 8003280:	3301      	adds	r3, #1
 8003282:	069b      	lsls	r3, r3, #26
 8003284:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003288:	e015      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x4ee>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800329a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800329c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80032a2:	2320      	movs	r3, #32
 80032a4:	e003      	b.n	80032ae <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80032a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	3301      	adds	r3, #1
 80032b0:	069b      	lsls	r3, r3, #26
 80032b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d109      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x50e>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	0e9b      	lsrs	r3, r3, #26
 80032c8:	3301      	adds	r3, #1
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2101      	movs	r1, #1
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	e017      	b.n	8003306 <HAL_ADC_ConfigChannel+0x53e>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032de:	fa93 f3a3 	rbit	r3, r3
 80032e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80032e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032e6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80032e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80032ee:	2320      	movs	r3, #32
 80032f0:	e003      	b.n	80032fa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80032f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f4:	fab3 f383 	clz	r3, r3
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	3301      	adds	r3, #1
 80032fc:	f003 031f 	and.w	r3, r3, #31
 8003300:	2101      	movs	r1, #1
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	ea42 0103 	orr.w	r1, r2, r3
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10a      	bne.n	800332c <HAL_ADC_ConfigChannel+0x564>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	0e9b      	lsrs	r3, r3, #26
 800331c:	3301      	adds	r3, #1
 800331e:	f003 021f 	and.w	r2, r3, #31
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	051b      	lsls	r3, r3, #20
 800332a:	e018      	b.n	800335e <HAL_ADC_ConfigChannel+0x596>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003334:	fa93 f3a3 	rbit	r3, r3
 8003338:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800333a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800333e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003344:	2320      	movs	r3, #32
 8003346:	e003      	b.n	8003350 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	3301      	adds	r3, #1
 8003352:	f003 021f 	and.w	r2, r3, #31
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800335e:	430b      	orrs	r3, r1
 8003360:	e081      	b.n	8003466 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800336a:	2b00      	cmp	r3, #0
 800336c:	d107      	bne.n	800337e <HAL_ADC_ConfigChannel+0x5b6>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	0e9b      	lsrs	r3, r3, #26
 8003374:	3301      	adds	r3, #1
 8003376:	069b      	lsls	r3, r3, #26
 8003378:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800337c:	e015      	b.n	80033aa <HAL_ADC_ConfigChannel+0x5e2>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800338c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	e003      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800339a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	069b      	lsls	r3, r3, #26
 80033a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d109      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x602>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	0e9b      	lsrs	r3, r3, #26
 80033bc:	3301      	adds	r3, #1
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2101      	movs	r1, #1
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	e017      	b.n	80033fa <HAL_ADC_ConfigChannel+0x632>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	fa93 f3a3 	rbit	r3, r3
 80033d6:	61bb      	str	r3, [r7, #24]
  return result;
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80033e2:	2320      	movs	r3, #32
 80033e4:	e003      	b.n	80033ee <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	3301      	adds	r3, #1
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	2101      	movs	r1, #1
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	ea42 0103 	orr.w	r1, r2, r3
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10d      	bne.n	8003426 <HAL_ADC_ConfigChannel+0x65e>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	0e9b      	lsrs	r3, r3, #26
 8003410:	3301      	adds	r3, #1
 8003412:	f003 021f 	and.w	r2, r3, #31
 8003416:	4613      	mov	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	4413      	add	r3, r2
 800341c:	3b1e      	subs	r3, #30
 800341e:	051b      	lsls	r3, r3, #20
 8003420:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003424:	e01e      	b.n	8003464 <HAL_ADC_ConfigChannel+0x69c>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	60fb      	str	r3, [r7, #12]
  return result;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d104      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800343e:	2320      	movs	r3, #32
 8003440:	e006      	b.n	8003450 <HAL_ADC_ConfigChannel+0x688>
 8003442:	bf00      	nop
 8003444:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f003 021f 	and.w	r2, r3, #31
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	3b1e      	subs	r3, #30
 800345e:	051b      	lsls	r3, r3, #20
 8003460:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003464:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800346a:	4619      	mov	r1, r3
 800346c:	f7fe fe4f 	bl	800210e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b44      	ldr	r3, [pc, #272]	@ (8003588 <HAL_ADC_ConfigChannel+0x7c0>)
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d07a      	beq.n	8003572 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800347c:	4843      	ldr	r0, [pc, #268]	@ (800358c <HAL_ADC_ConfigChannel+0x7c4>)
 800347e:	f7fe fd91 	bl	8001fa4 <LL_ADC_GetCommonPathInternalCh>
 8003482:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a41      	ldr	r2, [pc, #260]	@ (8003590 <HAL_ADC_ConfigChannel+0x7c8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d12c      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003490:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003494:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d126      	bne.n	80034ea <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003594 <HAL_ADC_ConfigChannel+0x7cc>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_ADC_ConfigChannel+0x6e8>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003598 <HAL_ADC_ConfigChannel+0x7d0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d15d      	bne.n	800356c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034b8:	4619      	mov	r1, r3
 80034ba:	4834      	ldr	r0, [pc, #208]	@ (800358c <HAL_ADC_ConfigChannel+0x7c4>)
 80034bc:	f7fe fd5f 	bl	8001f7e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034c0:	4b36      	ldr	r3, [pc, #216]	@ (800359c <HAL_ADC_ConfigChannel+0x7d4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	4a36      	ldr	r2, [pc, #216]	@ (80035a0 <HAL_ADC_ConfigChannel+0x7d8>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	099b      	lsrs	r3, r3, #6
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	4613      	mov	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034da:	e002      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	3b01      	subs	r3, #1
 80034e0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f9      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034e8:	e040      	b.n	800356c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2d      	ldr	r2, [pc, #180]	@ (80035a4 <HAL_ADC_ConfigChannel+0x7dc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d118      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80034f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d112      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a23      	ldr	r2, [pc, #140]	@ (8003594 <HAL_ADC_ConfigChannel+0x7cc>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_ADC_ConfigChannel+0x74c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a22      	ldr	r2, [pc, #136]	@ (8003598 <HAL_ADC_ConfigChannel+0x7d0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d12d      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003514:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003518:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800351c:	4619      	mov	r1, r3
 800351e:	481b      	ldr	r0, [pc, #108]	@ (800358c <HAL_ADC_ConfigChannel+0x7c4>)
 8003520:	f7fe fd2d 	bl	8001f7e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003524:	e024      	b.n	8003570 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1f      	ldr	r2, [pc, #124]	@ (80035a8 <HAL_ADC_ConfigChannel+0x7e0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d120      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003530:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003534:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d11a      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a14      	ldr	r2, [pc, #80]	@ (8003594 <HAL_ADC_ConfigChannel+0x7cc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d115      	bne.n	8003572 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003546:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800354a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800354e:	4619      	mov	r1, r3
 8003550:	480e      	ldr	r0, [pc, #56]	@ (800358c <HAL_ADC_ConfigChannel+0x7c4>)
 8003552:	f7fe fd14 	bl	8001f7e <LL_ADC_SetCommonPathInternalCh>
 8003556:	e00c      	b.n	8003572 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355c:	f043 0220 	orr.w	r2, r3, #32
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800356a:	e002      	b.n	8003572 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800356c:	bf00      	nop
 800356e:	e000      	b.n	8003572 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003570:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800357a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800357e:	4618      	mov	r0, r3
 8003580:	37d8      	adds	r7, #216	@ 0xd8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	80080000 	.word	0x80080000
 800358c:	50040300 	.word	0x50040300
 8003590:	c7520000 	.word	0xc7520000
 8003594:	50040000 	.word	0x50040000
 8003598:	50040200 	.word	0x50040200
 800359c:	20000004 	.word	0x20000004
 80035a0:	053e2d63 	.word	0x053e2d63
 80035a4:	cb840000 	.word	0xcb840000
 80035a8:	80000001 	.word	0x80000001

080035ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe fed2 	bl	800236c <LL_ADC_REG_IsConversionOngoing>
 80035c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fef3 	bl	80023ba <LL_ADC_INJ_IsConversionOngoing>
 80035d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d103      	bne.n	80035e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 8098 	beq.w	8003714 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d02a      	beq.n	8003648 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7e5b      	ldrb	r3, [r3, #25]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d126      	bne.n	8003648 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7e1b      	ldrb	r3, [r3, #24]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d122      	bne.n	8003648 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003602:	2301      	movs	r3, #1
 8003604:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003606:	e014      	b.n	8003632 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4a45      	ldr	r2, [pc, #276]	@ (8003720 <ADC_ConversionStop+0x174>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d90d      	bls.n	800362c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003614:	f043 0210 	orr.w	r2, r3, #16
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003620:	f043 0201 	orr.w	r2, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e074      	b.n	8003716 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	3301      	adds	r3, #1
 8003630:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363c:	2b40      	cmp	r3, #64	@ 0x40
 800363e:	d1e3      	bne.n	8003608 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2240      	movs	r2, #64	@ 0x40
 8003646:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d014      	beq.n	8003678 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fe8a 	bl	800236c <LL_ADC_REG_IsConversionOngoing>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe fe47 	bl	80022f6 <LL_ADC_IsDisableOngoing>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe fe66 	bl	8002344 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d014      	beq.n	80036a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fe99 	bl	80023ba <LL_ADC_INJ_IsConversionOngoing>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00c      	beq.n	80036a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe fe2f 	bl	80022f6 <LL_ADC_IsDisableOngoing>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fe75 	bl	8002392 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d005      	beq.n	80036ba <ADC_ConversionStop+0x10e>
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d105      	bne.n	80036c0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80036b4:	230c      	movs	r3, #12
 80036b6:	617b      	str	r3, [r7, #20]
        break;
 80036b8:	e005      	b.n	80036c6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80036ba:	2308      	movs	r3, #8
 80036bc:	617b      	str	r3, [r7, #20]
        break;
 80036be:	e002      	b.n	80036c6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80036c0:	2304      	movs	r3, #4
 80036c2:	617b      	str	r3, [r7, #20]
        break;
 80036c4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80036c6:	f7fe fc17 	bl	8001ef8 <HAL_GetTick>
 80036ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036cc:	e01b      	b.n	8003706 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036ce:	f7fe fc13 	bl	8001ef8 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d914      	bls.n	8003706 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ee:	f043 0210 	orr.w	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fa:	f043 0201 	orr.w	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e007      	b.n	8003716 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	4013      	ands	r3, r2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1dc      	bne.n	80036ce <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3720      	adds	r7, #32
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	a33fffff 	.word	0xa33fffff

08003724 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe fdcb 	bl	80022d0 <LL_ADC_IsEnabled>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d169      	bne.n	8003814 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	4b36      	ldr	r3, [pc, #216]	@ (8003820 <ADC_Enable+0xfc>)
 8003748:	4013      	ands	r3, r2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003752:	f043 0210 	orr.w	r2, r3, #16
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e055      	b.n	8003816 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe fd86 	bl	8002280 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003774:	482b      	ldr	r0, [pc, #172]	@ (8003824 <ADC_Enable+0x100>)
 8003776:	f7fe fc15 	bl	8001fa4 <LL_ADC_GetCommonPathInternalCh>
 800377a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800377c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003780:	2b00      	cmp	r3, #0
 8003782:	d013      	beq.n	80037ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003784:	4b28      	ldr	r3, [pc, #160]	@ (8003828 <ADC_Enable+0x104>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	099b      	lsrs	r3, r3, #6
 800378a:	4a28      	ldr	r2, [pc, #160]	@ (800382c <ADC_Enable+0x108>)
 800378c:	fba2 2303 	umull	r2, r3, r2, r3
 8003790:	099b      	lsrs	r3, r3, #6
 8003792:	1c5a      	adds	r2, r3, #1
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800379e:	e002      	b.n	80037a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f9      	bne.n	80037a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037ac:	f7fe fba4 	bl	8001ef8 <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037b2:	e028      	b.n	8003806 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fd89 	bl	80022d0 <LL_ADC_IsEnabled>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d104      	bne.n	80037ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe fd59 	bl	8002280 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037ce:	f7fe fb93 	bl	8001ef8 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d914      	bls.n	8003806 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d00d      	beq.n	8003806 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ee:	f043 0210 	orr.w	r2, r3, #16
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	f043 0201 	orr.w	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e007      	b.n	8003816 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d1cf      	bne.n	80037b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	8000003f 	.word	0x8000003f
 8003824:	50040300 	.word	0x50040300
 8003828:	20000004 	.word	0x20000004
 800382c:	053e2d63 	.word	0x053e2d63

08003830 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe fd5a 	bl	80022f6 <LL_ADC_IsDisableOngoing>
 8003842:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fe fd41 	bl	80022d0 <LL_ADC_IsEnabled>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d047      	beq.n	80038e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d144      	bne.n	80038e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030d 	and.w	r3, r3, #13
 8003864:	2b01      	cmp	r3, #1
 8003866:	d10c      	bne.n	8003882 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe fd1b 	bl	80022a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2203      	movs	r2, #3
 8003878:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800387a:	f7fe fb3d 	bl	8001ef8 <HAL_GetTick>
 800387e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003880:	e029      	b.n	80038d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003886:	f043 0210 	orr.w	r2, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	f043 0201 	orr.w	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e023      	b.n	80038e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800389e:	f7fe fb2b 	bl	8001ef8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d914      	bls.n	80038d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038be:	f043 0210 	orr.w	r2, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ca:	f043 0201 	orr.w	r2, r3, #1
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e007      	b.n	80038e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1dc      	bne.n	800389e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <LL_ADC_IsEnabled>:
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <LL_ADC_IsEnabled+0x18>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <LL_ADC_IsEnabled+0x1a>
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_ADC_REG_IsConversionOngoing>:
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b04      	cmp	r3, #4
 8003926:	d101      	bne.n	800392c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800393a:	b480      	push	{r7}
 800393c:	b083      	sub	sp, #12
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b09f      	sub	sp, #124	@ 0x7c
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d101      	bne.n	80039be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039ba:	2302      	movs	r3, #2
 80039bc:	e093      	b.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80039c6:	2300      	movs	r3, #0
 80039c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80039ca:	2300      	movs	r3, #0
 80039cc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a47      	ldr	r2, [pc, #284]	@ (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d102      	bne.n	80039de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039d8:	4b46      	ldr	r3, [pc, #280]	@ (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	e001      	b.n	80039e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039de:	2300      	movs	r3, #0
 80039e0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ec:	f043 0220 	orr.w	r2, r3, #32
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e072      	b.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff ff86 	bl	8003914 <LL_ADC_REG_IsConversionOngoing>
 8003a08:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff ff80 	bl	8003914 <LL_ADC_REG_IsConversionOngoing>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d154      	bne.n	8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003a1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d151      	bne.n	8003ac4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a20:	4b35      	ldr	r3, [pc, #212]	@ (8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003a22:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d02c      	beq.n	8003a86 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003a3e:	035b      	lsls	r3, r3, #13
 8003a40:	430b      	orrs	r3, r1
 8003a42:	431a      	orrs	r2, r3
 8003a44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a46:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a48:	4829      	ldr	r0, [pc, #164]	@ (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003a4a:	f7ff ff50 	bl	80038ee <LL_ADC_IsEnabled>
 8003a4e:	4604      	mov	r4, r0
 8003a50:	4828      	ldr	r0, [pc, #160]	@ (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a52:	f7ff ff4c 	bl	80038ee <LL_ADC_IsEnabled>
 8003a56:	4603      	mov	r3, r0
 8003a58:	431c      	orrs	r4, r3
 8003a5a:	4828      	ldr	r0, [pc, #160]	@ (8003afc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003a5c:	f7ff ff47 	bl	80038ee <LL_ADC_IsEnabled>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4323      	orrs	r3, r4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d137      	bne.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a70:	f023 030f 	bic.w	r3, r3, #15
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	6811      	ldr	r1, [r2, #0]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	6892      	ldr	r2, [r2, #8]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a82:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a84:	e028      	b.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a90:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a92:	4817      	ldr	r0, [pc, #92]	@ (8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003a94:	f7ff ff2b 	bl	80038ee <LL_ADC_IsEnabled>
 8003a98:	4604      	mov	r4, r0
 8003a9a:	4816      	ldr	r0, [pc, #88]	@ (8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a9c:	f7ff ff27 	bl	80038ee <LL_ADC_IsEnabled>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	431c      	orrs	r4, r3
 8003aa4:	4815      	ldr	r0, [pc, #84]	@ (8003afc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003aa6:	f7ff ff22 	bl	80038ee <LL_ADC_IsEnabled>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	4323      	orrs	r3, r4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d112      	bne.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003aba:	f023 030f 	bic.w	r3, r3, #15
 8003abe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ac0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ac2:	e009      	b.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac8:	f043 0220 	orr.w	r2, r3, #32
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003ad6:	e000      	b.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ad8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ae2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	377c      	adds	r7, #124	@ 0x7c
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd90      	pop	{r4, r7, pc}
 8003aee:	bf00      	nop
 8003af0:	50040000 	.word	0x50040000
 8003af4:	50040100 	.word	0x50040100
 8003af8:	50040300 	.word	0x50040300
 8003afc:	50040200 	.word	0x50040200

08003b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <__NVIC_SetPriorityGrouping+0x44>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b32:	4a04      	ldr	r2, [pc, #16]	@ (8003b44 <__NVIC_SetPriorityGrouping+0x44>)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	60d3      	str	r3, [r2, #12]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b4c:	4b04      	ldr	r3, [pc, #16]	@ (8003b60 <__NVIC_GetPriorityGrouping+0x18>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	f003 0307 	and.w	r3, r3, #7
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	db0b      	blt.n	8003b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	f003 021f 	and.w	r2, r3, #31
 8003b7c:	4907      	ldr	r1, [pc, #28]	@ (8003b9c <__NVIC_EnableIRQ+0x38>)
 8003b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	2001      	movs	r0, #1
 8003b86:	fa00 f202 	lsl.w	r2, r0, r2
 8003b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	e000e100 	.word	0xe000e100

08003ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	6039      	str	r1, [r7, #0]
 8003baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	db0a      	blt.n	8003bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	490c      	ldr	r1, [pc, #48]	@ (8003bec <__NVIC_SetPriority+0x4c>)
 8003bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbe:	0112      	lsls	r2, r2, #4
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bc8:	e00a      	b.n	8003be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	4908      	ldr	r1, [pc, #32]	@ (8003bf0 <__NVIC_SetPriority+0x50>)
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	3b04      	subs	r3, #4
 8003bd8:	0112      	lsls	r2, r2, #4
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	440b      	add	r3, r1
 8003bde:	761a      	strb	r2, [r3, #24]
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	e000e100 	.word	0xe000e100
 8003bf0:	e000ed00 	.word	0xe000ed00

08003bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b089      	sub	sp, #36	@ 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f1c3 0307 	rsb	r3, r3, #7
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	bf28      	it	cs
 8003c12:	2304      	movcs	r3, #4
 8003c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	2b06      	cmp	r3, #6
 8003c1c:	d902      	bls.n	8003c24 <NVIC_EncodePriority+0x30>
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	3b03      	subs	r3, #3
 8003c22:	e000      	b.n	8003c26 <NVIC_EncodePriority+0x32>
 8003c24:	2300      	movs	r3, #0
 8003c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	f04f 32ff 	mov.w	r2, #4294967295
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43da      	mvns	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	401a      	ands	r2, r3
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	fa01 f303 	lsl.w	r3, r1, r3
 8003c46:	43d9      	mvns	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c4c:	4313      	orrs	r3, r2
         );
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3724      	adds	r7, #36	@ 0x24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
	...

08003c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c6c:	d301      	bcc.n	8003c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e00f      	b.n	8003c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c72:	4a0a      	ldr	r2, [pc, #40]	@ (8003c9c <SysTick_Config+0x40>)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3b01      	subs	r3, #1
 8003c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c7a:	210f      	movs	r1, #15
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c80:	f7ff ff8e 	bl	8003ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c84:	4b05      	ldr	r3, [pc, #20]	@ (8003c9c <SysTick_Config+0x40>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c8a:	4b04      	ldr	r3, [pc, #16]	@ (8003c9c <SysTick_Config+0x40>)
 8003c8c:	2207      	movs	r2, #7
 8003c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	e000e010 	.word	0xe000e010

08003ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff ff29 	bl	8003b00 <__NVIC_SetPriorityGrouping>
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b086      	sub	sp, #24
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cc8:	f7ff ff3e 	bl	8003b48 <__NVIC_GetPriorityGrouping>
 8003ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	6978      	ldr	r0, [r7, #20]
 8003cd4:	f7ff ff8e 	bl	8003bf4 <NVIC_EncodePriority>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff ff5d 	bl	8003ba0 <__NVIC_SetPriority>
}
 8003ce6:	bf00      	nop
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff ff31 	bl	8003b64 <__NVIC_EnableIRQ>
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7ff ffa2 	bl	8003c5c <SysTick_Config>
 8003d18:	4603      	mov	r3, r0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d32:	e17f      	b.n	8004034 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	2101      	movs	r1, #1
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d40:	4013      	ands	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8171 	beq.w	800402e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d005      	beq.n	8003d64 <HAL_GPIO_Init+0x40>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d130      	bne.n	8003dc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	2203      	movs	r2, #3
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4013      	ands	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	f003 0201 	and.w	r2, r3, #1
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d118      	bne.n	8003e04 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003dd8:	2201      	movs	r2, #1
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	08db      	lsrs	r3, r3, #3
 8003dee:	f003 0201 	and.w	r2, r3, #1
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 0303 	and.w	r3, r3, #3
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d017      	beq.n	8003e40 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	43db      	mvns	r3, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4013      	ands	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 0303 	and.w	r3, r3, #3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d123      	bne.n	8003e94 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	08da      	lsrs	r2, r3, #3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3208      	adds	r2, #8
 8003e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e58:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	220f      	movs	r2, #15
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	691a      	ldr	r2, [r3, #16]
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	08da      	lsrs	r2, r3, #3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3208      	adds	r2, #8
 8003e8e:	6939      	ldr	r1, [r7, #16]
 8003e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	2203      	movs	r2, #3
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0203 	and.w	r2, r3, #3
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80ac 	beq.w	800402e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ed6:	4b5f      	ldr	r3, [pc, #380]	@ (8004054 <HAL_GPIO_Init+0x330>)
 8003ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eda:	4a5e      	ldr	r2, [pc, #376]	@ (8004054 <HAL_GPIO_Init+0x330>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8004054 <HAL_GPIO_Init+0x330>)
 8003ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003eee:	4a5a      	ldr	r2, [pc, #360]	@ (8004058 <HAL_GPIO_Init+0x334>)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	089b      	lsrs	r3, r3, #2
 8003ef4:	3302      	adds	r3, #2
 8003ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	220f      	movs	r2, #15
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f18:	d025      	beq.n	8003f66 <HAL_GPIO_Init+0x242>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a4f      	ldr	r2, [pc, #316]	@ (800405c <HAL_GPIO_Init+0x338>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01f      	beq.n	8003f62 <HAL_GPIO_Init+0x23e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a4e      	ldr	r2, [pc, #312]	@ (8004060 <HAL_GPIO_Init+0x33c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d019      	beq.n	8003f5e <HAL_GPIO_Init+0x23a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a4d      	ldr	r2, [pc, #308]	@ (8004064 <HAL_GPIO_Init+0x340>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_GPIO_Init+0x236>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a4c      	ldr	r2, [pc, #304]	@ (8004068 <HAL_GPIO_Init+0x344>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00d      	beq.n	8003f56 <HAL_GPIO_Init+0x232>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800406c <HAL_GPIO_Init+0x348>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d007      	beq.n	8003f52 <HAL_GPIO_Init+0x22e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a4a      	ldr	r2, [pc, #296]	@ (8004070 <HAL_GPIO_Init+0x34c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_GPIO_Init+0x22a>
 8003f4a:	2306      	movs	r3, #6
 8003f4c:	e00c      	b.n	8003f68 <HAL_GPIO_Init+0x244>
 8003f4e:	2307      	movs	r3, #7
 8003f50:	e00a      	b.n	8003f68 <HAL_GPIO_Init+0x244>
 8003f52:	2305      	movs	r3, #5
 8003f54:	e008      	b.n	8003f68 <HAL_GPIO_Init+0x244>
 8003f56:	2304      	movs	r3, #4
 8003f58:	e006      	b.n	8003f68 <HAL_GPIO_Init+0x244>
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e004      	b.n	8003f68 <HAL_GPIO_Init+0x244>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e002      	b.n	8003f68 <HAL_GPIO_Init+0x244>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <HAL_GPIO_Init+0x244>
 8003f66:	2300      	movs	r3, #0
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	f002 0203 	and.w	r2, r2, #3
 8003f6e:	0092      	lsls	r2, r2, #2
 8003f70:	4093      	lsls	r3, r2
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f78:	4937      	ldr	r1, [pc, #220]	@ (8004058 <HAL_GPIO_Init+0x334>)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	3302      	adds	r3, #2
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f86:	4b3b      	ldr	r3, [pc, #236]	@ (8004074 <HAL_GPIO_Init+0x350>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003faa:	4a32      	ldr	r2, [pc, #200]	@ (8004074 <HAL_GPIO_Init+0x350>)
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fb0:	4b30      	ldr	r3, [pc, #192]	@ (8004074 <HAL_GPIO_Init+0x350>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fd4:	4a27      	ldr	r2, [pc, #156]	@ (8004074 <HAL_GPIO_Init+0x350>)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fda:	4b26      	ldr	r3, [pc, #152]	@ (8004074 <HAL_GPIO_Init+0x350>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	43db      	mvns	r3, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8004074 <HAL_GPIO_Init+0x350>)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004004:	4b1b      	ldr	r3, [pc, #108]	@ (8004074 <HAL_GPIO_Init+0x350>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	43db      	mvns	r3, r3
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4013      	ands	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004028:	4a12      	ldr	r2, [pc, #72]	@ (8004074 <HAL_GPIO_Init+0x350>)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	3301      	adds	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	fa22 f303 	lsr.w	r3, r2, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	f47f ae78 	bne.w	8003d34 <HAL_GPIO_Init+0x10>
  }
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40021000 	.word	0x40021000
 8004058:	40010000 	.word	0x40010000
 800405c:	48000400 	.word	0x48000400
 8004060:	48000800 	.word	0x48000800
 8004064:	48000c00 	.word	0x48000c00
 8004068:	48001000 	.word	0x48001000
 800406c:	48001400 	.word	0x48001400
 8004070:	48001800 	.word	0x48001800
 8004074:	40010400 	.word	0x40010400

08004078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004088:	787b      	ldrb	r3, [r7, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004094:	e002      	b.n	800409c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80040ac:	4b04      	ldr	r3, [pc, #16]	@ (80040c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40007000 	.word	0x40007000

080040c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040d2:	d130      	bne.n	8004136 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80040d4:	4b23      	ldr	r3, [pc, #140]	@ (8004164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040e0:	d038      	beq.n	8004154 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040e2:	4b20      	ldr	r3, [pc, #128]	@ (8004164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040ea:	4a1e      	ldr	r2, [pc, #120]	@ (8004164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004168 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2232      	movs	r2, #50	@ 0x32
 80040f8:	fb02 f303 	mul.w	r3, r2, r3
 80040fc:	4a1b      	ldr	r2, [pc, #108]	@ (800416c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	0c9b      	lsrs	r3, r3, #18
 8004104:	3301      	adds	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004108:	e002      	b.n	8004110 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3b01      	subs	r3, #1
 800410e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004110:	4b14      	ldr	r3, [pc, #80]	@ (8004164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800411c:	d102      	bne.n	8004124 <HAL_PWREx_ControlVoltageScaling+0x60>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f2      	bne.n	800410a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004124:	4b0f      	ldr	r3, [pc, #60]	@ (8004164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800412c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004130:	d110      	bne.n	8004154 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e00f      	b.n	8004156 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004136:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800413e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004142:	d007      	beq.n	8004154 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004144:	4b07      	ldr	r3, [pc, #28]	@ (8004164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800414c:	4a05      	ldr	r2, [pc, #20]	@ (8004164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800414e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004152:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40007000 	.word	0x40007000
 8004168:	20000004 	.word	0x20000004
 800416c:	431bde83 	.word	0x431bde83

08004170 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e3ca      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004182:	4b97      	ldr	r3, [pc, #604]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800418c:	4b94      	ldr	r3, [pc, #592]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80e4 	beq.w	800436c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <HAL_RCC_OscConfig+0x4a>
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b0c      	cmp	r3, #12
 80041ae:	f040 808b 	bne.w	80042c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	f040 8087 	bne.w	80042c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80041ba:	4b89      	ldr	r3, [pc, #548]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_RCC_OscConfig+0x62>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e3a2      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1a      	ldr	r2, [r3, #32]
 80041d6:	4b82      	ldr	r3, [pc, #520]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d004      	beq.n	80041ec <HAL_RCC_OscConfig+0x7c>
 80041e2:	4b7f      	ldr	r3, [pc, #508]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041ea:	e005      	b.n	80041f8 <HAL_RCC_OscConfig+0x88>
 80041ec:	4b7c      	ldr	r3, [pc, #496]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80041ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d223      	bcs.n	8004244 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fd1d 	bl	8004c40 <RCC_SetFlashLatencyFromMSIRange>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e383      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004210:	4b73      	ldr	r3, [pc, #460]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a72      	ldr	r2, [pc, #456]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004216:	f043 0308 	orr.w	r3, r3, #8
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	4b70      	ldr	r3, [pc, #448]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	496d      	ldr	r1, [pc, #436]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800422e:	4b6c      	ldr	r3, [pc, #432]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	021b      	lsls	r3, r3, #8
 800423c:	4968      	ldr	r1, [pc, #416]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800423e:	4313      	orrs	r3, r2
 8004240:	604b      	str	r3, [r1, #4]
 8004242:	e025      	b.n	8004290 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004244:	4b66      	ldr	r3, [pc, #408]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a65      	ldr	r2, [pc, #404]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800424a:	f043 0308 	orr.w	r3, r3, #8
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b63      	ldr	r3, [pc, #396]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	4960      	ldr	r1, [pc, #384]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004262:	4b5f      	ldr	r3, [pc, #380]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	495b      	ldr	r1, [pc, #364]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d109      	bne.n	8004290 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fcdd 	bl	8004c40 <RCC_SetFlashLatencyFromMSIRange>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e343      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004290:	f000 fc4a 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004294:	4602      	mov	r2, r0
 8004296:	4b52      	ldr	r3, [pc, #328]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	4950      	ldr	r1, [pc, #320]	@ (80043e4 <HAL_RCC_OscConfig+0x274>)
 80042a2:	5ccb      	ldrb	r3, [r1, r3]
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	fa22 f303 	lsr.w	r3, r2, r3
 80042ac:	4a4e      	ldr	r2, [pc, #312]	@ (80043e8 <HAL_RCC_OscConfig+0x278>)
 80042ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042b0:	4b4e      	ldr	r3, [pc, #312]	@ (80043ec <HAL_RCC_OscConfig+0x27c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fd fdcf 	bl	8001e58 <HAL_InitTick>
 80042ba:	4603      	mov	r3, r0
 80042bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80042be:	7bfb      	ldrb	r3, [r7, #15]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d052      	beq.n	800436a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	e327      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d032      	beq.n	8004336 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80042d0:	4b43      	ldr	r3, [pc, #268]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a42      	ldr	r2, [pc, #264]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042dc:	f7fd fe0c 	bl	8001ef8 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042e4:	f7fd fe08 	bl	8001ef8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e310      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042f6:	4b3a      	ldr	r3, [pc, #232]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0f0      	beq.n	80042e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004302:	4b37      	ldr	r3, [pc, #220]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a36      	ldr	r2, [pc, #216]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004308:	f043 0308 	orr.w	r3, r3, #8
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4b34      	ldr	r3, [pc, #208]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	4931      	ldr	r1, [pc, #196]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800431c:	4313      	orrs	r3, r2
 800431e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004320:	4b2f      	ldr	r3, [pc, #188]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	492c      	ldr	r1, [pc, #176]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]
 8004334:	e01a      	b.n	800436c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004336:	4b2a      	ldr	r3, [pc, #168]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a29      	ldr	r2, [pc, #164]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004342:	f7fd fdd9 	bl	8001ef8 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800434a:	f7fd fdd5 	bl	8001ef8 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e2dd      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800435c:	4b20      	ldr	r3, [pc, #128]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f0      	bne.n	800434a <HAL_RCC_OscConfig+0x1da>
 8004368:	e000      	b.n	800436c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800436a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d074      	beq.n	8004462 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b08      	cmp	r3, #8
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x21a>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b0c      	cmp	r3, #12
 8004382:	d10e      	bne.n	80043a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d10b      	bne.n	80043a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438a:	4b15      	ldr	r3, [pc, #84]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d064      	beq.n	8004460 <HAL_RCC_OscConfig+0x2f0>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d160      	bne.n	8004460 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e2ba      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x24a>
 80043ac:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0b      	ldr	r2, [pc, #44]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80043b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	e026      	b.n	8004408 <HAL_RCC_OscConfig+0x298>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043c2:	d115      	bne.n	80043f0 <HAL_RCC_OscConfig+0x280>
 80043c4:	4b06      	ldr	r3, [pc, #24]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a05      	ldr	r2, [pc, #20]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80043ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ce:	6013      	str	r3, [r2, #0]
 80043d0:	4b03      	ldr	r3, [pc, #12]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a02      	ldr	r2, [pc, #8]	@ (80043e0 <HAL_RCC_OscConfig+0x270>)
 80043d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e014      	b.n	8004408 <HAL_RCC_OscConfig+0x298>
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	0800a5f0 	.word	0x0800a5f0
 80043e8:	20000004 	.word	0x20000004
 80043ec:	20000008 	.word	0x20000008
 80043f0:	4ba0      	ldr	r3, [pc, #640]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a9f      	ldr	r2, [pc, #636]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80043f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043fa:	6013      	str	r3, [r2, #0]
 80043fc:	4b9d      	ldr	r3, [pc, #628]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a9c      	ldr	r2, [pc, #624]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d013      	beq.n	8004438 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004410:	f7fd fd72 	bl	8001ef8 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004418:	f7fd fd6e 	bl	8001ef8 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b64      	cmp	r3, #100	@ 0x64
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e276      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800442a:	4b92      	ldr	r3, [pc, #584]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x2a8>
 8004436:	e014      	b.n	8004462 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fd fd5e 	bl	8001ef8 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004440:	f7fd fd5a 	bl	8001ef8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b64      	cmp	r3, #100	@ 0x64
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e262      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004452:	4b88      	ldr	r3, [pc, #544]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x2d0>
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d060      	beq.n	8004530 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d005      	beq.n	8004480 <HAL_RCC_OscConfig+0x310>
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d119      	bne.n	80044ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d116      	bne.n	80044ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004480:	4b7c      	ldr	r3, [pc, #496]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_OscConfig+0x328>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e23f      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004498:	4b76      	ldr	r3, [pc, #472]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	4973      	ldr	r1, [pc, #460]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ac:	e040      	b.n	8004530 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d023      	beq.n	80044fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b6:	4b6f      	ldr	r3, [pc, #444]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6e      	ldr	r2, [pc, #440]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80044bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7fd fd19 	bl	8001ef8 <HAL_GetTick>
 80044c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ca:	f7fd fd15 	bl	8001ef8 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e21d      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044dc:	4b65      	ldr	r3, [pc, #404]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0f0      	beq.n	80044ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e8:	4b62      	ldr	r3, [pc, #392]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	495f      	ldr	r1, [pc, #380]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
 80044fc:	e018      	b.n	8004530 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044fe:	4b5d      	ldr	r3, [pc, #372]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a5c      	ldr	r2, [pc, #368]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004504:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fd fcf5 	bl	8001ef8 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004512:	f7fd fcf1 	bl	8001ef8 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e1f9      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004524:	4b53      	ldr	r3, [pc, #332]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f0      	bne.n	8004512 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d03c      	beq.n	80045b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01c      	beq.n	800457e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004544:	4b4b      	ldr	r3, [pc, #300]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800454a:	4a4a      	ldr	r2, [pc, #296]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fd fcd0 	bl	8001ef8 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455c:	f7fd fccc 	bl	8001ef8 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e1d4      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800456e:	4b41      	ldr	r3, [pc, #260]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0ef      	beq.n	800455c <HAL_RCC_OscConfig+0x3ec>
 800457c:	e01b      	b.n	80045b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800457e:	4b3d      	ldr	r3, [pc, #244]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004580:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004584:	4a3b      	ldr	r2, [pc, #236]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458e:	f7fd fcb3 	bl	8001ef8 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004596:	f7fd fcaf 	bl	8001ef8 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e1b7      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045a8:	4b32      	ldr	r3, [pc, #200]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80045aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1ef      	bne.n	8004596 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80a6 	beq.w	8004710 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045c4:	2300      	movs	r3, #0
 80045c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80045c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10d      	bne.n	80045f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d4:	4b27      	ldr	r3, [pc, #156]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80045d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d8:	4a26      	ldr	r2, [pc, #152]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80045da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045de:	6593      	str	r3, [r2, #88]	@ 0x58
 80045e0:	4b24      	ldr	r3, [pc, #144]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 80045e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ec:	2301      	movs	r3, #1
 80045ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f0:	4b21      	ldr	r3, [pc, #132]	@ (8004678 <HAL_RCC_OscConfig+0x508>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d118      	bne.n	800462e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004678 <HAL_RCC_OscConfig+0x508>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1d      	ldr	r2, [pc, #116]	@ (8004678 <HAL_RCC_OscConfig+0x508>)
 8004602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004608:	f7fd fc76 	bl	8001ef8 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004610:	f7fd fc72 	bl	8001ef8 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e17a      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004622:	4b15      	ldr	r3, [pc, #84]	@ (8004678 <HAL_RCC_OscConfig+0x508>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d108      	bne.n	8004648 <HAL_RCC_OscConfig+0x4d8>
 8004636:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463c:	4a0d      	ldr	r2, [pc, #52]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004646:	e029      	b.n	800469c <HAL_RCC_OscConfig+0x52c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b05      	cmp	r3, #5
 800464e:	d115      	bne.n	800467c <HAL_RCC_OscConfig+0x50c>
 8004650:	4b08      	ldr	r3, [pc, #32]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004656:	4a07      	ldr	r2, [pc, #28]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004658:	f043 0304 	orr.w	r3, r3, #4
 800465c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004660:	4b04      	ldr	r3, [pc, #16]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004666:	4a03      	ldr	r2, [pc, #12]	@ (8004674 <HAL_RCC_OscConfig+0x504>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004670:	e014      	b.n	800469c <HAL_RCC_OscConfig+0x52c>
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	40007000 	.word	0x40007000
 800467c:	4b9c      	ldr	r3, [pc, #624]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004682:	4a9b      	ldr	r2, [pc, #620]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800468c:	4b98      	ldr	r3, [pc, #608]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 800468e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004692:	4a97      	ldr	r2, [pc, #604]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004694:	f023 0304 	bic.w	r3, r3, #4
 8004698:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d016      	beq.n	80046d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a4:	f7fd fc28 	bl	8001ef8 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046aa:	e00a      	b.n	80046c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ac:	f7fd fc24 	bl	8001ef8 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e12a      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c2:	4b8b      	ldr	r3, [pc, #556]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ed      	beq.n	80046ac <HAL_RCC_OscConfig+0x53c>
 80046d0:	e015      	b.n	80046fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d2:	f7fd fc11 	bl	8001ef8 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046d8:	e00a      	b.n	80046f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046da:	f7fd fc0d 	bl	8001ef8 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e113      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046f0:	4b7f      	ldr	r3, [pc, #508]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1ed      	bne.n	80046da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046fe:	7ffb      	ldrb	r3, [r7, #31]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d105      	bne.n	8004710 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004704:	4b7a      	ldr	r3, [pc, #488]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004708:	4a79      	ldr	r2, [pc, #484]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 800470a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800470e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80fe 	beq.w	8004916 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471e:	2b02      	cmp	r3, #2
 8004720:	f040 80d0 	bne.w	80048c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004724:	4b72      	ldr	r3, [pc, #456]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f003 0203 	and.w	r2, r3, #3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	429a      	cmp	r2, r3
 8004736:	d130      	bne.n	800479a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004742:	3b01      	subs	r3, #1
 8004744:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d127      	bne.n	800479a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004754:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d11f      	bne.n	800479a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004764:	2a07      	cmp	r2, #7
 8004766:	bf14      	ite	ne
 8004768:	2201      	movne	r2, #1
 800476a:	2200      	moveq	r2, #0
 800476c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800476e:	4293      	cmp	r3, r2
 8004770:	d113      	bne.n	800479a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	3b01      	subs	r3, #1
 8004780:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d109      	bne.n	800479a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004790:	085b      	lsrs	r3, r3, #1
 8004792:	3b01      	subs	r3, #1
 8004794:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004796:	429a      	cmp	r2, r3
 8004798:	d06e      	beq.n	8004878 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b0c      	cmp	r3, #12
 800479e:	d069      	beq.n	8004874 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047a0:	4b53      	ldr	r3, [pc, #332]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80047ac:	4b50      	ldr	r3, [pc, #320]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0ad      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047bc:	4b4c      	ldr	r3, [pc, #304]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a4b      	ldr	r2, [pc, #300]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80047c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047c8:	f7fd fb96 	bl	8001ef8 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fd fb92 	bl	8001ef8 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e09a      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e2:	4b43      	ldr	r3, [pc, #268]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ee:	4b40      	ldr	r3, [pc, #256]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	4b40      	ldr	r3, [pc, #256]	@ (80048f4 <HAL_RCC_OscConfig+0x784>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80047fe:	3a01      	subs	r2, #1
 8004800:	0112      	lsls	r2, r2, #4
 8004802:	4311      	orrs	r1, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004808:	0212      	lsls	r2, r2, #8
 800480a:	4311      	orrs	r1, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004810:	0852      	lsrs	r2, r2, #1
 8004812:	3a01      	subs	r2, #1
 8004814:	0552      	lsls	r2, r2, #21
 8004816:	4311      	orrs	r1, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800481c:	0852      	lsrs	r2, r2, #1
 800481e:	3a01      	subs	r2, #1
 8004820:	0652      	lsls	r2, r2, #25
 8004822:	4311      	orrs	r1, r2
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004828:	0912      	lsrs	r2, r2, #4
 800482a:	0452      	lsls	r2, r2, #17
 800482c:	430a      	orrs	r2, r1
 800482e:	4930      	ldr	r1, [pc, #192]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004830:	4313      	orrs	r3, r2
 8004832:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004834:	4b2e      	ldr	r3, [pc, #184]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a2d      	ldr	r2, [pc, #180]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 800483a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800483e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004840:	4b2b      	ldr	r3, [pc, #172]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	4a2a      	ldr	r2, [pc, #168]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800484a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800484c:	f7fd fb54 	bl	8001ef8 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004854:	f7fd fb50 	bl	8001ef8 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e058      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004866:	4b22      	ldr	r3, [pc, #136]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004872:	e050      	b.n	8004916 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e04f      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004878:	4b1d      	ldr	r3, [pc, #116]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d148      	bne.n	8004916 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004884:	4b1a      	ldr	r3, [pc, #104]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a19      	ldr	r2, [pc, #100]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 800488a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800488e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004890:	4b17      	ldr	r3, [pc, #92]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4a16      	ldr	r2, [pc, #88]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 8004896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800489a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800489c:	f7fd fb2c 	bl	8001ef8 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fd fb28 	bl	8001ef8 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e030      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048b6:	4b0e      	ldr	r3, [pc, #56]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x734>
 80048c2:	e028      	b.n	8004916 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	d023      	beq.n	8004912 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ca:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a08      	ldr	r2, [pc, #32]	@ (80048f0 <HAL_RCC_OscConfig+0x780>)
 80048d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d6:	f7fd fb0f 	bl	8001ef8 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048dc:	e00c      	b.n	80048f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048de:	f7fd fb0b 	bl	8001ef8 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d905      	bls.n	80048f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e013      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
 80048f0:	40021000 	.word	0x40021000
 80048f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f8:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <HAL_RCC_OscConfig+0x7b0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1ec      	bne.n	80048de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004904:	4b06      	ldr	r3, [pc, #24]	@ (8004920 <HAL_RCC_OscConfig+0x7b0>)
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	4905      	ldr	r1, [pc, #20]	@ (8004920 <HAL_RCC_OscConfig+0x7b0>)
 800490a:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <HAL_RCC_OscConfig+0x7b4>)
 800490c:	4013      	ands	r3, r2
 800490e:	60cb      	str	r3, [r1, #12]
 8004910:	e001      	b.n	8004916 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3720      	adds	r7, #32
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40021000 	.word	0x40021000
 8004924:	feeefffc 	.word	0xfeeefffc

08004928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0e7      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800493c:	4b75      	ldr	r3, [pc, #468]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d910      	bls.n	800496c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b72      	ldr	r3, [pc, #456]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 0207 	bic.w	r2, r3, #7
 8004952:	4970      	ldr	r1, [pc, #448]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b6e      	ldr	r3, [pc, #440]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0cf      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d010      	beq.n	800499a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	4b66      	ldr	r3, [pc, #408]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004984:	429a      	cmp	r2, r3
 8004986:	d908      	bls.n	800499a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004988:	4b63      	ldr	r3, [pc, #396]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4960      	ldr	r1, [pc, #384]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d04c      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d107      	bne.n	80049be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ae:	4b5a      	ldr	r3, [pc, #360]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d121      	bne.n	80049fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e0a6      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049c6:	4b54      	ldr	r3, [pc, #336]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d115      	bne.n	80049fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e09a      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049de:	4b4e      	ldr	r3, [pc, #312]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e08e      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e086      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049fe:	4b46      	ldr	r3, [pc, #280]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f023 0203 	bic.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4943      	ldr	r1, [pc, #268]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a10:	f7fd fa72 	bl	8001ef8 <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a18:	f7fd fa6e 	bl	8001ef8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e06e      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 020c 	and.w	r2, r3, #12
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d1eb      	bne.n	8004a18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d010      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	4b31      	ldr	r3, [pc, #196]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d208      	bcs.n	8004a6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a5c:	4b2e      	ldr	r3, [pc, #184]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	492b      	ldr	r1, [pc, #172]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6e:	4b29      	ldr	r3, [pc, #164]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d210      	bcs.n	8004a9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7c:	4b25      	ldr	r3, [pc, #148]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 0207 	bic.w	r2, r3, #7
 8004a84:	4923      	ldr	r1, [pc, #140]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8c:	4b21      	ldr	r3, [pc, #132]	@ (8004b14 <HAL_RCC_ClockConfig+0x1ec>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e036      	b.n	8004b0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d008      	beq.n	8004abc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	4918      	ldr	r1, [pc, #96]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d009      	beq.n	8004adc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ac8:	4b13      	ldr	r3, [pc, #76]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	4910      	ldr	r1, [pc, #64]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004adc:	f000 f824 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	091b      	lsrs	r3, r3, #4
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	490b      	ldr	r1, [pc, #44]	@ (8004b1c <HAL_RCC_ClockConfig+0x1f4>)
 8004aee:	5ccb      	ldrb	r3, [r1, r3]
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	fa22 f303 	lsr.w	r3, r2, r3
 8004af8:	4a09      	ldr	r2, [pc, #36]	@ (8004b20 <HAL_RCC_ClockConfig+0x1f8>)
 8004afa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004afc:	4b09      	ldr	r3, [pc, #36]	@ (8004b24 <HAL_RCC_ClockConfig+0x1fc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fd f9a9 	bl	8001e58 <HAL_InitTick>
 8004b06:	4603      	mov	r3, r0
 8004b08:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40022000 	.word	0x40022000
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	0800a5f0 	.word	0x0800a5f0
 8004b20:	20000004 	.word	0x20000004
 8004b24:	20000008 	.word	0x20000008

08004b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	@ 0x24
 8004b2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b36:	4b3e      	ldr	r3, [pc, #248]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b40:	4b3b      	ldr	r3, [pc, #236]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x34>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b0c      	cmp	r3, #12
 8004b54:	d121      	bne.n	8004b9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d11e      	bne.n	8004b9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b5c:	4b34      	ldr	r3, [pc, #208]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b68:	4b31      	ldr	r3, [pc, #196]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b6e:	0a1b      	lsrs	r3, r3, #8
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	e005      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b78:	4b2d      	ldr	r3, [pc, #180]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	091b      	lsrs	r3, r3, #4
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b84:	4a2b      	ldr	r2, [pc, #172]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10d      	bne.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b98:	e00a      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d102      	bne.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ba0:	4b25      	ldr	r3, [pc, #148]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	e004      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d101      	bne.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bac:	4b23      	ldr	r3, [pc, #140]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8004bae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	d134      	bne.n	8004c20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0xa6>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b03      	cmp	r3, #3
 8004bca:	d003      	beq.n	8004bd4 <HAL_RCC_GetSysClockFreq+0xac>
 8004bcc:	e005      	b.n	8004bda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bce:	4b1a      	ldr	r3, [pc, #104]	@ (8004c38 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bd0:	617b      	str	r3, [r7, #20]
      break;
 8004bd2:	e005      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bd4:	4b19      	ldr	r3, [pc, #100]	@ (8004c3c <HAL_RCC_GetSysClockFreq+0x114>)
 8004bd6:	617b      	str	r3, [r7, #20]
      break;
 8004bd8:	e002      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	617b      	str	r3, [r7, #20]
      break;
 8004bde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004be0:	4b13      	ldr	r3, [pc, #76]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	3301      	adds	r3, #1
 8004bec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bee:	4b10      	ldr	r3, [pc, #64]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	fb03 f202 	mul.w	r2, r3, r2
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c06:	4b0a      	ldr	r3, [pc, #40]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	0e5b      	lsrs	r3, r3, #25
 8004c0c:	f003 0303 	and.w	r3, r3, #3
 8004c10:	3301      	adds	r3, #1
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c20:	69bb      	ldr	r3, [r7, #24]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3724      	adds	r7, #36	@ 0x24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	0800a600 	.word	0x0800a600
 8004c38:	00f42400 	.word	0x00f42400
 8004c3c:	007a1200 	.word	0x007a1200

08004c40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c58:	f7ff fa26 	bl	80040a8 <HAL_PWREx_GetVoltageRange>
 8004c5c:	6178      	str	r0, [r7, #20]
 8004c5e:	e014      	b.n	8004c8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c60:	4b25      	ldr	r3, [pc, #148]	@ (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c64:	4a24      	ldr	r2, [pc, #144]	@ (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c6c:	4b22      	ldr	r3, [pc, #136]	@ (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c78:	f7ff fa16 	bl	80040a8 <HAL_PWREx_GetVoltageRange>
 8004c7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c82:	4a1d      	ldr	r2, [pc, #116]	@ (8004cf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c88:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c90:	d10b      	bne.n	8004caa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b80      	cmp	r3, #128	@ 0x80
 8004c96:	d919      	bls.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004c9c:	d902      	bls.n	8004ca4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	e013      	b.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	613b      	str	r3, [r7, #16]
 8004ca8:	e010      	b.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b80      	cmp	r3, #128	@ 0x80
 8004cae:	d902      	bls.n	8004cb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	e00a      	b.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b80      	cmp	r3, #128	@ 0x80
 8004cba:	d102      	bne.n	8004cc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	e004      	b.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b70      	cmp	r3, #112	@ 0x70
 8004cc6:	d101      	bne.n	8004ccc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cc8:	2301      	movs	r3, #1
 8004cca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f023 0207 	bic.w	r2, r3, #7
 8004cd4:	4909      	ldr	r1, [pc, #36]	@ (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cdc:	4b07      	ldr	r3, [pc, #28]	@ (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d001      	beq.n	8004cee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e000      	b.n	8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40022000 	.word	0x40022000

08004d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d08:	2300      	movs	r3, #0
 8004d0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d041      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d20:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d24:	d02a      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d26:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d2a:	d824      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d2c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d30:	d008      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d36:	d81e      	bhi.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d40:	d010      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d42:	e018      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d44:	4b86      	ldr	r3, [pc, #536]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	4a85      	ldr	r2, [pc, #532]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d50:	e015      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	3304      	adds	r3, #4
 8004d56:	2100      	movs	r1, #0
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fabb 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d62:	e00c      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3320      	adds	r3, #32
 8004d68:	2100      	movs	r1, #0
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fba6 	bl	80054bc <RCCEx_PLLSAI2_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d74:	e003      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	74fb      	strb	r3, [r7, #19]
      break;
 8004d7a:	e000      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d7e:	7cfb      	ldrb	r3, [r7, #19]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d84:	4b76      	ldr	r3, [pc, #472]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d92:	4973      	ldr	r1, [pc, #460]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d9a:	e001      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d9c:	7cfb      	ldrb	r3, [r7, #19]
 8004d9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d041      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004db0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004db4:	d02a      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004db6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004dba:	d824      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dc0:	d008      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004dc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dc6:	d81e      	bhi.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004dcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dd0:	d010      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dd2:	e018      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dd4:	4b62      	ldr	r3, [pc, #392]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a61      	ldr	r2, [pc, #388]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dde:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004de0:	e015      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3304      	adds	r3, #4
 8004de6:	2100      	movs	r1, #0
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fa73 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 8004dee:	4603      	mov	r3, r0
 8004df0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004df2:	e00c      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3320      	adds	r3, #32
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fb5e 	bl	80054bc <RCCEx_PLLSAI2_Config>
 8004e00:	4603      	mov	r3, r0
 8004e02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e04:	e003      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	74fb      	strb	r3, [r7, #19]
      break;
 8004e0a:	e000      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e0e:	7cfb      	ldrb	r3, [r7, #19]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10b      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e14:	4b52      	ldr	r3, [pc, #328]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e22:	494f      	ldr	r1, [pc, #316]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e2a:	e001      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e2c:	7cfb      	ldrb	r3, [r7, #19]
 8004e2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 80a0 	beq.w	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e42:	4b47      	ldr	r3, [pc, #284]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e52:	2300      	movs	r3, #0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00d      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e58:	4b41      	ldr	r3, [pc, #260]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5c:	4a40      	ldr	r2, [pc, #256]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e64:	4b3e      	ldr	r3, [pc, #248]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e70:	2301      	movs	r3, #1
 8004e72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e74:	4b3b      	ldr	r3, [pc, #236]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a3a      	ldr	r2, [pc, #232]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e80:	f7fd f83a 	bl	8001ef8 <HAL_GetTick>
 8004e84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e86:	e009      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e88:	f7fd f836 	bl	8001ef8 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d902      	bls.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	74fb      	strb	r3, [r7, #19]
        break;
 8004e9a:	e005      	b.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e9c:	4b31      	ldr	r3, [pc, #196]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0ef      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d15c      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eae:	4b2c      	ldr	r3, [pc, #176]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01f      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d019      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ecc:	4b24      	ldr	r3, [pc, #144]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ed6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ed8:	4b21      	ldr	r3, [pc, #132]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ede:	4a20      	ldr	r2, [pc, #128]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eee:	4a1c      	ldr	r2, [pc, #112]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ef8:	4a19      	ldr	r2, [pc, #100]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d016      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0a:	f7fc fff5 	bl	8001ef8 <HAL_GetTick>
 8004f0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f10:	e00b      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f12:	f7fc fff1 	bl	8001ef8 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d902      	bls.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	74fb      	strb	r3, [r7, #19]
            break;
 8004f28:	e006      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ec      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f38:	7cfb      	ldrb	r3, [r7, #19]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10c      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f3e:	4b08      	ldr	r3, [pc, #32]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f4e:	4904      	ldr	r1, [pc, #16]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f56:	e009      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f58:	7cfb      	ldrb	r3, [r7, #19]
 8004f5a:	74bb      	strb	r3, [r7, #18]
 8004f5c:	e006      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f5e:	bf00      	nop
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	7cfb      	ldrb	r3, [r7, #19]
 8004f6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f6c:	7c7b      	ldrb	r3, [r7, #17]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d105      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f72:	4b9e      	ldr	r3, [pc, #632]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f76:	4a9d      	ldr	r2, [pc, #628]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f8a:	4b98      	ldr	r3, [pc, #608]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f90:	f023 0203 	bic.w	r2, r3, #3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	4994      	ldr	r1, [pc, #592]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fac:	4b8f      	ldr	r3, [pc, #572]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb2:	f023 020c 	bic.w	r2, r3, #12
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fba:	498c      	ldr	r1, [pc, #560]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fce:	4b87      	ldr	r3, [pc, #540]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fdc:	4983      	ldr	r1, [pc, #524]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffe:	497b      	ldr	r1, [pc, #492]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0310 	and.w	r3, r3, #16
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005012:	4b76      	ldr	r3, [pc, #472]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005018:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005020:	4972      	ldr	r1, [pc, #456]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0320 	and.w	r3, r3, #32
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005034:	4b6d      	ldr	r3, [pc, #436]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005042:	496a      	ldr	r1, [pc, #424]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005056:	4b65      	ldr	r3, [pc, #404]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005064:	4961      	ldr	r1, [pc, #388]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005078:	4b5c      	ldr	r3, [pc, #368]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005086:	4959      	ldr	r1, [pc, #356]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800509a:	4b54      	ldr	r3, [pc, #336]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050a8:	4950      	ldr	r1, [pc, #320]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050bc:	4b4b      	ldr	r3, [pc, #300]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ca:	4948      	ldr	r1, [pc, #288]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050de:	4b43      	ldr	r3, [pc, #268]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ec:	493f      	ldr	r1, [pc, #252]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d028      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005100:	4b3a      	ldr	r3, [pc, #232]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005106:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800510e:	4937      	ldr	r1, [pc, #220]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800511a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800511e:	d106      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005120:	4b32      	ldr	r3, [pc, #200]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4a31      	ldr	r2, [pc, #196]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800512a:	60d3      	str	r3, [r2, #12]
 800512c:	e011      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005132:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005136:	d10c      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	2101      	movs	r1, #1
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f8c8 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005148:	7cfb      	ldrb	r3, [r7, #19]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800514e:	7cfb      	ldrb	r3, [r7, #19]
 8005150:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d028      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800515e:	4b23      	ldr	r3, [pc, #140]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005164:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800516c:	491f      	ldr	r1, [pc, #124]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005178:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800517c:	d106      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800517e:	4b1b      	ldr	r3, [pc, #108]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	4a1a      	ldr	r2, [pc, #104]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005184:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005188:	60d3      	str	r3, [r2, #12]
 800518a:	e011      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005190:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005194:	d10c      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3304      	adds	r3, #4
 800519a:	2101      	movs	r1, #1
 800519c:	4618      	mov	r0, r3
 800519e:	f000 f899 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d02b      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051bc:	4b0b      	ldr	r3, [pc, #44]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ca:	4908      	ldr	r1, [pc, #32]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051da:	d109      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051dc:	4b03      	ldr	r3, [pc, #12]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	4a02      	ldr	r2, [pc, #8]	@ (80051ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051e6:	60d3      	str	r3, [r2, #12]
 80051e8:	e014      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80051ea:	bf00      	nop
 80051ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051f8:	d10c      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3304      	adds	r3, #4
 80051fe:	2101      	movs	r1, #1
 8005200:	4618      	mov	r0, r3
 8005202:	f000 f867 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 8005206:	4603      	mov	r3, r0
 8005208:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800520a:	7cfb      	ldrb	r3, [r7, #19]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005210:	7cfb      	ldrb	r3, [r7, #19]
 8005212:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d02f      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005220:	4b2b      	ldr	r3, [pc, #172]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005226:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800522e:	4928      	ldr	r1, [pc, #160]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800523a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800523e:	d10d      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3304      	adds	r3, #4
 8005244:	2102      	movs	r1, #2
 8005246:	4618      	mov	r0, r3
 8005248:	f000 f844 	bl	80052d4 <RCCEx_PLLSAI1_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005250:	7cfb      	ldrb	r3, [r7, #19]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d014      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005256:	7cfb      	ldrb	r3, [r7, #19]
 8005258:	74bb      	strb	r3, [r7, #18]
 800525a:	e011      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005264:	d10c      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3320      	adds	r3, #32
 800526a:	2102      	movs	r1, #2
 800526c:	4618      	mov	r0, r3
 800526e:	f000 f925 	bl	80054bc <RCCEx_PLLSAI2_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005276:	7cfb      	ldrb	r3, [r7, #19]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800527c:	7cfb      	ldrb	r3, [r7, #19]
 800527e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800528c:	4b10      	ldr	r3, [pc, #64]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005292:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800529a:	490d      	ldr	r1, [pc, #52]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800529c:	4313      	orrs	r3, r2
 800529e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052ae:	4b08      	ldr	r3, [pc, #32]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052be:	4904      	ldr	r1, [pc, #16]	@ (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40021000 	.word	0x40021000

080052d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052e2:	4b75      	ldr	r3, [pc, #468]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052ee:	4b72      	ldr	r3, [pc, #456]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0203 	and.w	r2, r3, #3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d10d      	bne.n	800531a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
       ||
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005306:	4b6c      	ldr	r3, [pc, #432]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	091b      	lsrs	r3, r3, #4
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
       ||
 8005316:	429a      	cmp	r2, r3
 8005318:	d047      	beq.n	80053aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	73fb      	strb	r3, [r7, #15]
 800531e:	e044      	b.n	80053aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d018      	beq.n	800535a <RCCEx_PLLSAI1_Config+0x86>
 8005328:	2b03      	cmp	r3, #3
 800532a:	d825      	bhi.n	8005378 <RCCEx_PLLSAI1_Config+0xa4>
 800532c:	2b01      	cmp	r3, #1
 800532e:	d002      	beq.n	8005336 <RCCEx_PLLSAI1_Config+0x62>
 8005330:	2b02      	cmp	r3, #2
 8005332:	d009      	beq.n	8005348 <RCCEx_PLLSAI1_Config+0x74>
 8005334:	e020      	b.n	8005378 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005336:	4b60      	ldr	r3, [pc, #384]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d11d      	bne.n	800537e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005346:	e01a      	b.n	800537e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005348:	4b5b      	ldr	r3, [pc, #364]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005350:	2b00      	cmp	r3, #0
 8005352:	d116      	bne.n	8005382 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005358:	e013      	b.n	8005382 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800535a:	4b57      	ldr	r3, [pc, #348]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10f      	bne.n	8005386 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005366:	4b54      	ldr	r3, [pc, #336]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d109      	bne.n	8005386 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005376:	e006      	b.n	8005386 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
      break;
 800537c:	e004      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800537e:	bf00      	nop
 8005380:	e002      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005382:	bf00      	nop
 8005384:	e000      	b.n	8005388 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005386:	bf00      	nop
    }

    if(status == HAL_OK)
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10d      	bne.n	80053aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800538e:	4b4a      	ldr	r3, [pc, #296]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6819      	ldr	r1, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	3b01      	subs	r3, #1
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	430b      	orrs	r3, r1
 80053a4:	4944      	ldr	r1, [pc, #272]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d17d      	bne.n	80054ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053b0:	4b41      	ldr	r3, [pc, #260]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a40      	ldr	r2, [pc, #256]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053bc:	f7fc fd9c 	bl	8001ef8 <HAL_GetTick>
 80053c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053c2:	e009      	b.n	80053d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053c4:	f7fc fd98 	bl	8001ef8 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d902      	bls.n	80053d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	73fb      	strb	r3, [r7, #15]
        break;
 80053d6:	e005      	b.n	80053e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053d8:	4b37      	ldr	r3, [pc, #220]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d1ef      	bne.n	80053c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053e4:	7bfb      	ldrb	r3, [r7, #15]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d160      	bne.n	80054ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d111      	bne.n	8005414 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053f0:	4b31      	ldr	r3, [pc, #196]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80053f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6892      	ldr	r2, [r2, #8]
 8005400:	0211      	lsls	r1, r2, #8
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68d2      	ldr	r2, [r2, #12]
 8005406:	0912      	lsrs	r2, r2, #4
 8005408:	0452      	lsls	r2, r2, #17
 800540a:	430a      	orrs	r2, r1
 800540c:	492a      	ldr	r1, [pc, #168]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	610b      	str	r3, [r1, #16]
 8005412:	e027      	b.n	8005464 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d112      	bne.n	8005440 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800541a:	4b27      	ldr	r3, [pc, #156]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005422:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6892      	ldr	r2, [r2, #8]
 800542a:	0211      	lsls	r1, r2, #8
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6912      	ldr	r2, [r2, #16]
 8005430:	0852      	lsrs	r2, r2, #1
 8005432:	3a01      	subs	r2, #1
 8005434:	0552      	lsls	r2, r2, #21
 8005436:	430a      	orrs	r2, r1
 8005438:	491f      	ldr	r1, [pc, #124]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800543a:	4313      	orrs	r3, r2
 800543c:	610b      	str	r3, [r1, #16]
 800543e:	e011      	b.n	8005464 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005440:	4b1d      	ldr	r3, [pc, #116]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005448:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6892      	ldr	r2, [r2, #8]
 8005450:	0211      	lsls	r1, r2, #8
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6952      	ldr	r2, [r2, #20]
 8005456:	0852      	lsrs	r2, r2, #1
 8005458:	3a01      	subs	r2, #1
 800545a:	0652      	lsls	r2, r2, #25
 800545c:	430a      	orrs	r2, r1
 800545e:	4916      	ldr	r1, [pc, #88]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005460:	4313      	orrs	r3, r2
 8005462:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005464:	4b14      	ldr	r3, [pc, #80]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a13      	ldr	r2, [pc, #76]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800546a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800546e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005470:	f7fc fd42 	bl	8001ef8 <HAL_GetTick>
 8005474:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005476:	e009      	b.n	800548c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005478:	f7fc fd3e 	bl	8001ef8 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d902      	bls.n	800548c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	73fb      	strb	r3, [r7, #15]
          break;
 800548a:	e005      	b.n	8005498 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800548c:	4b0a      	ldr	r3, [pc, #40]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ef      	beq.n	8005478 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d106      	bne.n	80054ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800549e:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	4904      	ldr	r1, [pc, #16]	@ (80054b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000

080054bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d018      	beq.n	8005508 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054d6:	4b67      	ldr	r3, [pc, #412]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0203 	and.w	r2, r3, #3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d10d      	bne.n	8005502 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
       ||
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054ee:	4b61      	ldr	r3, [pc, #388]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	091b      	lsrs	r3, r3, #4
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	1c5a      	adds	r2, r3, #1
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
       ||
 80054fe:	429a      	cmp	r2, r3
 8005500:	d047      	beq.n	8005592 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
 8005506:	e044      	b.n	8005592 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b03      	cmp	r3, #3
 800550e:	d018      	beq.n	8005542 <RCCEx_PLLSAI2_Config+0x86>
 8005510:	2b03      	cmp	r3, #3
 8005512:	d825      	bhi.n	8005560 <RCCEx_PLLSAI2_Config+0xa4>
 8005514:	2b01      	cmp	r3, #1
 8005516:	d002      	beq.n	800551e <RCCEx_PLLSAI2_Config+0x62>
 8005518:	2b02      	cmp	r3, #2
 800551a:	d009      	beq.n	8005530 <RCCEx_PLLSAI2_Config+0x74>
 800551c:	e020      	b.n	8005560 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800551e:	4b55      	ldr	r3, [pc, #340]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d11d      	bne.n	8005566 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800552e:	e01a      	b.n	8005566 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005530:	4b50      	ldr	r3, [pc, #320]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005538:	2b00      	cmp	r3, #0
 800553a:	d116      	bne.n	800556a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005540:	e013      	b.n	800556a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005542:	4b4c      	ldr	r3, [pc, #304]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10f      	bne.n	800556e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800554e:	4b49      	ldr	r3, [pc, #292]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d109      	bne.n	800556e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800555e:	e006      	b.n	800556e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
      break;
 8005564:	e004      	b.n	8005570 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005566:	bf00      	nop
 8005568:	e002      	b.n	8005570 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800556a:	bf00      	nop
 800556c:	e000      	b.n	8005570 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800556e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005570:	7bfb      	ldrb	r3, [r7, #15]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10d      	bne.n	8005592 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005576:	4b3f      	ldr	r3, [pc, #252]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6819      	ldr	r1, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	3b01      	subs	r3, #1
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	430b      	orrs	r3, r1
 800558c:	4939      	ldr	r1, [pc, #228]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 800558e:	4313      	orrs	r3, r2
 8005590:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d167      	bne.n	8005668 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005598:	4b36      	ldr	r3, [pc, #216]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a35      	ldr	r2, [pc, #212]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 800559e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a4:	f7fc fca8 	bl	8001ef8 <HAL_GetTick>
 80055a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055aa:	e009      	b.n	80055c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055ac:	f7fc fca4 	bl	8001ef8 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d902      	bls.n	80055c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	73fb      	strb	r3, [r7, #15]
        break;
 80055be:	e005      	b.n	80055cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055c0:	4b2c      	ldr	r3, [pc, #176]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1ef      	bne.n	80055ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d14a      	bne.n	8005668 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d111      	bne.n	80055fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055d8:	4b26      	ldr	r3, [pc, #152]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80055e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6892      	ldr	r2, [r2, #8]
 80055e8:	0211      	lsls	r1, r2, #8
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	68d2      	ldr	r2, [r2, #12]
 80055ee:	0912      	lsrs	r2, r2, #4
 80055f0:	0452      	lsls	r2, r2, #17
 80055f2:	430a      	orrs	r2, r1
 80055f4:	491f      	ldr	r1, [pc, #124]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	614b      	str	r3, [r1, #20]
 80055fa:	e011      	b.n	8005620 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005604:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6892      	ldr	r2, [r2, #8]
 800560c:	0211      	lsls	r1, r2, #8
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6912      	ldr	r2, [r2, #16]
 8005612:	0852      	lsrs	r2, r2, #1
 8005614:	3a01      	subs	r2, #1
 8005616:	0652      	lsls	r2, r2, #25
 8005618:	430a      	orrs	r2, r1
 800561a:	4916      	ldr	r1, [pc, #88]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 800561c:	4313      	orrs	r3, r2
 800561e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005620:	4b14      	ldr	r3, [pc, #80]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a13      	ldr	r2, [pc, #76]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800562a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562c:	f7fc fc64 	bl	8001ef8 <HAL_GetTick>
 8005630:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005632:	e009      	b.n	8005648 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005634:	f7fc fc60 	bl	8001ef8 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d902      	bls.n	8005648 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	73fb      	strb	r3, [r7, #15]
          break;
 8005646:	e005      	b.n	8005654 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005648:	4b0a      	ldr	r3, [pc, #40]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0ef      	beq.n	8005634 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800565a:	4b06      	ldr	r3, [pc, #24]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 800565c:	695a      	ldr	r2, [r3, #20]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	4904      	ldr	r1, [pc, #16]	@ (8005674 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005664:	4313      	orrs	r3, r2
 8005666:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005668:	7bfb      	ldrb	r3, [r7, #15]
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40021000 	.word	0x40021000

08005678 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e049      	b.n	800571e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fc f9ca 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4619      	mov	r1, r3
 80056b6:	4610      	mov	r0, r2
 80056b8:	f000 fd1c 	bl	80060f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
	...

08005728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b01      	cmp	r3, #1
 800573a:	d001      	beq.n	8005740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e04f      	b.n	80057e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0201 	orr.w	r2, r2, #1
 8005756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a23      	ldr	r2, [pc, #140]	@ (80057ec <HAL_TIM_Base_Start_IT+0xc4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d01d      	beq.n	800579e <HAL_TIM_Base_Start_IT+0x76>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800576a:	d018      	beq.n	800579e <HAL_TIM_Base_Start_IT+0x76>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1f      	ldr	r2, [pc, #124]	@ (80057f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <HAL_TIM_Base_Start_IT+0x76>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1e      	ldr	r2, [pc, #120]	@ (80057f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00e      	beq.n	800579e <HAL_TIM_Base_Start_IT+0x76>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1c      	ldr	r2, [pc, #112]	@ (80057f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d009      	beq.n	800579e <HAL_TIM_Base_Start_IT+0x76>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1b      	ldr	r2, [pc, #108]	@ (80057fc <HAL_TIM_Base_Start_IT+0xd4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d004      	beq.n	800579e <HAL_TIM_Base_Start_IT+0x76>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a19      	ldr	r2, [pc, #100]	@ (8005800 <HAL_TIM_Base_Start_IT+0xd8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d115      	bne.n	80057ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	4b17      	ldr	r3, [pc, #92]	@ (8005804 <HAL_TIM_Base_Start_IT+0xdc>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b06      	cmp	r3, #6
 80057ae:	d015      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0xb4>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b6:	d011      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0201 	orr.w	r2, r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c8:	e008      	b.n	80057dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 0201 	orr.w	r2, r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	e000      	b.n	80057de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	40012c00 	.word	0x40012c00
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800
 80057f8:	40000c00 	.word	0x40000c00
 80057fc:	40013400 	.word	0x40013400
 8005800:	40014000 	.word	0x40014000
 8005804:	00010007 	.word	0x00010007

08005808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e049      	b.n	80058ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f841 	bl	80058b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3304      	adds	r3, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f000 fc54 	bl	80060f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d109      	bne.n	80058f0 <HAL_TIM_PWM_Start+0x24>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	bf14      	ite	ne
 80058e8:	2301      	movne	r3, #1
 80058ea:	2300      	moveq	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	e03c      	b.n	800596a <HAL_TIM_PWM_Start+0x9e>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b04      	cmp	r3, #4
 80058f4:	d109      	bne.n	800590a <HAL_TIM_PWM_Start+0x3e>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b01      	cmp	r3, #1
 8005900:	bf14      	ite	ne
 8005902:	2301      	movne	r3, #1
 8005904:	2300      	moveq	r3, #0
 8005906:	b2db      	uxtb	r3, r3
 8005908:	e02f      	b.n	800596a <HAL_TIM_PWM_Start+0x9e>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d109      	bne.n	8005924 <HAL_TIM_PWM_Start+0x58>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b01      	cmp	r3, #1
 800591a:	bf14      	ite	ne
 800591c:	2301      	movne	r3, #1
 800591e:	2300      	moveq	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	e022      	b.n	800596a <HAL_TIM_PWM_Start+0x9e>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b0c      	cmp	r3, #12
 8005928:	d109      	bne.n	800593e <HAL_TIM_PWM_Start+0x72>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b01      	cmp	r3, #1
 8005934:	bf14      	ite	ne
 8005936:	2301      	movne	r3, #1
 8005938:	2300      	moveq	r3, #0
 800593a:	b2db      	uxtb	r3, r3
 800593c:	e015      	b.n	800596a <HAL_TIM_PWM_Start+0x9e>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b10      	cmp	r3, #16
 8005942:	d109      	bne.n	8005958 <HAL_TIM_PWM_Start+0x8c>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b01      	cmp	r3, #1
 800594e:	bf14      	ite	ne
 8005950:	2301      	movne	r3, #1
 8005952:	2300      	moveq	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	e008      	b.n	800596a <HAL_TIM_PWM_Start+0x9e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b01      	cmp	r3, #1
 8005962:	bf14      	ite	ne
 8005964:	2301      	movne	r3, #1
 8005966:	2300      	moveq	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e09c      	b.n	8005aac <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d104      	bne.n	8005982 <HAL_TIM_PWM_Start+0xb6>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005980:	e023      	b.n	80059ca <HAL_TIM_PWM_Start+0xfe>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b04      	cmp	r3, #4
 8005986:	d104      	bne.n	8005992 <HAL_TIM_PWM_Start+0xc6>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005990:	e01b      	b.n	80059ca <HAL_TIM_PWM_Start+0xfe>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b08      	cmp	r3, #8
 8005996:	d104      	bne.n	80059a2 <HAL_TIM_PWM_Start+0xd6>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059a0:	e013      	b.n	80059ca <HAL_TIM_PWM_Start+0xfe>
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b0c      	cmp	r3, #12
 80059a6:	d104      	bne.n	80059b2 <HAL_TIM_PWM_Start+0xe6>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059b0:	e00b      	b.n	80059ca <HAL_TIM_PWM_Start+0xfe>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b10      	cmp	r3, #16
 80059b6:	d104      	bne.n	80059c2 <HAL_TIM_PWM_Start+0xf6>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2202      	movs	r2, #2
 80059bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059c0:	e003      	b.n	80059ca <HAL_TIM_PWM_Start+0xfe>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2202      	movs	r2, #2
 80059c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2201      	movs	r2, #1
 80059d0:	6839      	ldr	r1, [r7, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 ffa4 	bl	8006920 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a35      	ldr	r2, [pc, #212]	@ (8005ab4 <HAL_TIM_PWM_Start+0x1e8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x13e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a34      	ldr	r2, [pc, #208]	@ (8005ab8 <HAL_TIM_PWM_Start+0x1ec>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00e      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x13e>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a32      	ldr	r2, [pc, #200]	@ (8005abc <HAL_TIM_PWM_Start+0x1f0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x13e>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a31      	ldr	r2, [pc, #196]	@ (8005ac0 <HAL_TIM_PWM_Start+0x1f4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_TIM_PWM_Start+0x13e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a2f      	ldr	r2, [pc, #188]	@ (8005ac4 <HAL_TIM_PWM_Start+0x1f8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d101      	bne.n	8005a0e <HAL_TIM_PWM_Start+0x142>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <HAL_TIM_PWM_Start+0x144>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d007      	beq.n	8005a24 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a22:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a22      	ldr	r2, [pc, #136]	@ (8005ab4 <HAL_TIM_PWM_Start+0x1e8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d01d      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x19e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a36:	d018      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x19e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a22      	ldr	r2, [pc, #136]	@ (8005ac8 <HAL_TIM_PWM_Start+0x1fc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d013      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x19e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a21      	ldr	r2, [pc, #132]	@ (8005acc <HAL_TIM_PWM_Start+0x200>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d00e      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x19e>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad0 <HAL_TIM_PWM_Start+0x204>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d009      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x19e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a17      	ldr	r2, [pc, #92]	@ (8005ab8 <HAL_TIM_PWM_Start+0x1ec>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d004      	beq.n	8005a6a <HAL_TIM_PWM_Start+0x19e>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a15      	ldr	r2, [pc, #84]	@ (8005abc <HAL_TIM_PWM_Start+0x1f0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d115      	bne.n	8005a96 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	4b18      	ldr	r3, [pc, #96]	@ (8005ad4 <HAL_TIM_PWM_Start+0x208>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b06      	cmp	r3, #6
 8005a7a:	d015      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0x1dc>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a82:	d011      	beq.n	8005aa8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a94:	e008      	b.n	8005aa8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0201 	orr.w	r2, r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	e000      	b.n	8005aaa <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40012c00 	.word	0x40012c00
 8005ab8:	40013400 	.word	0x40013400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40014400 	.word	0x40014400
 8005ac4:	40014800 	.word	0x40014800
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	00010007 	.word	0x00010007

08005ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d020      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f003 0302 	and.w	r3, r3, #2
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01b      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f06f 0202 	mvn.w	r2, #2
 8005b0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fac7 	bl	80060b6 <HAL_TIM_IC_CaptureCallback>
 8005b28:	e005      	b.n	8005b36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 fab9 	bl	80060a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 faca 	bl	80060ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d020      	beq.n	8005b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01b      	beq.n	8005b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0204 	mvn.w	r2, #4
 8005b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 faa1 	bl	80060b6 <HAL_TIM_IC_CaptureCallback>
 8005b74:	e005      	b.n	8005b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fa93 	bl	80060a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 faa4 	bl	80060ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d020      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01b      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0208 	mvn.w	r2, #8
 8005ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa7b 	bl	80060b6 <HAL_TIM_IC_CaptureCallback>
 8005bc0:	e005      	b.n	8005bce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa6d 	bl	80060a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fa7e 	bl	80060ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d020      	beq.n	8005c20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d01b      	beq.n	8005c20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0210 	mvn.w	r2, #16
 8005bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2208      	movs	r2, #8
 8005bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d003      	beq.n	8005c0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fa55 	bl	80060b6 <HAL_TIM_IC_CaptureCallback>
 8005c0c:	e005      	b.n	8005c1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fa47 	bl	80060a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fa58 	bl	80060ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00c      	beq.n	8005c44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 0301 	and.w	r3, r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d007      	beq.n	8005c44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f06f 0201 	mvn.w	r2, #1
 8005c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fb f968 	bl	8000f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d104      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00c      	beq.n	8005c72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d007      	beq.n	8005c72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 f847 	bl	8006d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00c      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d007      	beq.n	8005c96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f001 f83f 	bl	8006d14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00c      	beq.n	8005cba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 fa12 	bl	80060de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00c      	beq.n	8005cde <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d007      	beq.n	8005cde <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f06f 0220 	mvn.w	r2, #32
 8005cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 f807 	bl	8006cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cde:	bf00      	nop
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e0ff      	b.n	8005f06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b14      	cmp	r3, #20
 8005d12:	f200 80f0 	bhi.w	8005ef6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d16:	a201      	add	r2, pc, #4	@ (adr r2, 8005d1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1c:	08005d71 	.word	0x08005d71
 8005d20:	08005ef7 	.word	0x08005ef7
 8005d24:	08005ef7 	.word	0x08005ef7
 8005d28:	08005ef7 	.word	0x08005ef7
 8005d2c:	08005db1 	.word	0x08005db1
 8005d30:	08005ef7 	.word	0x08005ef7
 8005d34:	08005ef7 	.word	0x08005ef7
 8005d38:	08005ef7 	.word	0x08005ef7
 8005d3c:	08005df3 	.word	0x08005df3
 8005d40:	08005ef7 	.word	0x08005ef7
 8005d44:	08005ef7 	.word	0x08005ef7
 8005d48:	08005ef7 	.word	0x08005ef7
 8005d4c:	08005e33 	.word	0x08005e33
 8005d50:	08005ef7 	.word	0x08005ef7
 8005d54:	08005ef7 	.word	0x08005ef7
 8005d58:	08005ef7 	.word	0x08005ef7
 8005d5c:	08005e75 	.word	0x08005e75
 8005d60:	08005ef7 	.word	0x08005ef7
 8005d64:	08005ef7 	.word	0x08005ef7
 8005d68:	08005ef7 	.word	0x08005ef7
 8005d6c:	08005eb5 	.word	0x08005eb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fa62 	bl	8006240 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0208 	orr.w	r2, r2, #8
 8005d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	699a      	ldr	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0204 	bic.w	r2, r2, #4
 8005d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6999      	ldr	r1, [r3, #24]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	619a      	str	r2, [r3, #24]
      break;
 8005dae:	e0a5      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fad2 	bl	8006360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6999      	ldr	r1, [r3, #24]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	021a      	lsls	r2, r3, #8
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	619a      	str	r2, [r3, #24]
      break;
 8005df0:	e084      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 fb3b 	bl	8006474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0208 	orr.w	r2, r2, #8
 8005e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0204 	bic.w	r2, r2, #4
 8005e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69d9      	ldr	r1, [r3, #28]
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	691a      	ldr	r2, [r3, #16]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	61da      	str	r2, [r3, #28]
      break;
 8005e30:	e064      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f000 fba3 	bl	8006584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69da      	ldr	r2, [r3, #28]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	69d9      	ldr	r1, [r3, #28]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	021a      	lsls	r2, r3, #8
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	61da      	str	r2, [r3, #28]
      break;
 8005e72:	e043      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fbec 	bl	8006658 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0208 	orr.w	r2, r2, #8
 8005e8e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0204 	bic.w	r2, r2, #4
 8005e9e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005eb2:	e023      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fc30 	bl	8006720 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ece:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ede:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	021a      	lsls	r2, r3, #8
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ef4:	e002      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8005efa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop

08005f10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_TIM_ConfigClockSource+0x1c>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e0b6      	b.n	800609a <HAL_TIM_ConfigClockSource+0x18a>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f4a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f68:	d03e      	beq.n	8005fe8 <HAL_TIM_ConfigClockSource+0xd8>
 8005f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f6e:	f200 8087 	bhi.w	8006080 <HAL_TIM_ConfigClockSource+0x170>
 8005f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f76:	f000 8086 	beq.w	8006086 <HAL_TIM_ConfigClockSource+0x176>
 8005f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f7e:	d87f      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x170>
 8005f80:	2b70      	cmp	r3, #112	@ 0x70
 8005f82:	d01a      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0xaa>
 8005f84:	2b70      	cmp	r3, #112	@ 0x70
 8005f86:	d87b      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x170>
 8005f88:	2b60      	cmp	r3, #96	@ 0x60
 8005f8a:	d050      	beq.n	800602e <HAL_TIM_ConfigClockSource+0x11e>
 8005f8c:	2b60      	cmp	r3, #96	@ 0x60
 8005f8e:	d877      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x170>
 8005f90:	2b50      	cmp	r3, #80	@ 0x50
 8005f92:	d03c      	beq.n	800600e <HAL_TIM_ConfigClockSource+0xfe>
 8005f94:	2b50      	cmp	r3, #80	@ 0x50
 8005f96:	d873      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x170>
 8005f98:	2b40      	cmp	r3, #64	@ 0x40
 8005f9a:	d058      	beq.n	800604e <HAL_TIM_ConfigClockSource+0x13e>
 8005f9c:	2b40      	cmp	r3, #64	@ 0x40
 8005f9e:	d86f      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x170>
 8005fa0:	2b30      	cmp	r3, #48	@ 0x30
 8005fa2:	d064      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x15e>
 8005fa4:	2b30      	cmp	r3, #48	@ 0x30
 8005fa6:	d86b      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x170>
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d060      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x15e>
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d867      	bhi.n	8006080 <HAL_TIM_ConfigClockSource+0x170>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d05c      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x15e>
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d05a      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x15e>
 8005fb8:	e062      	b.n	8006080 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fca:	f000 fc89 	bl	80068e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	609a      	str	r2, [r3, #8]
      break;
 8005fe6:	e04f      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ff8:	f000 fc72 	bl	80068e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689a      	ldr	r2, [r3, #8]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800600a:	609a      	str	r2, [r3, #8]
      break;
 800600c:	e03c      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800601a:	461a      	mov	r2, r3
 800601c:	f000 fbe6 	bl	80067ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2150      	movs	r1, #80	@ 0x50
 8006026:	4618      	mov	r0, r3
 8006028:	f000 fc3f 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 800602c:	e02c      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800603a:	461a      	mov	r2, r3
 800603c:	f000 fc05 	bl	800684a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2160      	movs	r1, #96	@ 0x60
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fc2f 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 800604c:	e01c      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800605a:	461a      	mov	r2, r3
 800605c:	f000 fbc6 	bl	80067ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2140      	movs	r1, #64	@ 0x40
 8006066:	4618      	mov	r0, r3
 8006068:	f000 fc1f 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 800606c:	e00c      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f000 fc16 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 800607e:	e003      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	73fb      	strb	r3, [r7, #15]
      break;
 8006084:	e000      	b.n	8006088 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006086:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006098:	7bfb      	ldrb	r3, [r7, #15]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060d2:	bf00      	nop
 80060d4:	370c      	adds	r7, #12
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr

080060de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060de:	b480      	push	{r7}
 80060e0:	b083      	sub	sp, #12
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060e6:	bf00      	nop
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a46      	ldr	r2, [pc, #280]	@ (8006220 <TIM_Base_SetConfig+0x12c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <TIM_Base_SetConfig+0x40>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006112:	d00f      	beq.n	8006134 <TIM_Base_SetConfig+0x40>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a43      	ldr	r2, [pc, #268]	@ (8006224 <TIM_Base_SetConfig+0x130>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00b      	beq.n	8006134 <TIM_Base_SetConfig+0x40>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a42      	ldr	r2, [pc, #264]	@ (8006228 <TIM_Base_SetConfig+0x134>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d007      	beq.n	8006134 <TIM_Base_SetConfig+0x40>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a41      	ldr	r2, [pc, #260]	@ (800622c <TIM_Base_SetConfig+0x138>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d003      	beq.n	8006134 <TIM_Base_SetConfig+0x40>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a40      	ldr	r2, [pc, #256]	@ (8006230 <TIM_Base_SetConfig+0x13c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d108      	bne.n	8006146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800613a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a35      	ldr	r2, [pc, #212]	@ (8006220 <TIM_Base_SetConfig+0x12c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d01f      	beq.n	800618e <TIM_Base_SetConfig+0x9a>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006154:	d01b      	beq.n	800618e <TIM_Base_SetConfig+0x9a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a32      	ldr	r2, [pc, #200]	@ (8006224 <TIM_Base_SetConfig+0x130>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d017      	beq.n	800618e <TIM_Base_SetConfig+0x9a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a31      	ldr	r2, [pc, #196]	@ (8006228 <TIM_Base_SetConfig+0x134>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d013      	beq.n	800618e <TIM_Base_SetConfig+0x9a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a30      	ldr	r2, [pc, #192]	@ (800622c <TIM_Base_SetConfig+0x138>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00f      	beq.n	800618e <TIM_Base_SetConfig+0x9a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a2f      	ldr	r2, [pc, #188]	@ (8006230 <TIM_Base_SetConfig+0x13c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00b      	beq.n	800618e <TIM_Base_SetConfig+0x9a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a2e      	ldr	r2, [pc, #184]	@ (8006234 <TIM_Base_SetConfig+0x140>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d007      	beq.n	800618e <TIM_Base_SetConfig+0x9a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a2d      	ldr	r2, [pc, #180]	@ (8006238 <TIM_Base_SetConfig+0x144>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d003      	beq.n	800618e <TIM_Base_SetConfig+0x9a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a2c      	ldr	r2, [pc, #176]	@ (800623c <TIM_Base_SetConfig+0x148>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d108      	bne.n	80061a0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a16      	ldr	r2, [pc, #88]	@ (8006220 <TIM_Base_SetConfig+0x12c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00f      	beq.n	80061ec <TIM_Base_SetConfig+0xf8>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a18      	ldr	r2, [pc, #96]	@ (8006230 <TIM_Base_SetConfig+0x13c>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00b      	beq.n	80061ec <TIM_Base_SetConfig+0xf8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a17      	ldr	r2, [pc, #92]	@ (8006234 <TIM_Base_SetConfig+0x140>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d007      	beq.n	80061ec <TIM_Base_SetConfig+0xf8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a16      	ldr	r2, [pc, #88]	@ (8006238 <TIM_Base_SetConfig+0x144>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_Base_SetConfig+0xf8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a15      	ldr	r2, [pc, #84]	@ (800623c <TIM_Base_SetConfig+0x148>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d103      	bne.n	80061f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b01      	cmp	r3, #1
 8006204:	d105      	bne.n	8006212 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f023 0201 	bic.w	r2, r3, #1
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	611a      	str	r2, [r3, #16]
  }
}
 8006212:	bf00      	nop
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40000400 	.word	0x40000400
 8006228:	40000800 	.word	0x40000800
 800622c:	40000c00 	.word	0x40000c00
 8006230:	40013400 	.word	0x40013400
 8006234:	40014000 	.word	0x40014000
 8006238:	40014400 	.word	0x40014400
 800623c:	40014800 	.word	0x40014800

08006240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	f023 0201 	bic.w	r2, r3, #1
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800626e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 0302 	bic.w	r3, r3, #2
 800628c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a2c      	ldr	r2, [pc, #176]	@ (800634c <TIM_OC1_SetConfig+0x10c>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d00f      	beq.n	80062c0 <TIM_OC1_SetConfig+0x80>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a2b      	ldr	r2, [pc, #172]	@ (8006350 <TIM_OC1_SetConfig+0x110>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00b      	beq.n	80062c0 <TIM_OC1_SetConfig+0x80>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006354 <TIM_OC1_SetConfig+0x114>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d007      	beq.n	80062c0 <TIM_OC1_SetConfig+0x80>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a29      	ldr	r2, [pc, #164]	@ (8006358 <TIM_OC1_SetConfig+0x118>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d003      	beq.n	80062c0 <TIM_OC1_SetConfig+0x80>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a28      	ldr	r2, [pc, #160]	@ (800635c <TIM_OC1_SetConfig+0x11c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d10c      	bne.n	80062da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f023 0308 	bic.w	r3, r3, #8
 80062c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f023 0304 	bic.w	r3, r3, #4
 80062d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1b      	ldr	r2, [pc, #108]	@ (800634c <TIM_OC1_SetConfig+0x10c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00f      	beq.n	8006302 <TIM_OC1_SetConfig+0xc2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006350 <TIM_OC1_SetConfig+0x110>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00b      	beq.n	8006302 <TIM_OC1_SetConfig+0xc2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a19      	ldr	r2, [pc, #100]	@ (8006354 <TIM_OC1_SetConfig+0x114>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d007      	beq.n	8006302 <TIM_OC1_SetConfig+0xc2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a18      	ldr	r2, [pc, #96]	@ (8006358 <TIM_OC1_SetConfig+0x118>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d003      	beq.n	8006302 <TIM_OC1_SetConfig+0xc2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a17      	ldr	r2, [pc, #92]	@ (800635c <TIM_OC1_SetConfig+0x11c>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d111      	bne.n	8006326 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685a      	ldr	r2, [r3, #4]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	621a      	str	r2, [r3, #32]
}
 8006340:	bf00      	nop
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	40012c00 	.word	0x40012c00
 8006350:	40013400 	.word	0x40013400
 8006354:	40014000 	.word	0x40014000
 8006358:	40014400 	.word	0x40014400
 800635c:	40014800 	.word	0x40014800

08006360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f023 0210 	bic.w	r2, r3, #16
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800638e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800639a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f023 0320 	bic.w	r3, r3, #32
 80063ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	011b      	lsls	r3, r3, #4
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a28      	ldr	r2, [pc, #160]	@ (8006460 <TIM_OC2_SetConfig+0x100>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d003      	beq.n	80063cc <TIM_OC2_SetConfig+0x6c>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a27      	ldr	r2, [pc, #156]	@ (8006464 <TIM_OC2_SetConfig+0x104>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d10d      	bne.n	80063e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006460 <TIM_OC2_SetConfig+0x100>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00f      	beq.n	8006410 <TIM_OC2_SetConfig+0xb0>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006464 <TIM_OC2_SetConfig+0x104>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00b      	beq.n	8006410 <TIM_OC2_SetConfig+0xb0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006468 <TIM_OC2_SetConfig+0x108>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d007      	beq.n	8006410 <TIM_OC2_SetConfig+0xb0>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a1a      	ldr	r2, [pc, #104]	@ (800646c <TIM_OC2_SetConfig+0x10c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC2_SetConfig+0xb0>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a19      	ldr	r2, [pc, #100]	@ (8006470 <TIM_OC2_SetConfig+0x110>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d113      	bne.n	8006438 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006416:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800641e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	4313      	orrs	r3, r2
 800642a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	4313      	orrs	r3, r2
 8006436:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40012c00 	.word	0x40012c00
 8006464:	40013400 	.word	0x40013400
 8006468:	40014000 	.word	0x40014000
 800646c:	40014400 	.word	0x40014400
 8006470:	40014800 	.word	0x40014800

08006474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0303 	bic.w	r3, r3, #3
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a27      	ldr	r2, [pc, #156]	@ (8006570 <TIM_OC3_SetConfig+0xfc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_OC3_SetConfig+0x6a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a26      	ldr	r2, [pc, #152]	@ (8006574 <TIM_OC3_SetConfig+0x100>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d10d      	bne.n	80064fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006570 <TIM_OC3_SetConfig+0xfc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00f      	beq.n	8006522 <TIM_OC3_SetConfig+0xae>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a1b      	ldr	r2, [pc, #108]	@ (8006574 <TIM_OC3_SetConfig+0x100>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00b      	beq.n	8006522 <TIM_OC3_SetConfig+0xae>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a1a      	ldr	r2, [pc, #104]	@ (8006578 <TIM_OC3_SetConfig+0x104>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d007      	beq.n	8006522 <TIM_OC3_SetConfig+0xae>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a19      	ldr	r2, [pc, #100]	@ (800657c <TIM_OC3_SetConfig+0x108>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d003      	beq.n	8006522 <TIM_OC3_SetConfig+0xae>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a18      	ldr	r2, [pc, #96]	@ (8006580 <TIM_OC3_SetConfig+0x10c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d113      	bne.n	800654a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	621a      	str	r2, [r3, #32]
}
 8006564:	bf00      	nop
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40013400 	.word	0x40013400
 8006578:	40014000 	.word	0x40014000
 800657c:	40014400 	.word	0x40014400
 8006580:	40014800 	.word	0x40014800

08006584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	021b      	lsls	r3, r3, #8
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	031b      	lsls	r3, r3, #12
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a18      	ldr	r2, [pc, #96]	@ (8006644 <TIM_OC4_SetConfig+0xc0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00f      	beq.n	8006608 <TIM_OC4_SetConfig+0x84>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a17      	ldr	r2, [pc, #92]	@ (8006648 <TIM_OC4_SetConfig+0xc4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00b      	beq.n	8006608 <TIM_OC4_SetConfig+0x84>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a16      	ldr	r2, [pc, #88]	@ (800664c <TIM_OC4_SetConfig+0xc8>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d007      	beq.n	8006608 <TIM_OC4_SetConfig+0x84>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a15      	ldr	r2, [pc, #84]	@ (8006650 <TIM_OC4_SetConfig+0xcc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_OC4_SetConfig+0x84>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a14      	ldr	r2, [pc, #80]	@ (8006654 <TIM_OC4_SetConfig+0xd0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d109      	bne.n	800661c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800660e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	019b      	lsls	r3, r3, #6
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	bf00      	nop
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40013400 	.word	0x40013400
 800664c:	40014000 	.word	0x40014000
 8006650:	40014400 	.word	0x40014400
 8006654:	40014800 	.word	0x40014800

08006658 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800668a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800669c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	041b      	lsls	r3, r3, #16
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a17      	ldr	r2, [pc, #92]	@ (800670c <TIM_OC5_SetConfig+0xb4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d00f      	beq.n	80066d2 <TIM_OC5_SetConfig+0x7a>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a16      	ldr	r2, [pc, #88]	@ (8006710 <TIM_OC5_SetConfig+0xb8>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d00b      	beq.n	80066d2 <TIM_OC5_SetConfig+0x7a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a15      	ldr	r2, [pc, #84]	@ (8006714 <TIM_OC5_SetConfig+0xbc>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d007      	beq.n	80066d2 <TIM_OC5_SetConfig+0x7a>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a14      	ldr	r2, [pc, #80]	@ (8006718 <TIM_OC5_SetConfig+0xc0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d003      	beq.n	80066d2 <TIM_OC5_SetConfig+0x7a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a13      	ldr	r2, [pc, #76]	@ (800671c <TIM_OC5_SetConfig+0xc4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d109      	bne.n	80066e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	621a      	str	r2, [r3, #32]
}
 8006700:	bf00      	nop
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40013400 	.word	0x40013400
 8006714:	40014000 	.word	0x40014000
 8006718:	40014400 	.word	0x40014400
 800671c:	40014800 	.word	0x40014800

08006720 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800674e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	021b      	lsls	r3, r3, #8
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	051b      	lsls	r3, r3, #20
 800676e:	693a      	ldr	r2, [r7, #16]
 8006770:	4313      	orrs	r3, r2
 8006772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a18      	ldr	r2, [pc, #96]	@ (80067d8 <TIM_OC6_SetConfig+0xb8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00f      	beq.n	800679c <TIM_OC6_SetConfig+0x7c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a17      	ldr	r2, [pc, #92]	@ (80067dc <TIM_OC6_SetConfig+0xbc>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00b      	beq.n	800679c <TIM_OC6_SetConfig+0x7c>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a16      	ldr	r2, [pc, #88]	@ (80067e0 <TIM_OC6_SetConfig+0xc0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d007      	beq.n	800679c <TIM_OC6_SetConfig+0x7c>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a15      	ldr	r2, [pc, #84]	@ (80067e4 <TIM_OC6_SetConfig+0xc4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_OC6_SetConfig+0x7c>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a14      	ldr	r2, [pc, #80]	@ (80067e8 <TIM_OC6_SetConfig+0xc8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d109      	bne.n	80067b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	029b      	lsls	r3, r3, #10
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	621a      	str	r2, [r3, #32]
}
 80067ca:	bf00      	nop
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40012c00 	.word	0x40012c00
 80067dc:	40013400 	.word	0x40013400
 80067e0:	40014000 	.word	0x40014000
 80067e4:	40014400 	.word	0x40014400
 80067e8:	40014800 	.word	0x40014800

080067ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f023 0201 	bic.w	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f023 030a 	bic.w	r3, r3, #10
 8006828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4313      	orrs	r3, r2
 8006830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	621a      	str	r2, [r3, #32]
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800684a:	b480      	push	{r7}
 800684c:	b087      	sub	sp, #28
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f023 0210 	bic.w	r2, r3, #16
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	031b      	lsls	r3, r3, #12
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006886:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	4313      	orrs	r3, r2
 8006890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	621a      	str	r2, [r3, #32]
}
 800689e:	bf00      	nop
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	f043 0307 	orr.w	r3, r3, #7
 80068cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	609a      	str	r2, [r3, #8]
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	021a      	lsls	r2, r3, #8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	431a      	orrs	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4313      	orrs	r3, r2
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	609a      	str	r2, [r3, #8]
}
 8006914:	bf00      	nop
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f003 031f 	and.w	r3, r3, #31
 8006932:	2201      	movs	r2, #1
 8006934:	fa02 f303 	lsl.w	r3, r2, r3
 8006938:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a1a      	ldr	r2, [r3, #32]
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	43db      	mvns	r3, r3
 8006942:	401a      	ands	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a1a      	ldr	r2, [r3, #32]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	f003 031f 	and.w	r3, r3, #31
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	fa01 f303 	lsl.w	r3, r1, r3
 8006958:	431a      	orrs	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	621a      	str	r2, [r3, #32]
}
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d109      	bne.n	8006990 <HAL_TIMEx_PWMN_Start+0x24>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b01      	cmp	r3, #1
 8006986:	bf14      	ite	ne
 8006988:	2301      	movne	r3, #1
 800698a:	2300      	moveq	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	e022      	b.n	80069d6 <HAL_TIMEx_PWMN_Start+0x6a>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b04      	cmp	r3, #4
 8006994:	d109      	bne.n	80069aa <HAL_TIMEx_PWMN_Start+0x3e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b01      	cmp	r3, #1
 80069a0:	bf14      	ite	ne
 80069a2:	2301      	movne	r3, #1
 80069a4:	2300      	moveq	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	e015      	b.n	80069d6 <HAL_TIMEx_PWMN_Start+0x6a>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d109      	bne.n	80069c4 <HAL_TIMEx_PWMN_Start+0x58>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	bf14      	ite	ne
 80069bc:	2301      	movne	r3, #1
 80069be:	2300      	moveq	r3, #0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	e008      	b.n	80069d6 <HAL_TIMEx_PWMN_Start+0x6a>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	bf14      	ite	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	2300      	moveq	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e06e      	b.n	8006abc <HAL_TIMEx_PWMN_Start+0x150>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <HAL_TIMEx_PWMN_Start+0x82>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069ec:	e013      	b.n	8006a16 <HAL_TIMEx_PWMN_Start+0xaa>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d104      	bne.n	80069fe <HAL_TIMEx_PWMN_Start+0x92>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069fc:	e00b      	b.n	8006a16 <HAL_TIMEx_PWMN_Start+0xaa>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d104      	bne.n	8006a0e <HAL_TIMEx_PWMN_Start+0xa2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a0c:	e003      	b.n	8006a16 <HAL_TIMEx_PWMN_Start+0xaa>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2202      	movs	r2, #2
 8006a12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2204      	movs	r2, #4
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 f982 	bl	8006d28 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a22      	ldr	r2, [pc, #136]	@ (8006ac4 <HAL_TIMEx_PWMN_Start+0x158>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d01d      	beq.n	8006a7a <HAL_TIMEx_PWMN_Start+0x10e>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a46:	d018      	beq.n	8006a7a <HAL_TIMEx_PWMN_Start+0x10e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d013      	beq.n	8006a7a <HAL_TIMEx_PWMN_Start+0x10e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a1d      	ldr	r2, [pc, #116]	@ (8006acc <HAL_TIMEx_PWMN_Start+0x160>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00e      	beq.n	8006a7a <HAL_TIMEx_PWMN_Start+0x10e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a1b      	ldr	r2, [pc, #108]	@ (8006ad0 <HAL_TIMEx_PWMN_Start+0x164>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d009      	beq.n	8006a7a <HAL_TIMEx_PWMN_Start+0x10e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ad4 <HAL_TIMEx_PWMN_Start+0x168>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d004      	beq.n	8006a7a <HAL_TIMEx_PWMN_Start+0x10e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a18      	ldr	r2, [pc, #96]	@ (8006ad8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d115      	bne.n	8006aa6 <HAL_TIMEx_PWMN_Start+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	4b16      	ldr	r3, [pc, #88]	@ (8006adc <HAL_TIMEx_PWMN_Start+0x170>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b06      	cmp	r3, #6
 8006a8a:	d015      	beq.n	8006ab8 <HAL_TIMEx_PWMN_Start+0x14c>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a92:	d011      	beq.n	8006ab8 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0201 	orr.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa4:	e008      	b.n	8006ab8 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f042 0201 	orr.w	r2, r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	e000      	b.n	8006aba <HAL_TIMEx_PWMN_Start+0x14e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40000400 	.word	0x40000400
 8006acc:	40000800 	.word	0x40000800
 8006ad0:	40000c00 	.word	0x40000c00
 8006ad4:	40013400 	.word	0x40013400
 8006ad8:	40014000 	.word	0x40014000
 8006adc:	00010007 	.word	0x00010007

08006ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d101      	bne.n	8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006af4:	2302      	movs	r3, #2
 8006af6:	e068      	b.n	8006bca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d004      	beq.n	8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a2d      	ldr	r2, [pc, #180]	@ (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d108      	bne.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d01d      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b6a:	d018      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a1b      	ldr	r2, [pc, #108]	@ (8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00e      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a18      	ldr	r2, [pc, #96]	@ (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d009      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a13      	ldr	r2, [pc, #76]	@ (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d004      	beq.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a14      	ldr	r2, [pc, #80]	@ (8006bec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d10c      	bne.n	8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40012c00 	.word	0x40012c00
 8006bdc:	40013400 	.word	0x40013400
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800
 8006be8:	40000c00 	.word	0x40000c00
 8006bec:	40014000 	.word	0x40014000

08006bf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e065      	b.n	8006cd8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	041b      	lsls	r3, r3, #16
 8006c82:	4313      	orrs	r3, r2
 8006c84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a16      	ldr	r2, [pc, #88]	@ (8006ce4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d004      	beq.n	8006c9a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a14      	ldr	r2, [pc, #80]	@ (8006ce8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d115      	bne.n	8006cc6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca4:	051b      	lsls	r3, r3, #20
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	40012c00 	.word	0x40012c00
 8006ce8:	40013400 	.word	0x40013400

08006cec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a1a      	ldr	r2, [r3, #32]
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	43db      	mvns	r3, r3
 8006d4a:	401a      	ands	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6a1a      	ldr	r2, [r3, #32]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d60:	431a      	orrs	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	621a      	str	r2, [r3, #32]
}
 8006d66:	bf00      	nop
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <__cvt>:
 8006d72:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d76:	ec57 6b10 	vmov	r6, r7, d0
 8006d7a:	2f00      	cmp	r7, #0
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	4619      	mov	r1, r3
 8006d80:	463b      	mov	r3, r7
 8006d82:	bfbb      	ittet	lt
 8006d84:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006d88:	461f      	movlt	r7, r3
 8006d8a:	2300      	movge	r3, #0
 8006d8c:	232d      	movlt	r3, #45	@ 0x2d
 8006d8e:	700b      	strb	r3, [r1, #0]
 8006d90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d92:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006d96:	4691      	mov	r9, r2
 8006d98:	f023 0820 	bic.w	r8, r3, #32
 8006d9c:	bfbc      	itt	lt
 8006d9e:	4632      	movlt	r2, r6
 8006da0:	4616      	movlt	r6, r2
 8006da2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006da6:	d005      	beq.n	8006db4 <__cvt+0x42>
 8006da8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006dac:	d100      	bne.n	8006db0 <__cvt+0x3e>
 8006dae:	3401      	adds	r4, #1
 8006db0:	2102      	movs	r1, #2
 8006db2:	e000      	b.n	8006db6 <__cvt+0x44>
 8006db4:	2103      	movs	r1, #3
 8006db6:	ab03      	add	r3, sp, #12
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	ab02      	add	r3, sp, #8
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	ec47 6b10 	vmov	d0, r6, r7
 8006dc2:	4653      	mov	r3, sl
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	f000 fe5b 	bl	8007a80 <_dtoa_r>
 8006dca:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006dce:	4605      	mov	r5, r0
 8006dd0:	d119      	bne.n	8006e06 <__cvt+0x94>
 8006dd2:	f019 0f01 	tst.w	r9, #1
 8006dd6:	d00e      	beq.n	8006df6 <__cvt+0x84>
 8006dd8:	eb00 0904 	add.w	r9, r0, r4
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2300      	movs	r3, #0
 8006de0:	4630      	mov	r0, r6
 8006de2:	4639      	mov	r1, r7
 8006de4:	f7f9 fe70 	bl	8000ac8 <__aeabi_dcmpeq>
 8006de8:	b108      	cbz	r0, 8006dee <__cvt+0x7c>
 8006dea:	f8cd 900c 	str.w	r9, [sp, #12]
 8006dee:	2230      	movs	r2, #48	@ 0x30
 8006df0:	9b03      	ldr	r3, [sp, #12]
 8006df2:	454b      	cmp	r3, r9
 8006df4:	d31e      	bcc.n	8006e34 <__cvt+0xc2>
 8006df6:	9b03      	ldr	r3, [sp, #12]
 8006df8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006dfa:	1b5b      	subs	r3, r3, r5
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	b004      	add	sp, #16
 8006e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e06:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006e0a:	eb00 0904 	add.w	r9, r0, r4
 8006e0e:	d1e5      	bne.n	8006ddc <__cvt+0x6a>
 8006e10:	7803      	ldrb	r3, [r0, #0]
 8006e12:	2b30      	cmp	r3, #48	@ 0x30
 8006e14:	d10a      	bne.n	8006e2c <__cvt+0xba>
 8006e16:	2200      	movs	r2, #0
 8006e18:	2300      	movs	r3, #0
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	4639      	mov	r1, r7
 8006e1e:	f7f9 fe53 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e22:	b918      	cbnz	r0, 8006e2c <__cvt+0xba>
 8006e24:	f1c4 0401 	rsb	r4, r4, #1
 8006e28:	f8ca 4000 	str.w	r4, [sl]
 8006e2c:	f8da 3000 	ldr.w	r3, [sl]
 8006e30:	4499      	add	r9, r3
 8006e32:	e7d3      	b.n	8006ddc <__cvt+0x6a>
 8006e34:	1c59      	adds	r1, r3, #1
 8006e36:	9103      	str	r1, [sp, #12]
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	e7d9      	b.n	8006df0 <__cvt+0x7e>

08006e3c <__exponent>:
 8006e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e3e:	2900      	cmp	r1, #0
 8006e40:	bfba      	itte	lt
 8006e42:	4249      	neglt	r1, r1
 8006e44:	232d      	movlt	r3, #45	@ 0x2d
 8006e46:	232b      	movge	r3, #43	@ 0x2b
 8006e48:	2909      	cmp	r1, #9
 8006e4a:	7002      	strb	r2, [r0, #0]
 8006e4c:	7043      	strb	r3, [r0, #1]
 8006e4e:	dd29      	ble.n	8006ea4 <__exponent+0x68>
 8006e50:	f10d 0307 	add.w	r3, sp, #7
 8006e54:	461d      	mov	r5, r3
 8006e56:	270a      	movs	r7, #10
 8006e58:	461a      	mov	r2, r3
 8006e5a:	fbb1 f6f7 	udiv	r6, r1, r7
 8006e5e:	fb07 1416 	mls	r4, r7, r6, r1
 8006e62:	3430      	adds	r4, #48	@ 0x30
 8006e64:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006e68:	460c      	mov	r4, r1
 8006e6a:	2c63      	cmp	r4, #99	@ 0x63
 8006e6c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006e70:	4631      	mov	r1, r6
 8006e72:	dcf1      	bgt.n	8006e58 <__exponent+0x1c>
 8006e74:	3130      	adds	r1, #48	@ 0x30
 8006e76:	1e94      	subs	r4, r2, #2
 8006e78:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006e7c:	1c41      	adds	r1, r0, #1
 8006e7e:	4623      	mov	r3, r4
 8006e80:	42ab      	cmp	r3, r5
 8006e82:	d30a      	bcc.n	8006e9a <__exponent+0x5e>
 8006e84:	f10d 0309 	add.w	r3, sp, #9
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	42ac      	cmp	r4, r5
 8006e8c:	bf88      	it	hi
 8006e8e:	2300      	movhi	r3, #0
 8006e90:	3302      	adds	r3, #2
 8006e92:	4403      	add	r3, r0
 8006e94:	1a18      	subs	r0, r3, r0
 8006e96:	b003      	add	sp, #12
 8006e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e9a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006e9e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ea2:	e7ed      	b.n	8006e80 <__exponent+0x44>
 8006ea4:	2330      	movs	r3, #48	@ 0x30
 8006ea6:	3130      	adds	r1, #48	@ 0x30
 8006ea8:	7083      	strb	r3, [r0, #2]
 8006eaa:	70c1      	strb	r1, [r0, #3]
 8006eac:	1d03      	adds	r3, r0, #4
 8006eae:	e7f1      	b.n	8006e94 <__exponent+0x58>

08006eb0 <_printf_float>:
 8006eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb4:	b08d      	sub	sp, #52	@ 0x34
 8006eb6:	460c      	mov	r4, r1
 8006eb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ebc:	4616      	mov	r6, r2
 8006ebe:	461f      	mov	r7, r3
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	f000 fcdb 	bl	800787c <_localeconv_r>
 8006ec6:	6803      	ldr	r3, [r0, #0]
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7f9 f9d0 	bl	8000270 <strlen>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed8:	9005      	str	r0, [sp, #20]
 8006eda:	3307      	adds	r3, #7
 8006edc:	f023 0307 	bic.w	r3, r3, #7
 8006ee0:	f103 0208 	add.w	r2, r3, #8
 8006ee4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006ee8:	f8d4 b000 	ldr.w	fp, [r4]
 8006eec:	f8c8 2000 	str.w	r2, [r8]
 8006ef0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ef4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ef8:	9307      	str	r3, [sp, #28]
 8006efa:	f8cd 8018 	str.w	r8, [sp, #24]
 8006efe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f06:	4b9c      	ldr	r3, [pc, #624]	@ (8007178 <_printf_float+0x2c8>)
 8006f08:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0c:	f7f9 fe0e 	bl	8000b2c <__aeabi_dcmpun>
 8006f10:	bb70      	cbnz	r0, 8006f70 <_printf_float+0xc0>
 8006f12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f16:	4b98      	ldr	r3, [pc, #608]	@ (8007178 <_printf_float+0x2c8>)
 8006f18:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1c:	f7f9 fde8 	bl	8000af0 <__aeabi_dcmple>
 8006f20:	bb30      	cbnz	r0, 8006f70 <_printf_float+0xc0>
 8006f22:	2200      	movs	r2, #0
 8006f24:	2300      	movs	r3, #0
 8006f26:	4640      	mov	r0, r8
 8006f28:	4649      	mov	r1, r9
 8006f2a:	f7f9 fdd7 	bl	8000adc <__aeabi_dcmplt>
 8006f2e:	b110      	cbz	r0, 8006f36 <_printf_float+0x86>
 8006f30:	232d      	movs	r3, #45	@ 0x2d
 8006f32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f36:	4a91      	ldr	r2, [pc, #580]	@ (800717c <_printf_float+0x2cc>)
 8006f38:	4b91      	ldr	r3, [pc, #580]	@ (8007180 <_printf_float+0x2d0>)
 8006f3a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006f3e:	bf8c      	ite	hi
 8006f40:	4690      	movhi	r8, r2
 8006f42:	4698      	movls	r8, r3
 8006f44:	2303      	movs	r3, #3
 8006f46:	6123      	str	r3, [r4, #16]
 8006f48:	f02b 0304 	bic.w	r3, fp, #4
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	f04f 0900 	mov.w	r9, #0
 8006f52:	9700      	str	r7, [sp, #0]
 8006f54:	4633      	mov	r3, r6
 8006f56:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f000 f9d2 	bl	8007304 <_printf_common>
 8006f60:	3001      	adds	r0, #1
 8006f62:	f040 808d 	bne.w	8007080 <_printf_float+0x1d0>
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6a:	b00d      	add	sp, #52	@ 0x34
 8006f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f70:	4642      	mov	r2, r8
 8006f72:	464b      	mov	r3, r9
 8006f74:	4640      	mov	r0, r8
 8006f76:	4649      	mov	r1, r9
 8006f78:	f7f9 fdd8 	bl	8000b2c <__aeabi_dcmpun>
 8006f7c:	b140      	cbz	r0, 8006f90 <_printf_float+0xe0>
 8006f7e:	464b      	mov	r3, r9
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	bfbc      	itt	lt
 8006f84:	232d      	movlt	r3, #45	@ 0x2d
 8006f86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8007184 <_printf_float+0x2d4>)
 8006f8c:	4b7e      	ldr	r3, [pc, #504]	@ (8007188 <_printf_float+0x2d8>)
 8006f8e:	e7d4      	b.n	8006f3a <_printf_float+0x8a>
 8006f90:	6863      	ldr	r3, [r4, #4]
 8006f92:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006f96:	9206      	str	r2, [sp, #24]
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	d13b      	bne.n	8007014 <_printf_float+0x164>
 8006f9c:	2306      	movs	r3, #6
 8006f9e:	6063      	str	r3, [r4, #4]
 8006fa0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	6022      	str	r2, [r4, #0]
 8006fa8:	9303      	str	r3, [sp, #12]
 8006faa:	ab0a      	add	r3, sp, #40	@ 0x28
 8006fac:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006fb0:	ab09      	add	r3, sp, #36	@ 0x24
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	6861      	ldr	r1, [r4, #4]
 8006fb6:	ec49 8b10 	vmov	d0, r8, r9
 8006fba:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006fbe:	4628      	mov	r0, r5
 8006fc0:	f7ff fed7 	bl	8006d72 <__cvt>
 8006fc4:	9b06      	ldr	r3, [sp, #24]
 8006fc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fc8:	2b47      	cmp	r3, #71	@ 0x47
 8006fca:	4680      	mov	r8, r0
 8006fcc:	d129      	bne.n	8007022 <_printf_float+0x172>
 8006fce:	1cc8      	adds	r0, r1, #3
 8006fd0:	db02      	blt.n	8006fd8 <_printf_float+0x128>
 8006fd2:	6863      	ldr	r3, [r4, #4]
 8006fd4:	4299      	cmp	r1, r3
 8006fd6:	dd41      	ble.n	800705c <_printf_float+0x1ac>
 8006fd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8006fdc:	fa5f fa8a 	uxtb.w	sl, sl
 8006fe0:	3901      	subs	r1, #1
 8006fe2:	4652      	mov	r2, sl
 8006fe4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006fe8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006fea:	f7ff ff27 	bl	8006e3c <__exponent>
 8006fee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ff0:	1813      	adds	r3, r2, r0
 8006ff2:	2a01      	cmp	r2, #1
 8006ff4:	4681      	mov	r9, r0
 8006ff6:	6123      	str	r3, [r4, #16]
 8006ff8:	dc02      	bgt.n	8007000 <_printf_float+0x150>
 8006ffa:	6822      	ldr	r2, [r4, #0]
 8006ffc:	07d2      	lsls	r2, r2, #31
 8006ffe:	d501      	bpl.n	8007004 <_printf_float+0x154>
 8007000:	3301      	adds	r3, #1
 8007002:	6123      	str	r3, [r4, #16]
 8007004:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0a2      	beq.n	8006f52 <_printf_float+0xa2>
 800700c:	232d      	movs	r3, #45	@ 0x2d
 800700e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007012:	e79e      	b.n	8006f52 <_printf_float+0xa2>
 8007014:	9a06      	ldr	r2, [sp, #24]
 8007016:	2a47      	cmp	r2, #71	@ 0x47
 8007018:	d1c2      	bne.n	8006fa0 <_printf_float+0xf0>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1c0      	bne.n	8006fa0 <_printf_float+0xf0>
 800701e:	2301      	movs	r3, #1
 8007020:	e7bd      	b.n	8006f9e <_printf_float+0xee>
 8007022:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007026:	d9db      	bls.n	8006fe0 <_printf_float+0x130>
 8007028:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800702c:	d118      	bne.n	8007060 <_printf_float+0x1b0>
 800702e:	2900      	cmp	r1, #0
 8007030:	6863      	ldr	r3, [r4, #4]
 8007032:	dd0b      	ble.n	800704c <_printf_float+0x19c>
 8007034:	6121      	str	r1, [r4, #16]
 8007036:	b913      	cbnz	r3, 800703e <_printf_float+0x18e>
 8007038:	6822      	ldr	r2, [r4, #0]
 800703a:	07d0      	lsls	r0, r2, #31
 800703c:	d502      	bpl.n	8007044 <_printf_float+0x194>
 800703e:	3301      	adds	r3, #1
 8007040:	440b      	add	r3, r1
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007046:	f04f 0900 	mov.w	r9, #0
 800704a:	e7db      	b.n	8007004 <_printf_float+0x154>
 800704c:	b913      	cbnz	r3, 8007054 <_printf_float+0x1a4>
 800704e:	6822      	ldr	r2, [r4, #0]
 8007050:	07d2      	lsls	r2, r2, #31
 8007052:	d501      	bpl.n	8007058 <_printf_float+0x1a8>
 8007054:	3302      	adds	r3, #2
 8007056:	e7f4      	b.n	8007042 <_printf_float+0x192>
 8007058:	2301      	movs	r3, #1
 800705a:	e7f2      	b.n	8007042 <_printf_float+0x192>
 800705c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007062:	4299      	cmp	r1, r3
 8007064:	db05      	blt.n	8007072 <_printf_float+0x1c2>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	6121      	str	r1, [r4, #16]
 800706a:	07d8      	lsls	r0, r3, #31
 800706c:	d5ea      	bpl.n	8007044 <_printf_float+0x194>
 800706e:	1c4b      	adds	r3, r1, #1
 8007070:	e7e7      	b.n	8007042 <_printf_float+0x192>
 8007072:	2900      	cmp	r1, #0
 8007074:	bfd4      	ite	le
 8007076:	f1c1 0202 	rsble	r2, r1, #2
 800707a:	2201      	movgt	r2, #1
 800707c:	4413      	add	r3, r2
 800707e:	e7e0      	b.n	8007042 <_printf_float+0x192>
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	055a      	lsls	r2, r3, #21
 8007084:	d407      	bmi.n	8007096 <_printf_float+0x1e6>
 8007086:	6923      	ldr	r3, [r4, #16]
 8007088:	4642      	mov	r2, r8
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	47b8      	blx	r7
 8007090:	3001      	adds	r0, #1
 8007092:	d12b      	bne.n	80070ec <_printf_float+0x23c>
 8007094:	e767      	b.n	8006f66 <_printf_float+0xb6>
 8007096:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800709a:	f240 80dd 	bls.w	8007258 <_printf_float+0x3a8>
 800709e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070a2:	2200      	movs	r2, #0
 80070a4:	2300      	movs	r3, #0
 80070a6:	f7f9 fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	d033      	beq.n	8007116 <_printf_float+0x266>
 80070ae:	4a37      	ldr	r2, [pc, #220]	@ (800718c <_printf_float+0x2dc>)
 80070b0:	2301      	movs	r3, #1
 80070b2:	4631      	mov	r1, r6
 80070b4:	4628      	mov	r0, r5
 80070b6:	47b8      	blx	r7
 80070b8:	3001      	adds	r0, #1
 80070ba:	f43f af54 	beq.w	8006f66 <_printf_float+0xb6>
 80070be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80070c2:	4543      	cmp	r3, r8
 80070c4:	db02      	blt.n	80070cc <_printf_float+0x21c>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	07d8      	lsls	r0, r3, #31
 80070ca:	d50f      	bpl.n	80070ec <_printf_float+0x23c>
 80070cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070d0:	4631      	mov	r1, r6
 80070d2:	4628      	mov	r0, r5
 80070d4:	47b8      	blx	r7
 80070d6:	3001      	adds	r0, #1
 80070d8:	f43f af45 	beq.w	8006f66 <_printf_float+0xb6>
 80070dc:	f04f 0900 	mov.w	r9, #0
 80070e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80070e4:	f104 0a1a 	add.w	sl, r4, #26
 80070e8:	45c8      	cmp	r8, r9
 80070ea:	dc09      	bgt.n	8007100 <_printf_float+0x250>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	079b      	lsls	r3, r3, #30
 80070f0:	f100 8103 	bmi.w	80072fa <_printf_float+0x44a>
 80070f4:	68e0      	ldr	r0, [r4, #12]
 80070f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070f8:	4298      	cmp	r0, r3
 80070fa:	bfb8      	it	lt
 80070fc:	4618      	movlt	r0, r3
 80070fe:	e734      	b.n	8006f6a <_printf_float+0xba>
 8007100:	2301      	movs	r3, #1
 8007102:	4652      	mov	r2, sl
 8007104:	4631      	mov	r1, r6
 8007106:	4628      	mov	r0, r5
 8007108:	47b8      	blx	r7
 800710a:	3001      	adds	r0, #1
 800710c:	f43f af2b 	beq.w	8006f66 <_printf_float+0xb6>
 8007110:	f109 0901 	add.w	r9, r9, #1
 8007114:	e7e8      	b.n	80070e8 <_printf_float+0x238>
 8007116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	dc39      	bgt.n	8007190 <_printf_float+0x2e0>
 800711c:	4a1b      	ldr	r2, [pc, #108]	@ (800718c <_printf_float+0x2dc>)
 800711e:	2301      	movs	r3, #1
 8007120:	4631      	mov	r1, r6
 8007122:	4628      	mov	r0, r5
 8007124:	47b8      	blx	r7
 8007126:	3001      	adds	r0, #1
 8007128:	f43f af1d 	beq.w	8006f66 <_printf_float+0xb6>
 800712c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007130:	ea59 0303 	orrs.w	r3, r9, r3
 8007134:	d102      	bne.n	800713c <_printf_float+0x28c>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	07d9      	lsls	r1, r3, #31
 800713a:	d5d7      	bpl.n	80070ec <_printf_float+0x23c>
 800713c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007140:	4631      	mov	r1, r6
 8007142:	4628      	mov	r0, r5
 8007144:	47b8      	blx	r7
 8007146:	3001      	adds	r0, #1
 8007148:	f43f af0d 	beq.w	8006f66 <_printf_float+0xb6>
 800714c:	f04f 0a00 	mov.w	sl, #0
 8007150:	f104 0b1a 	add.w	fp, r4, #26
 8007154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007156:	425b      	negs	r3, r3
 8007158:	4553      	cmp	r3, sl
 800715a:	dc01      	bgt.n	8007160 <_printf_float+0x2b0>
 800715c:	464b      	mov	r3, r9
 800715e:	e793      	b.n	8007088 <_printf_float+0x1d8>
 8007160:	2301      	movs	r3, #1
 8007162:	465a      	mov	r2, fp
 8007164:	4631      	mov	r1, r6
 8007166:	4628      	mov	r0, r5
 8007168:	47b8      	blx	r7
 800716a:	3001      	adds	r0, #1
 800716c:	f43f aefb 	beq.w	8006f66 <_printf_float+0xb6>
 8007170:	f10a 0a01 	add.w	sl, sl, #1
 8007174:	e7ee      	b.n	8007154 <_printf_float+0x2a4>
 8007176:	bf00      	nop
 8007178:	7fefffff 	.word	0x7fefffff
 800717c:	0800a634 	.word	0x0800a634
 8007180:	0800a630 	.word	0x0800a630
 8007184:	0800a63c 	.word	0x0800a63c
 8007188:	0800a638 	.word	0x0800a638
 800718c:	0800a640 	.word	0x0800a640
 8007190:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007192:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007196:	4553      	cmp	r3, sl
 8007198:	bfa8      	it	ge
 800719a:	4653      	movge	r3, sl
 800719c:	2b00      	cmp	r3, #0
 800719e:	4699      	mov	r9, r3
 80071a0:	dc36      	bgt.n	8007210 <_printf_float+0x360>
 80071a2:	f04f 0b00 	mov.w	fp, #0
 80071a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071aa:	f104 021a 	add.w	r2, r4, #26
 80071ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071b0:	9306      	str	r3, [sp, #24]
 80071b2:	eba3 0309 	sub.w	r3, r3, r9
 80071b6:	455b      	cmp	r3, fp
 80071b8:	dc31      	bgt.n	800721e <_printf_float+0x36e>
 80071ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071bc:	459a      	cmp	sl, r3
 80071be:	dc3a      	bgt.n	8007236 <_printf_float+0x386>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	07da      	lsls	r2, r3, #31
 80071c4:	d437      	bmi.n	8007236 <_printf_float+0x386>
 80071c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c8:	ebaa 0903 	sub.w	r9, sl, r3
 80071cc:	9b06      	ldr	r3, [sp, #24]
 80071ce:	ebaa 0303 	sub.w	r3, sl, r3
 80071d2:	4599      	cmp	r9, r3
 80071d4:	bfa8      	it	ge
 80071d6:	4699      	movge	r9, r3
 80071d8:	f1b9 0f00 	cmp.w	r9, #0
 80071dc:	dc33      	bgt.n	8007246 <_printf_float+0x396>
 80071de:	f04f 0800 	mov.w	r8, #0
 80071e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071e6:	f104 0b1a 	add.w	fp, r4, #26
 80071ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071ec:	ebaa 0303 	sub.w	r3, sl, r3
 80071f0:	eba3 0309 	sub.w	r3, r3, r9
 80071f4:	4543      	cmp	r3, r8
 80071f6:	f77f af79 	ble.w	80070ec <_printf_float+0x23c>
 80071fa:	2301      	movs	r3, #1
 80071fc:	465a      	mov	r2, fp
 80071fe:	4631      	mov	r1, r6
 8007200:	4628      	mov	r0, r5
 8007202:	47b8      	blx	r7
 8007204:	3001      	adds	r0, #1
 8007206:	f43f aeae 	beq.w	8006f66 <_printf_float+0xb6>
 800720a:	f108 0801 	add.w	r8, r8, #1
 800720e:	e7ec      	b.n	80071ea <_printf_float+0x33a>
 8007210:	4642      	mov	r2, r8
 8007212:	4631      	mov	r1, r6
 8007214:	4628      	mov	r0, r5
 8007216:	47b8      	blx	r7
 8007218:	3001      	adds	r0, #1
 800721a:	d1c2      	bne.n	80071a2 <_printf_float+0x2f2>
 800721c:	e6a3      	b.n	8006f66 <_printf_float+0xb6>
 800721e:	2301      	movs	r3, #1
 8007220:	4631      	mov	r1, r6
 8007222:	4628      	mov	r0, r5
 8007224:	9206      	str	r2, [sp, #24]
 8007226:	47b8      	blx	r7
 8007228:	3001      	adds	r0, #1
 800722a:	f43f ae9c 	beq.w	8006f66 <_printf_float+0xb6>
 800722e:	9a06      	ldr	r2, [sp, #24]
 8007230:	f10b 0b01 	add.w	fp, fp, #1
 8007234:	e7bb      	b.n	80071ae <_printf_float+0x2fe>
 8007236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	d1c0      	bne.n	80071c6 <_printf_float+0x316>
 8007244:	e68f      	b.n	8006f66 <_printf_float+0xb6>
 8007246:	9a06      	ldr	r2, [sp, #24]
 8007248:	464b      	mov	r3, r9
 800724a:	4442      	add	r2, r8
 800724c:	4631      	mov	r1, r6
 800724e:	4628      	mov	r0, r5
 8007250:	47b8      	blx	r7
 8007252:	3001      	adds	r0, #1
 8007254:	d1c3      	bne.n	80071de <_printf_float+0x32e>
 8007256:	e686      	b.n	8006f66 <_printf_float+0xb6>
 8007258:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800725c:	f1ba 0f01 	cmp.w	sl, #1
 8007260:	dc01      	bgt.n	8007266 <_printf_float+0x3b6>
 8007262:	07db      	lsls	r3, r3, #31
 8007264:	d536      	bpl.n	80072d4 <_printf_float+0x424>
 8007266:	2301      	movs	r3, #1
 8007268:	4642      	mov	r2, r8
 800726a:	4631      	mov	r1, r6
 800726c:	4628      	mov	r0, r5
 800726e:	47b8      	blx	r7
 8007270:	3001      	adds	r0, #1
 8007272:	f43f ae78 	beq.w	8006f66 <_printf_float+0xb6>
 8007276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800727a:	4631      	mov	r1, r6
 800727c:	4628      	mov	r0, r5
 800727e:	47b8      	blx	r7
 8007280:	3001      	adds	r0, #1
 8007282:	f43f ae70 	beq.w	8006f66 <_printf_float+0xb6>
 8007286:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800728a:	2200      	movs	r2, #0
 800728c:	2300      	movs	r3, #0
 800728e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007292:	f7f9 fc19 	bl	8000ac8 <__aeabi_dcmpeq>
 8007296:	b9c0      	cbnz	r0, 80072ca <_printf_float+0x41a>
 8007298:	4653      	mov	r3, sl
 800729a:	f108 0201 	add.w	r2, r8, #1
 800729e:	4631      	mov	r1, r6
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	d10c      	bne.n	80072c2 <_printf_float+0x412>
 80072a8:	e65d      	b.n	8006f66 <_printf_float+0xb6>
 80072aa:	2301      	movs	r3, #1
 80072ac:	465a      	mov	r2, fp
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b8      	blx	r7
 80072b4:	3001      	adds	r0, #1
 80072b6:	f43f ae56 	beq.w	8006f66 <_printf_float+0xb6>
 80072ba:	f108 0801 	add.w	r8, r8, #1
 80072be:	45d0      	cmp	r8, sl
 80072c0:	dbf3      	blt.n	80072aa <_printf_float+0x3fa>
 80072c2:	464b      	mov	r3, r9
 80072c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80072c8:	e6df      	b.n	800708a <_printf_float+0x1da>
 80072ca:	f04f 0800 	mov.w	r8, #0
 80072ce:	f104 0b1a 	add.w	fp, r4, #26
 80072d2:	e7f4      	b.n	80072be <_printf_float+0x40e>
 80072d4:	2301      	movs	r3, #1
 80072d6:	4642      	mov	r2, r8
 80072d8:	e7e1      	b.n	800729e <_printf_float+0x3ee>
 80072da:	2301      	movs	r3, #1
 80072dc:	464a      	mov	r2, r9
 80072de:	4631      	mov	r1, r6
 80072e0:	4628      	mov	r0, r5
 80072e2:	47b8      	blx	r7
 80072e4:	3001      	adds	r0, #1
 80072e6:	f43f ae3e 	beq.w	8006f66 <_printf_float+0xb6>
 80072ea:	f108 0801 	add.w	r8, r8, #1
 80072ee:	68e3      	ldr	r3, [r4, #12]
 80072f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072f2:	1a5b      	subs	r3, r3, r1
 80072f4:	4543      	cmp	r3, r8
 80072f6:	dcf0      	bgt.n	80072da <_printf_float+0x42a>
 80072f8:	e6fc      	b.n	80070f4 <_printf_float+0x244>
 80072fa:	f04f 0800 	mov.w	r8, #0
 80072fe:	f104 0919 	add.w	r9, r4, #25
 8007302:	e7f4      	b.n	80072ee <_printf_float+0x43e>

08007304 <_printf_common>:
 8007304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007308:	4616      	mov	r6, r2
 800730a:	4698      	mov	r8, r3
 800730c:	688a      	ldr	r2, [r1, #8]
 800730e:	690b      	ldr	r3, [r1, #16]
 8007310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007314:	4293      	cmp	r3, r2
 8007316:	bfb8      	it	lt
 8007318:	4613      	movlt	r3, r2
 800731a:	6033      	str	r3, [r6, #0]
 800731c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007320:	4607      	mov	r7, r0
 8007322:	460c      	mov	r4, r1
 8007324:	b10a      	cbz	r2, 800732a <_printf_common+0x26>
 8007326:	3301      	adds	r3, #1
 8007328:	6033      	str	r3, [r6, #0]
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	0699      	lsls	r1, r3, #26
 800732e:	bf42      	ittt	mi
 8007330:	6833      	ldrmi	r3, [r6, #0]
 8007332:	3302      	addmi	r3, #2
 8007334:	6033      	strmi	r3, [r6, #0]
 8007336:	6825      	ldr	r5, [r4, #0]
 8007338:	f015 0506 	ands.w	r5, r5, #6
 800733c:	d106      	bne.n	800734c <_printf_common+0x48>
 800733e:	f104 0a19 	add.w	sl, r4, #25
 8007342:	68e3      	ldr	r3, [r4, #12]
 8007344:	6832      	ldr	r2, [r6, #0]
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	42ab      	cmp	r3, r5
 800734a:	dc26      	bgt.n	800739a <_printf_common+0x96>
 800734c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007350:	6822      	ldr	r2, [r4, #0]
 8007352:	3b00      	subs	r3, #0
 8007354:	bf18      	it	ne
 8007356:	2301      	movne	r3, #1
 8007358:	0692      	lsls	r2, r2, #26
 800735a:	d42b      	bmi.n	80073b4 <_printf_common+0xb0>
 800735c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007360:	4641      	mov	r1, r8
 8007362:	4638      	mov	r0, r7
 8007364:	47c8      	blx	r9
 8007366:	3001      	adds	r0, #1
 8007368:	d01e      	beq.n	80073a8 <_printf_common+0xa4>
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	6922      	ldr	r2, [r4, #16]
 800736e:	f003 0306 	and.w	r3, r3, #6
 8007372:	2b04      	cmp	r3, #4
 8007374:	bf02      	ittt	eq
 8007376:	68e5      	ldreq	r5, [r4, #12]
 8007378:	6833      	ldreq	r3, [r6, #0]
 800737a:	1aed      	subeq	r5, r5, r3
 800737c:	68a3      	ldr	r3, [r4, #8]
 800737e:	bf0c      	ite	eq
 8007380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007384:	2500      	movne	r5, #0
 8007386:	4293      	cmp	r3, r2
 8007388:	bfc4      	itt	gt
 800738a:	1a9b      	subgt	r3, r3, r2
 800738c:	18ed      	addgt	r5, r5, r3
 800738e:	2600      	movs	r6, #0
 8007390:	341a      	adds	r4, #26
 8007392:	42b5      	cmp	r5, r6
 8007394:	d11a      	bne.n	80073cc <_printf_common+0xc8>
 8007396:	2000      	movs	r0, #0
 8007398:	e008      	b.n	80073ac <_printf_common+0xa8>
 800739a:	2301      	movs	r3, #1
 800739c:	4652      	mov	r2, sl
 800739e:	4641      	mov	r1, r8
 80073a0:	4638      	mov	r0, r7
 80073a2:	47c8      	blx	r9
 80073a4:	3001      	adds	r0, #1
 80073a6:	d103      	bne.n	80073b0 <_printf_common+0xac>
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b0:	3501      	adds	r5, #1
 80073b2:	e7c6      	b.n	8007342 <_printf_common+0x3e>
 80073b4:	18e1      	adds	r1, r4, r3
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	2030      	movs	r0, #48	@ 0x30
 80073ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073be:	4422      	add	r2, r4
 80073c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073c8:	3302      	adds	r3, #2
 80073ca:	e7c7      	b.n	800735c <_printf_common+0x58>
 80073cc:	2301      	movs	r3, #1
 80073ce:	4622      	mov	r2, r4
 80073d0:	4641      	mov	r1, r8
 80073d2:	4638      	mov	r0, r7
 80073d4:	47c8      	blx	r9
 80073d6:	3001      	adds	r0, #1
 80073d8:	d0e6      	beq.n	80073a8 <_printf_common+0xa4>
 80073da:	3601      	adds	r6, #1
 80073dc:	e7d9      	b.n	8007392 <_printf_common+0x8e>
	...

080073e0 <_printf_i>:
 80073e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073e4:	7e0f      	ldrb	r7, [r1, #24]
 80073e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073e8:	2f78      	cmp	r7, #120	@ 0x78
 80073ea:	4691      	mov	r9, r2
 80073ec:	4680      	mov	r8, r0
 80073ee:	460c      	mov	r4, r1
 80073f0:	469a      	mov	sl, r3
 80073f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073f6:	d807      	bhi.n	8007408 <_printf_i+0x28>
 80073f8:	2f62      	cmp	r7, #98	@ 0x62
 80073fa:	d80a      	bhi.n	8007412 <_printf_i+0x32>
 80073fc:	2f00      	cmp	r7, #0
 80073fe:	f000 80d1 	beq.w	80075a4 <_printf_i+0x1c4>
 8007402:	2f58      	cmp	r7, #88	@ 0x58
 8007404:	f000 80b8 	beq.w	8007578 <_printf_i+0x198>
 8007408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800740c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007410:	e03a      	b.n	8007488 <_printf_i+0xa8>
 8007412:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007416:	2b15      	cmp	r3, #21
 8007418:	d8f6      	bhi.n	8007408 <_printf_i+0x28>
 800741a:	a101      	add	r1, pc, #4	@ (adr r1, 8007420 <_printf_i+0x40>)
 800741c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007420:	08007479 	.word	0x08007479
 8007424:	0800748d 	.word	0x0800748d
 8007428:	08007409 	.word	0x08007409
 800742c:	08007409 	.word	0x08007409
 8007430:	08007409 	.word	0x08007409
 8007434:	08007409 	.word	0x08007409
 8007438:	0800748d 	.word	0x0800748d
 800743c:	08007409 	.word	0x08007409
 8007440:	08007409 	.word	0x08007409
 8007444:	08007409 	.word	0x08007409
 8007448:	08007409 	.word	0x08007409
 800744c:	0800758b 	.word	0x0800758b
 8007450:	080074b7 	.word	0x080074b7
 8007454:	08007545 	.word	0x08007545
 8007458:	08007409 	.word	0x08007409
 800745c:	08007409 	.word	0x08007409
 8007460:	080075ad 	.word	0x080075ad
 8007464:	08007409 	.word	0x08007409
 8007468:	080074b7 	.word	0x080074b7
 800746c:	08007409 	.word	0x08007409
 8007470:	08007409 	.word	0x08007409
 8007474:	0800754d 	.word	0x0800754d
 8007478:	6833      	ldr	r3, [r6, #0]
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6032      	str	r2, [r6, #0]
 8007480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007484:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007488:	2301      	movs	r3, #1
 800748a:	e09c      	b.n	80075c6 <_printf_i+0x1e6>
 800748c:	6833      	ldr	r3, [r6, #0]
 800748e:	6820      	ldr	r0, [r4, #0]
 8007490:	1d19      	adds	r1, r3, #4
 8007492:	6031      	str	r1, [r6, #0]
 8007494:	0606      	lsls	r6, r0, #24
 8007496:	d501      	bpl.n	800749c <_printf_i+0xbc>
 8007498:	681d      	ldr	r5, [r3, #0]
 800749a:	e003      	b.n	80074a4 <_printf_i+0xc4>
 800749c:	0645      	lsls	r5, r0, #25
 800749e:	d5fb      	bpl.n	8007498 <_printf_i+0xb8>
 80074a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074a4:	2d00      	cmp	r5, #0
 80074a6:	da03      	bge.n	80074b0 <_printf_i+0xd0>
 80074a8:	232d      	movs	r3, #45	@ 0x2d
 80074aa:	426d      	negs	r5, r5
 80074ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074b0:	4858      	ldr	r0, [pc, #352]	@ (8007614 <_printf_i+0x234>)
 80074b2:	230a      	movs	r3, #10
 80074b4:	e011      	b.n	80074da <_printf_i+0xfa>
 80074b6:	6821      	ldr	r1, [r4, #0]
 80074b8:	6833      	ldr	r3, [r6, #0]
 80074ba:	0608      	lsls	r0, r1, #24
 80074bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80074c0:	d402      	bmi.n	80074c8 <_printf_i+0xe8>
 80074c2:	0649      	lsls	r1, r1, #25
 80074c4:	bf48      	it	mi
 80074c6:	b2ad      	uxthmi	r5, r5
 80074c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80074ca:	4852      	ldr	r0, [pc, #328]	@ (8007614 <_printf_i+0x234>)
 80074cc:	6033      	str	r3, [r6, #0]
 80074ce:	bf14      	ite	ne
 80074d0:	230a      	movne	r3, #10
 80074d2:	2308      	moveq	r3, #8
 80074d4:	2100      	movs	r1, #0
 80074d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074da:	6866      	ldr	r6, [r4, #4]
 80074dc:	60a6      	str	r6, [r4, #8]
 80074de:	2e00      	cmp	r6, #0
 80074e0:	db05      	blt.n	80074ee <_printf_i+0x10e>
 80074e2:	6821      	ldr	r1, [r4, #0]
 80074e4:	432e      	orrs	r6, r5
 80074e6:	f021 0104 	bic.w	r1, r1, #4
 80074ea:	6021      	str	r1, [r4, #0]
 80074ec:	d04b      	beq.n	8007586 <_printf_i+0x1a6>
 80074ee:	4616      	mov	r6, r2
 80074f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80074f4:	fb03 5711 	mls	r7, r3, r1, r5
 80074f8:	5dc7      	ldrb	r7, [r0, r7]
 80074fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074fe:	462f      	mov	r7, r5
 8007500:	42bb      	cmp	r3, r7
 8007502:	460d      	mov	r5, r1
 8007504:	d9f4      	bls.n	80074f0 <_printf_i+0x110>
 8007506:	2b08      	cmp	r3, #8
 8007508:	d10b      	bne.n	8007522 <_printf_i+0x142>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	07df      	lsls	r7, r3, #31
 800750e:	d508      	bpl.n	8007522 <_printf_i+0x142>
 8007510:	6923      	ldr	r3, [r4, #16]
 8007512:	6861      	ldr	r1, [r4, #4]
 8007514:	4299      	cmp	r1, r3
 8007516:	bfde      	ittt	le
 8007518:	2330      	movle	r3, #48	@ 0x30
 800751a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800751e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007522:	1b92      	subs	r2, r2, r6
 8007524:	6122      	str	r2, [r4, #16]
 8007526:	f8cd a000 	str.w	sl, [sp]
 800752a:	464b      	mov	r3, r9
 800752c:	aa03      	add	r2, sp, #12
 800752e:	4621      	mov	r1, r4
 8007530:	4640      	mov	r0, r8
 8007532:	f7ff fee7 	bl	8007304 <_printf_common>
 8007536:	3001      	adds	r0, #1
 8007538:	d14a      	bne.n	80075d0 <_printf_i+0x1f0>
 800753a:	f04f 30ff 	mov.w	r0, #4294967295
 800753e:	b004      	add	sp, #16
 8007540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	f043 0320 	orr.w	r3, r3, #32
 800754a:	6023      	str	r3, [r4, #0]
 800754c:	4832      	ldr	r0, [pc, #200]	@ (8007618 <_printf_i+0x238>)
 800754e:	2778      	movs	r7, #120	@ 0x78
 8007550:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	6831      	ldr	r1, [r6, #0]
 8007558:	061f      	lsls	r7, r3, #24
 800755a:	f851 5b04 	ldr.w	r5, [r1], #4
 800755e:	d402      	bmi.n	8007566 <_printf_i+0x186>
 8007560:	065f      	lsls	r7, r3, #25
 8007562:	bf48      	it	mi
 8007564:	b2ad      	uxthmi	r5, r5
 8007566:	6031      	str	r1, [r6, #0]
 8007568:	07d9      	lsls	r1, r3, #31
 800756a:	bf44      	itt	mi
 800756c:	f043 0320 	orrmi.w	r3, r3, #32
 8007570:	6023      	strmi	r3, [r4, #0]
 8007572:	b11d      	cbz	r5, 800757c <_printf_i+0x19c>
 8007574:	2310      	movs	r3, #16
 8007576:	e7ad      	b.n	80074d4 <_printf_i+0xf4>
 8007578:	4826      	ldr	r0, [pc, #152]	@ (8007614 <_printf_i+0x234>)
 800757a:	e7e9      	b.n	8007550 <_printf_i+0x170>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	f023 0320 	bic.w	r3, r3, #32
 8007582:	6023      	str	r3, [r4, #0]
 8007584:	e7f6      	b.n	8007574 <_printf_i+0x194>
 8007586:	4616      	mov	r6, r2
 8007588:	e7bd      	b.n	8007506 <_printf_i+0x126>
 800758a:	6833      	ldr	r3, [r6, #0]
 800758c:	6825      	ldr	r5, [r4, #0]
 800758e:	6961      	ldr	r1, [r4, #20]
 8007590:	1d18      	adds	r0, r3, #4
 8007592:	6030      	str	r0, [r6, #0]
 8007594:	062e      	lsls	r6, r5, #24
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	d501      	bpl.n	800759e <_printf_i+0x1be>
 800759a:	6019      	str	r1, [r3, #0]
 800759c:	e002      	b.n	80075a4 <_printf_i+0x1c4>
 800759e:	0668      	lsls	r0, r5, #25
 80075a0:	d5fb      	bpl.n	800759a <_printf_i+0x1ba>
 80075a2:	8019      	strh	r1, [r3, #0]
 80075a4:	2300      	movs	r3, #0
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	4616      	mov	r6, r2
 80075aa:	e7bc      	b.n	8007526 <_printf_i+0x146>
 80075ac:	6833      	ldr	r3, [r6, #0]
 80075ae:	1d1a      	adds	r2, r3, #4
 80075b0:	6032      	str	r2, [r6, #0]
 80075b2:	681e      	ldr	r6, [r3, #0]
 80075b4:	6862      	ldr	r2, [r4, #4]
 80075b6:	2100      	movs	r1, #0
 80075b8:	4630      	mov	r0, r6
 80075ba:	f7f8 fe09 	bl	80001d0 <memchr>
 80075be:	b108      	cbz	r0, 80075c4 <_printf_i+0x1e4>
 80075c0:	1b80      	subs	r0, r0, r6
 80075c2:	6060      	str	r0, [r4, #4]
 80075c4:	6863      	ldr	r3, [r4, #4]
 80075c6:	6123      	str	r3, [r4, #16]
 80075c8:	2300      	movs	r3, #0
 80075ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075ce:	e7aa      	b.n	8007526 <_printf_i+0x146>
 80075d0:	6923      	ldr	r3, [r4, #16]
 80075d2:	4632      	mov	r2, r6
 80075d4:	4649      	mov	r1, r9
 80075d6:	4640      	mov	r0, r8
 80075d8:	47d0      	blx	sl
 80075da:	3001      	adds	r0, #1
 80075dc:	d0ad      	beq.n	800753a <_printf_i+0x15a>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	079b      	lsls	r3, r3, #30
 80075e2:	d413      	bmi.n	800760c <_printf_i+0x22c>
 80075e4:	68e0      	ldr	r0, [r4, #12]
 80075e6:	9b03      	ldr	r3, [sp, #12]
 80075e8:	4298      	cmp	r0, r3
 80075ea:	bfb8      	it	lt
 80075ec:	4618      	movlt	r0, r3
 80075ee:	e7a6      	b.n	800753e <_printf_i+0x15e>
 80075f0:	2301      	movs	r3, #1
 80075f2:	4632      	mov	r2, r6
 80075f4:	4649      	mov	r1, r9
 80075f6:	4640      	mov	r0, r8
 80075f8:	47d0      	blx	sl
 80075fa:	3001      	adds	r0, #1
 80075fc:	d09d      	beq.n	800753a <_printf_i+0x15a>
 80075fe:	3501      	adds	r5, #1
 8007600:	68e3      	ldr	r3, [r4, #12]
 8007602:	9903      	ldr	r1, [sp, #12]
 8007604:	1a5b      	subs	r3, r3, r1
 8007606:	42ab      	cmp	r3, r5
 8007608:	dcf2      	bgt.n	80075f0 <_printf_i+0x210>
 800760a:	e7eb      	b.n	80075e4 <_printf_i+0x204>
 800760c:	2500      	movs	r5, #0
 800760e:	f104 0619 	add.w	r6, r4, #25
 8007612:	e7f5      	b.n	8007600 <_printf_i+0x220>
 8007614:	0800a642 	.word	0x0800a642
 8007618:	0800a653 	.word	0x0800a653

0800761c <std>:
 800761c:	2300      	movs	r3, #0
 800761e:	b510      	push	{r4, lr}
 8007620:	4604      	mov	r4, r0
 8007622:	e9c0 3300 	strd	r3, r3, [r0]
 8007626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800762a:	6083      	str	r3, [r0, #8]
 800762c:	8181      	strh	r1, [r0, #12]
 800762e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007630:	81c2      	strh	r2, [r0, #14]
 8007632:	6183      	str	r3, [r0, #24]
 8007634:	4619      	mov	r1, r3
 8007636:	2208      	movs	r2, #8
 8007638:	305c      	adds	r0, #92	@ 0x5c
 800763a:	f000 f916 	bl	800786a <memset>
 800763e:	4b0d      	ldr	r3, [pc, #52]	@ (8007674 <std+0x58>)
 8007640:	6263      	str	r3, [r4, #36]	@ 0x24
 8007642:	4b0d      	ldr	r3, [pc, #52]	@ (8007678 <std+0x5c>)
 8007644:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007646:	4b0d      	ldr	r3, [pc, #52]	@ (800767c <std+0x60>)
 8007648:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800764a:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <std+0x64>)
 800764c:	6323      	str	r3, [r4, #48]	@ 0x30
 800764e:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <std+0x68>)
 8007650:	6224      	str	r4, [r4, #32]
 8007652:	429c      	cmp	r4, r3
 8007654:	d006      	beq.n	8007664 <std+0x48>
 8007656:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800765a:	4294      	cmp	r4, r2
 800765c:	d002      	beq.n	8007664 <std+0x48>
 800765e:	33d0      	adds	r3, #208	@ 0xd0
 8007660:	429c      	cmp	r4, r3
 8007662:	d105      	bne.n	8007670 <std+0x54>
 8007664:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800766c:	f000 b97a 	b.w	8007964 <__retarget_lock_init_recursive>
 8007670:	bd10      	pop	{r4, pc}
 8007672:	bf00      	nop
 8007674:	080077e5 	.word	0x080077e5
 8007678:	08007807 	.word	0x08007807
 800767c:	0800783f 	.word	0x0800783f
 8007680:	08007863 	.word	0x08007863
 8007684:	200002fc 	.word	0x200002fc

08007688 <stdio_exit_handler>:
 8007688:	4a02      	ldr	r2, [pc, #8]	@ (8007694 <stdio_exit_handler+0xc>)
 800768a:	4903      	ldr	r1, [pc, #12]	@ (8007698 <stdio_exit_handler+0x10>)
 800768c:	4803      	ldr	r0, [pc, #12]	@ (800769c <stdio_exit_handler+0x14>)
 800768e:	f000 b869 	b.w	8007764 <_fwalk_sglue>
 8007692:	bf00      	nop
 8007694:	20000010 	.word	0x20000010
 8007698:	080092cd 	.word	0x080092cd
 800769c:	20000020 	.word	0x20000020

080076a0 <cleanup_stdio>:
 80076a0:	6841      	ldr	r1, [r0, #4]
 80076a2:	4b0c      	ldr	r3, [pc, #48]	@ (80076d4 <cleanup_stdio+0x34>)
 80076a4:	4299      	cmp	r1, r3
 80076a6:	b510      	push	{r4, lr}
 80076a8:	4604      	mov	r4, r0
 80076aa:	d001      	beq.n	80076b0 <cleanup_stdio+0x10>
 80076ac:	f001 fe0e 	bl	80092cc <_fflush_r>
 80076b0:	68a1      	ldr	r1, [r4, #8]
 80076b2:	4b09      	ldr	r3, [pc, #36]	@ (80076d8 <cleanup_stdio+0x38>)
 80076b4:	4299      	cmp	r1, r3
 80076b6:	d002      	beq.n	80076be <cleanup_stdio+0x1e>
 80076b8:	4620      	mov	r0, r4
 80076ba:	f001 fe07 	bl	80092cc <_fflush_r>
 80076be:	68e1      	ldr	r1, [r4, #12]
 80076c0:	4b06      	ldr	r3, [pc, #24]	@ (80076dc <cleanup_stdio+0x3c>)
 80076c2:	4299      	cmp	r1, r3
 80076c4:	d004      	beq.n	80076d0 <cleanup_stdio+0x30>
 80076c6:	4620      	mov	r0, r4
 80076c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076cc:	f001 bdfe 	b.w	80092cc <_fflush_r>
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	bf00      	nop
 80076d4:	200002fc 	.word	0x200002fc
 80076d8:	20000364 	.word	0x20000364
 80076dc:	200003cc 	.word	0x200003cc

080076e0 <global_stdio_init.part.0>:
 80076e0:	b510      	push	{r4, lr}
 80076e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007710 <global_stdio_init.part.0+0x30>)
 80076e4:	4c0b      	ldr	r4, [pc, #44]	@ (8007714 <global_stdio_init.part.0+0x34>)
 80076e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007718 <global_stdio_init.part.0+0x38>)
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	4620      	mov	r0, r4
 80076ec:	2200      	movs	r2, #0
 80076ee:	2104      	movs	r1, #4
 80076f0:	f7ff ff94 	bl	800761c <std>
 80076f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076f8:	2201      	movs	r2, #1
 80076fa:	2109      	movs	r1, #9
 80076fc:	f7ff ff8e 	bl	800761c <std>
 8007700:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007704:	2202      	movs	r2, #2
 8007706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800770a:	2112      	movs	r1, #18
 800770c:	f7ff bf86 	b.w	800761c <std>
 8007710:	20000434 	.word	0x20000434
 8007714:	200002fc 	.word	0x200002fc
 8007718:	08007689 	.word	0x08007689

0800771c <__sfp_lock_acquire>:
 800771c:	4801      	ldr	r0, [pc, #4]	@ (8007724 <__sfp_lock_acquire+0x8>)
 800771e:	f000 b922 	b.w	8007966 <__retarget_lock_acquire_recursive>
 8007722:	bf00      	nop
 8007724:	2000043d 	.word	0x2000043d

08007728 <__sfp_lock_release>:
 8007728:	4801      	ldr	r0, [pc, #4]	@ (8007730 <__sfp_lock_release+0x8>)
 800772a:	f000 b91d 	b.w	8007968 <__retarget_lock_release_recursive>
 800772e:	bf00      	nop
 8007730:	2000043d 	.word	0x2000043d

08007734 <__sinit>:
 8007734:	b510      	push	{r4, lr}
 8007736:	4604      	mov	r4, r0
 8007738:	f7ff fff0 	bl	800771c <__sfp_lock_acquire>
 800773c:	6a23      	ldr	r3, [r4, #32]
 800773e:	b11b      	cbz	r3, 8007748 <__sinit+0x14>
 8007740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007744:	f7ff bff0 	b.w	8007728 <__sfp_lock_release>
 8007748:	4b04      	ldr	r3, [pc, #16]	@ (800775c <__sinit+0x28>)
 800774a:	6223      	str	r3, [r4, #32]
 800774c:	4b04      	ldr	r3, [pc, #16]	@ (8007760 <__sinit+0x2c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1f5      	bne.n	8007740 <__sinit+0xc>
 8007754:	f7ff ffc4 	bl	80076e0 <global_stdio_init.part.0>
 8007758:	e7f2      	b.n	8007740 <__sinit+0xc>
 800775a:	bf00      	nop
 800775c:	080076a1 	.word	0x080076a1
 8007760:	20000434 	.word	0x20000434

08007764 <_fwalk_sglue>:
 8007764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007768:	4607      	mov	r7, r0
 800776a:	4688      	mov	r8, r1
 800776c:	4614      	mov	r4, r2
 800776e:	2600      	movs	r6, #0
 8007770:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007774:	f1b9 0901 	subs.w	r9, r9, #1
 8007778:	d505      	bpl.n	8007786 <_fwalk_sglue+0x22>
 800777a:	6824      	ldr	r4, [r4, #0]
 800777c:	2c00      	cmp	r4, #0
 800777e:	d1f7      	bne.n	8007770 <_fwalk_sglue+0xc>
 8007780:	4630      	mov	r0, r6
 8007782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007786:	89ab      	ldrh	r3, [r5, #12]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d907      	bls.n	800779c <_fwalk_sglue+0x38>
 800778c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007790:	3301      	adds	r3, #1
 8007792:	d003      	beq.n	800779c <_fwalk_sglue+0x38>
 8007794:	4629      	mov	r1, r5
 8007796:	4638      	mov	r0, r7
 8007798:	47c0      	blx	r8
 800779a:	4306      	orrs	r6, r0
 800779c:	3568      	adds	r5, #104	@ 0x68
 800779e:	e7e9      	b.n	8007774 <_fwalk_sglue+0x10>

080077a0 <siprintf>:
 80077a0:	b40e      	push	{r1, r2, r3}
 80077a2:	b510      	push	{r4, lr}
 80077a4:	b09d      	sub	sp, #116	@ 0x74
 80077a6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80077a8:	9002      	str	r0, [sp, #8]
 80077aa:	9006      	str	r0, [sp, #24]
 80077ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80077b0:	480a      	ldr	r0, [pc, #40]	@ (80077dc <siprintf+0x3c>)
 80077b2:	9107      	str	r1, [sp, #28]
 80077b4:	9104      	str	r1, [sp, #16]
 80077b6:	490a      	ldr	r1, [pc, #40]	@ (80077e0 <siprintf+0x40>)
 80077b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077bc:	9105      	str	r1, [sp, #20]
 80077be:	2400      	movs	r4, #0
 80077c0:	a902      	add	r1, sp, #8
 80077c2:	6800      	ldr	r0, [r0, #0]
 80077c4:	9301      	str	r3, [sp, #4]
 80077c6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80077c8:	f001 fc00 	bl	8008fcc <_svfiprintf_r>
 80077cc:	9b02      	ldr	r3, [sp, #8]
 80077ce:	701c      	strb	r4, [r3, #0]
 80077d0:	b01d      	add	sp, #116	@ 0x74
 80077d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d6:	b003      	add	sp, #12
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	2000001c 	.word	0x2000001c
 80077e0:	ffff0208 	.word	0xffff0208

080077e4 <__sread>:
 80077e4:	b510      	push	{r4, lr}
 80077e6:	460c      	mov	r4, r1
 80077e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ec:	f000 f86c 	bl	80078c8 <_read_r>
 80077f0:	2800      	cmp	r0, #0
 80077f2:	bfab      	itete	ge
 80077f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80077f6:	89a3      	ldrhlt	r3, [r4, #12]
 80077f8:	181b      	addge	r3, r3, r0
 80077fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80077fe:	bfac      	ite	ge
 8007800:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007802:	81a3      	strhlt	r3, [r4, #12]
 8007804:	bd10      	pop	{r4, pc}

08007806 <__swrite>:
 8007806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800780a:	461f      	mov	r7, r3
 800780c:	898b      	ldrh	r3, [r1, #12]
 800780e:	05db      	lsls	r3, r3, #23
 8007810:	4605      	mov	r5, r0
 8007812:	460c      	mov	r4, r1
 8007814:	4616      	mov	r6, r2
 8007816:	d505      	bpl.n	8007824 <__swrite+0x1e>
 8007818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781c:	2302      	movs	r3, #2
 800781e:	2200      	movs	r2, #0
 8007820:	f000 f840 	bl	80078a4 <_lseek_r>
 8007824:	89a3      	ldrh	r3, [r4, #12]
 8007826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800782a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800782e:	81a3      	strh	r3, [r4, #12]
 8007830:	4632      	mov	r2, r6
 8007832:	463b      	mov	r3, r7
 8007834:	4628      	mov	r0, r5
 8007836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800783a:	f000 b857 	b.w	80078ec <_write_r>

0800783e <__sseek>:
 800783e:	b510      	push	{r4, lr}
 8007840:	460c      	mov	r4, r1
 8007842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007846:	f000 f82d 	bl	80078a4 <_lseek_r>
 800784a:	1c43      	adds	r3, r0, #1
 800784c:	89a3      	ldrh	r3, [r4, #12]
 800784e:	bf15      	itete	ne
 8007850:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007852:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007856:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800785a:	81a3      	strheq	r3, [r4, #12]
 800785c:	bf18      	it	ne
 800785e:	81a3      	strhne	r3, [r4, #12]
 8007860:	bd10      	pop	{r4, pc}

08007862 <__sclose>:
 8007862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007866:	f000 b80d 	b.w	8007884 <_close_r>

0800786a <memset>:
 800786a:	4402      	add	r2, r0
 800786c:	4603      	mov	r3, r0
 800786e:	4293      	cmp	r3, r2
 8007870:	d100      	bne.n	8007874 <memset+0xa>
 8007872:	4770      	bx	lr
 8007874:	f803 1b01 	strb.w	r1, [r3], #1
 8007878:	e7f9      	b.n	800786e <memset+0x4>
	...

0800787c <_localeconv_r>:
 800787c:	4800      	ldr	r0, [pc, #0]	@ (8007880 <_localeconv_r+0x4>)
 800787e:	4770      	bx	lr
 8007880:	2000015c 	.word	0x2000015c

08007884 <_close_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4d06      	ldr	r5, [pc, #24]	@ (80078a0 <_close_r+0x1c>)
 8007888:	2300      	movs	r3, #0
 800788a:	4604      	mov	r4, r0
 800788c:	4608      	mov	r0, r1
 800788e:	602b      	str	r3, [r5, #0]
 8007890:	f7fa fa24 	bl	8001cdc <_close>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_close_r+0x1a>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_close_r+0x1a>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20000438 	.word	0x20000438

080078a4 <_lseek_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d07      	ldr	r5, [pc, #28]	@ (80078c4 <_lseek_r+0x20>)
 80078a8:	4604      	mov	r4, r0
 80078aa:	4608      	mov	r0, r1
 80078ac:	4611      	mov	r1, r2
 80078ae:	2200      	movs	r2, #0
 80078b0:	602a      	str	r2, [r5, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f7fa fa39 	bl	8001d2a <_lseek>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_lseek_r+0x1e>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_lseek_r+0x1e>
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	20000438 	.word	0x20000438

080078c8 <_read_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d07      	ldr	r5, [pc, #28]	@ (80078e8 <_read_r+0x20>)
 80078cc:	4604      	mov	r4, r0
 80078ce:	4608      	mov	r0, r1
 80078d0:	4611      	mov	r1, r2
 80078d2:	2200      	movs	r2, #0
 80078d4:	602a      	str	r2, [r5, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	f7fa f9c7 	bl	8001c6a <_read>
 80078dc:	1c43      	adds	r3, r0, #1
 80078de:	d102      	bne.n	80078e6 <_read_r+0x1e>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	b103      	cbz	r3, 80078e6 <_read_r+0x1e>
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	20000438 	.word	0x20000438

080078ec <_write_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4d07      	ldr	r5, [pc, #28]	@ (800790c <_write_r+0x20>)
 80078f0:	4604      	mov	r4, r0
 80078f2:	4608      	mov	r0, r1
 80078f4:	4611      	mov	r1, r2
 80078f6:	2200      	movs	r2, #0
 80078f8:	602a      	str	r2, [r5, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	f7fa f9d2 	bl	8001ca4 <_write>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_write_r+0x1e>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_write_r+0x1e>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	20000438 	.word	0x20000438

08007910 <__errno>:
 8007910:	4b01      	ldr	r3, [pc, #4]	@ (8007918 <__errno+0x8>)
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	2000001c 	.word	0x2000001c

0800791c <__libc_init_array>:
 800791c:	b570      	push	{r4, r5, r6, lr}
 800791e:	4d0d      	ldr	r5, [pc, #52]	@ (8007954 <__libc_init_array+0x38>)
 8007920:	4c0d      	ldr	r4, [pc, #52]	@ (8007958 <__libc_init_array+0x3c>)
 8007922:	1b64      	subs	r4, r4, r5
 8007924:	10a4      	asrs	r4, r4, #2
 8007926:	2600      	movs	r6, #0
 8007928:	42a6      	cmp	r6, r4
 800792a:	d109      	bne.n	8007940 <__libc_init_array+0x24>
 800792c:	4d0b      	ldr	r5, [pc, #44]	@ (800795c <__libc_init_array+0x40>)
 800792e:	4c0c      	ldr	r4, [pc, #48]	@ (8007960 <__libc_init_array+0x44>)
 8007930:	f002 fe34 	bl	800a59c <_init>
 8007934:	1b64      	subs	r4, r4, r5
 8007936:	10a4      	asrs	r4, r4, #2
 8007938:	2600      	movs	r6, #0
 800793a:	42a6      	cmp	r6, r4
 800793c:	d105      	bne.n	800794a <__libc_init_array+0x2e>
 800793e:	bd70      	pop	{r4, r5, r6, pc}
 8007940:	f855 3b04 	ldr.w	r3, [r5], #4
 8007944:	4798      	blx	r3
 8007946:	3601      	adds	r6, #1
 8007948:	e7ee      	b.n	8007928 <__libc_init_array+0xc>
 800794a:	f855 3b04 	ldr.w	r3, [r5], #4
 800794e:	4798      	blx	r3
 8007950:	3601      	adds	r6, #1
 8007952:	e7f2      	b.n	800793a <__libc_init_array+0x1e>
 8007954:	0800ad7c 	.word	0x0800ad7c
 8007958:	0800ad7c 	.word	0x0800ad7c
 800795c:	0800ad7c 	.word	0x0800ad7c
 8007960:	0800ad80 	.word	0x0800ad80

08007964 <__retarget_lock_init_recursive>:
 8007964:	4770      	bx	lr

08007966 <__retarget_lock_acquire_recursive>:
 8007966:	4770      	bx	lr

08007968 <__retarget_lock_release_recursive>:
 8007968:	4770      	bx	lr

0800796a <quorem>:
 800796a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796e:	6903      	ldr	r3, [r0, #16]
 8007970:	690c      	ldr	r4, [r1, #16]
 8007972:	42a3      	cmp	r3, r4
 8007974:	4607      	mov	r7, r0
 8007976:	db7e      	blt.n	8007a76 <quorem+0x10c>
 8007978:	3c01      	subs	r4, #1
 800797a:	f101 0814 	add.w	r8, r1, #20
 800797e:	00a3      	lsls	r3, r4, #2
 8007980:	f100 0514 	add.w	r5, r0, #20
 8007984:	9300      	str	r3, [sp, #0]
 8007986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800798a:	9301      	str	r3, [sp, #4]
 800798c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007990:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007994:	3301      	adds	r3, #1
 8007996:	429a      	cmp	r2, r3
 8007998:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800799c:	fbb2 f6f3 	udiv	r6, r2, r3
 80079a0:	d32e      	bcc.n	8007a00 <quorem+0x96>
 80079a2:	f04f 0a00 	mov.w	sl, #0
 80079a6:	46c4      	mov	ip, r8
 80079a8:	46ae      	mov	lr, r5
 80079aa:	46d3      	mov	fp, sl
 80079ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079b0:	b298      	uxth	r0, r3
 80079b2:	fb06 a000 	mla	r0, r6, r0, sl
 80079b6:	0c02      	lsrs	r2, r0, #16
 80079b8:	0c1b      	lsrs	r3, r3, #16
 80079ba:	fb06 2303 	mla	r3, r6, r3, r2
 80079be:	f8de 2000 	ldr.w	r2, [lr]
 80079c2:	b280      	uxth	r0, r0
 80079c4:	b292      	uxth	r2, r2
 80079c6:	1a12      	subs	r2, r2, r0
 80079c8:	445a      	add	r2, fp
 80079ca:	f8de 0000 	ldr.w	r0, [lr]
 80079ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079dc:	b292      	uxth	r2, r2
 80079de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079e2:	45e1      	cmp	r9, ip
 80079e4:	f84e 2b04 	str.w	r2, [lr], #4
 80079e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079ec:	d2de      	bcs.n	80079ac <quorem+0x42>
 80079ee:	9b00      	ldr	r3, [sp, #0]
 80079f0:	58eb      	ldr	r3, [r5, r3]
 80079f2:	b92b      	cbnz	r3, 8007a00 <quorem+0x96>
 80079f4:	9b01      	ldr	r3, [sp, #4]
 80079f6:	3b04      	subs	r3, #4
 80079f8:	429d      	cmp	r5, r3
 80079fa:	461a      	mov	r2, r3
 80079fc:	d32f      	bcc.n	8007a5e <quorem+0xf4>
 80079fe:	613c      	str	r4, [r7, #16]
 8007a00:	4638      	mov	r0, r7
 8007a02:	f001 f97f 	bl	8008d04 <__mcmp>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	db25      	blt.n	8007a56 <quorem+0xec>
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a12:	f8d1 c000 	ldr.w	ip, [r1]
 8007a16:	fa1f fe82 	uxth.w	lr, r2
 8007a1a:	fa1f f38c 	uxth.w	r3, ip
 8007a1e:	eba3 030e 	sub.w	r3, r3, lr
 8007a22:	4403      	add	r3, r0
 8007a24:	0c12      	lsrs	r2, r2, #16
 8007a26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a34:	45c1      	cmp	r9, r8
 8007a36:	f841 3b04 	str.w	r3, [r1], #4
 8007a3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a3e:	d2e6      	bcs.n	8007a0e <quorem+0xa4>
 8007a40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a48:	b922      	cbnz	r2, 8007a54 <quorem+0xea>
 8007a4a:	3b04      	subs	r3, #4
 8007a4c:	429d      	cmp	r5, r3
 8007a4e:	461a      	mov	r2, r3
 8007a50:	d30b      	bcc.n	8007a6a <quorem+0x100>
 8007a52:	613c      	str	r4, [r7, #16]
 8007a54:	3601      	adds	r6, #1
 8007a56:	4630      	mov	r0, r6
 8007a58:	b003      	add	sp, #12
 8007a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5e:	6812      	ldr	r2, [r2, #0]
 8007a60:	3b04      	subs	r3, #4
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	d1cb      	bne.n	80079fe <quorem+0x94>
 8007a66:	3c01      	subs	r4, #1
 8007a68:	e7c6      	b.n	80079f8 <quorem+0x8e>
 8007a6a:	6812      	ldr	r2, [r2, #0]
 8007a6c:	3b04      	subs	r3, #4
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	d1ef      	bne.n	8007a52 <quorem+0xe8>
 8007a72:	3c01      	subs	r4, #1
 8007a74:	e7ea      	b.n	8007a4c <quorem+0xe2>
 8007a76:	2000      	movs	r0, #0
 8007a78:	e7ee      	b.n	8007a58 <quorem+0xee>
 8007a7a:	0000      	movs	r0, r0
 8007a7c:	0000      	movs	r0, r0
	...

08007a80 <_dtoa_r>:
 8007a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a84:	69c7      	ldr	r7, [r0, #28]
 8007a86:	b097      	sub	sp, #92	@ 0x5c
 8007a88:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007a8c:	ec55 4b10 	vmov	r4, r5, d0
 8007a90:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007a92:	9107      	str	r1, [sp, #28]
 8007a94:	4681      	mov	r9, r0
 8007a96:	920c      	str	r2, [sp, #48]	@ 0x30
 8007a98:	9311      	str	r3, [sp, #68]	@ 0x44
 8007a9a:	b97f      	cbnz	r7, 8007abc <_dtoa_r+0x3c>
 8007a9c:	2010      	movs	r0, #16
 8007a9e:	f000 fe09 	bl	80086b4 <malloc>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	f8c9 001c 	str.w	r0, [r9, #28]
 8007aa8:	b920      	cbnz	r0, 8007ab4 <_dtoa_r+0x34>
 8007aaa:	4ba9      	ldr	r3, [pc, #676]	@ (8007d50 <_dtoa_r+0x2d0>)
 8007aac:	21ef      	movs	r1, #239	@ 0xef
 8007aae:	48a9      	ldr	r0, [pc, #676]	@ (8007d54 <_dtoa_r+0x2d4>)
 8007ab0:	f001 fc6c 	bl	800938c <__assert_func>
 8007ab4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ab8:	6007      	str	r7, [r0, #0]
 8007aba:	60c7      	str	r7, [r0, #12]
 8007abc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ac0:	6819      	ldr	r1, [r3, #0]
 8007ac2:	b159      	cbz	r1, 8007adc <_dtoa_r+0x5c>
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	604a      	str	r2, [r1, #4]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	4093      	lsls	r3, r2
 8007acc:	608b      	str	r3, [r1, #8]
 8007ace:	4648      	mov	r0, r9
 8007ad0:	f000 fee6 	bl	80088a0 <_Bfree>
 8007ad4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	1e2b      	subs	r3, r5, #0
 8007ade:	bfb9      	ittee	lt
 8007ae0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ae4:	9305      	strlt	r3, [sp, #20]
 8007ae6:	2300      	movge	r3, #0
 8007ae8:	6033      	strge	r3, [r6, #0]
 8007aea:	9f05      	ldr	r7, [sp, #20]
 8007aec:	4b9a      	ldr	r3, [pc, #616]	@ (8007d58 <_dtoa_r+0x2d8>)
 8007aee:	bfbc      	itt	lt
 8007af0:	2201      	movlt	r2, #1
 8007af2:	6032      	strlt	r2, [r6, #0]
 8007af4:	43bb      	bics	r3, r7
 8007af6:	d112      	bne.n	8007b1e <_dtoa_r+0x9e>
 8007af8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007afa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b04:	4323      	orrs	r3, r4
 8007b06:	f000 855a 	beq.w	80085be <_dtoa_r+0xb3e>
 8007b0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b0c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007d6c <_dtoa_r+0x2ec>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 855c 	beq.w	80085ce <_dtoa_r+0xb4e>
 8007b16:	f10a 0303 	add.w	r3, sl, #3
 8007b1a:	f000 bd56 	b.w	80085ca <_dtoa_r+0xb4a>
 8007b1e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007b22:	2200      	movs	r2, #0
 8007b24:	ec51 0b17 	vmov	r0, r1, d7
 8007b28:	2300      	movs	r3, #0
 8007b2a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007b2e:	f7f8 ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b32:	4680      	mov	r8, r0
 8007b34:	b158      	cbz	r0, 8007b4e <_dtoa_r+0xce>
 8007b36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007b38:	2301      	movs	r3, #1
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b3e:	b113      	cbz	r3, 8007b46 <_dtoa_r+0xc6>
 8007b40:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007b42:	4b86      	ldr	r3, [pc, #536]	@ (8007d5c <_dtoa_r+0x2dc>)
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007d70 <_dtoa_r+0x2f0>
 8007b4a:	f000 bd40 	b.w	80085ce <_dtoa_r+0xb4e>
 8007b4e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007b52:	aa14      	add	r2, sp, #80	@ 0x50
 8007b54:	a915      	add	r1, sp, #84	@ 0x54
 8007b56:	4648      	mov	r0, r9
 8007b58:	f001 f984 	bl	8008e64 <__d2b>
 8007b5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007b60:	9002      	str	r0, [sp, #8]
 8007b62:	2e00      	cmp	r6, #0
 8007b64:	d078      	beq.n	8007c58 <_dtoa_r+0x1d8>
 8007b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b68:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007b6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b80:	4619      	mov	r1, r3
 8007b82:	2200      	movs	r2, #0
 8007b84:	4b76      	ldr	r3, [pc, #472]	@ (8007d60 <_dtoa_r+0x2e0>)
 8007b86:	f7f8 fb7f 	bl	8000288 <__aeabi_dsub>
 8007b8a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007d38 <_dtoa_r+0x2b8>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 fd32 	bl	80005f8 <__aeabi_dmul>
 8007b94:	a36a      	add	r3, pc, #424	@ (adr r3, 8007d40 <_dtoa_r+0x2c0>)
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f7f8 fb77 	bl	800028c <__adddf3>
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	460d      	mov	r5, r1
 8007ba4:	f7f8 fcbe 	bl	8000524 <__aeabi_i2d>
 8007ba8:	a367      	add	r3, pc, #412	@ (adr r3, 8007d48 <_dtoa_r+0x2c8>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	f7f8 fd23 	bl	80005f8 <__aeabi_dmul>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	4629      	mov	r1, r5
 8007bba:	f7f8 fb67 	bl	800028c <__adddf3>
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	460d      	mov	r5, r1
 8007bc2:	f7f8 ffc9 	bl	8000b58 <__aeabi_d2iz>
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	4607      	mov	r7, r0
 8007bca:	2300      	movs	r3, #0
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	f7f8 ff84 	bl	8000adc <__aeabi_dcmplt>
 8007bd4:	b140      	cbz	r0, 8007be8 <_dtoa_r+0x168>
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	f7f8 fca4 	bl	8000524 <__aeabi_i2d>
 8007bdc:	4622      	mov	r2, r4
 8007bde:	462b      	mov	r3, r5
 8007be0:	f7f8 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 8007be4:	b900      	cbnz	r0, 8007be8 <_dtoa_r+0x168>
 8007be6:	3f01      	subs	r7, #1
 8007be8:	2f16      	cmp	r7, #22
 8007bea:	d852      	bhi.n	8007c92 <_dtoa_r+0x212>
 8007bec:	4b5d      	ldr	r3, [pc, #372]	@ (8007d64 <_dtoa_r+0x2e4>)
 8007bee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007bfa:	f7f8 ff6f 	bl	8000adc <__aeabi_dcmplt>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d049      	beq.n	8007c96 <_dtoa_r+0x216>
 8007c02:	3f01      	subs	r7, #1
 8007c04:	2300      	movs	r3, #0
 8007c06:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c08:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c0a:	1b9b      	subs	r3, r3, r6
 8007c0c:	1e5a      	subs	r2, r3, #1
 8007c0e:	bf45      	ittet	mi
 8007c10:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c14:	9300      	strmi	r3, [sp, #0]
 8007c16:	2300      	movpl	r3, #0
 8007c18:	2300      	movmi	r3, #0
 8007c1a:	9206      	str	r2, [sp, #24]
 8007c1c:	bf54      	ite	pl
 8007c1e:	9300      	strpl	r3, [sp, #0]
 8007c20:	9306      	strmi	r3, [sp, #24]
 8007c22:	2f00      	cmp	r7, #0
 8007c24:	db39      	blt.n	8007c9a <_dtoa_r+0x21a>
 8007c26:	9b06      	ldr	r3, [sp, #24]
 8007c28:	970d      	str	r7, [sp, #52]	@ 0x34
 8007c2a:	443b      	add	r3, r7
 8007c2c:	9306      	str	r3, [sp, #24]
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9308      	str	r3, [sp, #32]
 8007c32:	9b07      	ldr	r3, [sp, #28]
 8007c34:	2b09      	cmp	r3, #9
 8007c36:	d863      	bhi.n	8007d00 <_dtoa_r+0x280>
 8007c38:	2b05      	cmp	r3, #5
 8007c3a:	bfc4      	itt	gt
 8007c3c:	3b04      	subgt	r3, #4
 8007c3e:	9307      	strgt	r3, [sp, #28]
 8007c40:	9b07      	ldr	r3, [sp, #28]
 8007c42:	f1a3 0302 	sub.w	r3, r3, #2
 8007c46:	bfcc      	ite	gt
 8007c48:	2400      	movgt	r4, #0
 8007c4a:	2401      	movle	r4, #1
 8007c4c:	2b03      	cmp	r3, #3
 8007c4e:	d863      	bhi.n	8007d18 <_dtoa_r+0x298>
 8007c50:	e8df f003 	tbb	[pc, r3]
 8007c54:	2b375452 	.word	0x2b375452
 8007c58:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007c5c:	441e      	add	r6, r3
 8007c5e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	bfc1      	itttt	gt
 8007c66:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c6a:	409f      	lslgt	r7, r3
 8007c6c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c70:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c74:	bfd6      	itet	le
 8007c76:	f1c3 0320 	rsble	r3, r3, #32
 8007c7a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007c7e:	fa04 f003 	lslle.w	r0, r4, r3
 8007c82:	f7f8 fc3f 	bl	8000504 <__aeabi_ui2d>
 8007c86:	2201      	movs	r2, #1
 8007c88:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c8c:	3e01      	subs	r6, #1
 8007c8e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c90:	e776      	b.n	8007b80 <_dtoa_r+0x100>
 8007c92:	2301      	movs	r3, #1
 8007c94:	e7b7      	b.n	8007c06 <_dtoa_r+0x186>
 8007c96:	9010      	str	r0, [sp, #64]	@ 0x40
 8007c98:	e7b6      	b.n	8007c08 <_dtoa_r+0x188>
 8007c9a:	9b00      	ldr	r3, [sp, #0]
 8007c9c:	1bdb      	subs	r3, r3, r7
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	427b      	negs	r3, r7
 8007ca2:	9308      	str	r3, [sp, #32]
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ca8:	e7c3      	b.n	8007c32 <_dtoa_r+0x1b2>
 8007caa:	2301      	movs	r3, #1
 8007cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007cb0:	eb07 0b03 	add.w	fp, r7, r3
 8007cb4:	f10b 0301 	add.w	r3, fp, #1
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	9303      	str	r3, [sp, #12]
 8007cbc:	bfb8      	it	lt
 8007cbe:	2301      	movlt	r3, #1
 8007cc0:	e006      	b.n	8007cd0 <_dtoa_r+0x250>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	dd28      	ble.n	8007d1e <_dtoa_r+0x29e>
 8007ccc:	469b      	mov	fp, r3
 8007cce:	9303      	str	r3, [sp, #12]
 8007cd0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	2204      	movs	r2, #4
 8007cd8:	f102 0514 	add.w	r5, r2, #20
 8007cdc:	429d      	cmp	r5, r3
 8007cde:	d926      	bls.n	8007d2e <_dtoa_r+0x2ae>
 8007ce0:	6041      	str	r1, [r0, #4]
 8007ce2:	4648      	mov	r0, r9
 8007ce4:	f000 fd9c 	bl	8008820 <_Balloc>
 8007ce8:	4682      	mov	sl, r0
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d142      	bne.n	8007d74 <_dtoa_r+0x2f4>
 8007cee:	4b1e      	ldr	r3, [pc, #120]	@ (8007d68 <_dtoa_r+0x2e8>)
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	f240 11af 	movw	r1, #431	@ 0x1af
 8007cf6:	e6da      	b.n	8007aae <_dtoa_r+0x2e>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	e7e3      	b.n	8007cc4 <_dtoa_r+0x244>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	e7d5      	b.n	8007cac <_dtoa_r+0x22c>
 8007d00:	2401      	movs	r4, #1
 8007d02:	2300      	movs	r3, #0
 8007d04:	9307      	str	r3, [sp, #28]
 8007d06:	9409      	str	r4, [sp, #36]	@ 0x24
 8007d08:	f04f 3bff 	mov.w	fp, #4294967295
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007d12:	2312      	movs	r3, #18
 8007d14:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d16:	e7db      	b.n	8007cd0 <_dtoa_r+0x250>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d1c:	e7f4      	b.n	8007d08 <_dtoa_r+0x288>
 8007d1e:	f04f 0b01 	mov.w	fp, #1
 8007d22:	f8cd b00c 	str.w	fp, [sp, #12]
 8007d26:	465b      	mov	r3, fp
 8007d28:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007d2c:	e7d0      	b.n	8007cd0 <_dtoa_r+0x250>
 8007d2e:	3101      	adds	r1, #1
 8007d30:	0052      	lsls	r2, r2, #1
 8007d32:	e7d1      	b.n	8007cd8 <_dtoa_r+0x258>
 8007d34:	f3af 8000 	nop.w
 8007d38:	636f4361 	.word	0x636f4361
 8007d3c:	3fd287a7 	.word	0x3fd287a7
 8007d40:	8b60c8b3 	.word	0x8b60c8b3
 8007d44:	3fc68a28 	.word	0x3fc68a28
 8007d48:	509f79fb 	.word	0x509f79fb
 8007d4c:	3fd34413 	.word	0x3fd34413
 8007d50:	0800a671 	.word	0x0800a671
 8007d54:	0800a688 	.word	0x0800a688
 8007d58:	7ff00000 	.word	0x7ff00000
 8007d5c:	0800a641 	.word	0x0800a641
 8007d60:	3ff80000 	.word	0x3ff80000
 8007d64:	0800a7d8 	.word	0x0800a7d8
 8007d68:	0800a6e0 	.word	0x0800a6e0
 8007d6c:	0800a66d 	.word	0x0800a66d
 8007d70:	0800a640 	.word	0x0800a640
 8007d74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d78:	6018      	str	r0, [r3, #0]
 8007d7a:	9b03      	ldr	r3, [sp, #12]
 8007d7c:	2b0e      	cmp	r3, #14
 8007d7e:	f200 80a1 	bhi.w	8007ec4 <_dtoa_r+0x444>
 8007d82:	2c00      	cmp	r4, #0
 8007d84:	f000 809e 	beq.w	8007ec4 <_dtoa_r+0x444>
 8007d88:	2f00      	cmp	r7, #0
 8007d8a:	dd33      	ble.n	8007df4 <_dtoa_r+0x374>
 8007d8c:	4b9c      	ldr	r3, [pc, #624]	@ (8008000 <_dtoa_r+0x580>)
 8007d8e:	f007 020f 	and.w	r2, r7, #15
 8007d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d96:	ed93 7b00 	vldr	d7, [r3]
 8007d9a:	05f8      	lsls	r0, r7, #23
 8007d9c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007da0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007da4:	d516      	bpl.n	8007dd4 <_dtoa_r+0x354>
 8007da6:	4b97      	ldr	r3, [pc, #604]	@ (8008004 <_dtoa_r+0x584>)
 8007da8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007dac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007db0:	f7f8 fd4c 	bl	800084c <__aeabi_ddiv>
 8007db4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007db8:	f004 040f 	and.w	r4, r4, #15
 8007dbc:	2603      	movs	r6, #3
 8007dbe:	4d91      	ldr	r5, [pc, #580]	@ (8008004 <_dtoa_r+0x584>)
 8007dc0:	b954      	cbnz	r4, 8007dd8 <_dtoa_r+0x358>
 8007dc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007dc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dca:	f7f8 fd3f 	bl	800084c <__aeabi_ddiv>
 8007dce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dd2:	e028      	b.n	8007e26 <_dtoa_r+0x3a6>
 8007dd4:	2602      	movs	r6, #2
 8007dd6:	e7f2      	b.n	8007dbe <_dtoa_r+0x33e>
 8007dd8:	07e1      	lsls	r1, r4, #31
 8007dda:	d508      	bpl.n	8007dee <_dtoa_r+0x36e>
 8007ddc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007de0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007de4:	f7f8 fc08 	bl	80005f8 <__aeabi_dmul>
 8007de8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007dec:	3601      	adds	r6, #1
 8007dee:	1064      	asrs	r4, r4, #1
 8007df0:	3508      	adds	r5, #8
 8007df2:	e7e5      	b.n	8007dc0 <_dtoa_r+0x340>
 8007df4:	f000 80af 	beq.w	8007f56 <_dtoa_r+0x4d6>
 8007df8:	427c      	negs	r4, r7
 8007dfa:	4b81      	ldr	r3, [pc, #516]	@ (8008000 <_dtoa_r+0x580>)
 8007dfc:	4d81      	ldr	r5, [pc, #516]	@ (8008004 <_dtoa_r+0x584>)
 8007dfe:	f004 020f 	and.w	r2, r4, #15
 8007e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007e0e:	f7f8 fbf3 	bl	80005f8 <__aeabi_dmul>
 8007e12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e16:	1124      	asrs	r4, r4, #4
 8007e18:	2300      	movs	r3, #0
 8007e1a:	2602      	movs	r6, #2
 8007e1c:	2c00      	cmp	r4, #0
 8007e1e:	f040 808f 	bne.w	8007f40 <_dtoa_r+0x4c0>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1d3      	bne.n	8007dce <_dtoa_r+0x34e>
 8007e26:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e28:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f000 8094 	beq.w	8007f5a <_dtoa_r+0x4da>
 8007e32:	4b75      	ldr	r3, [pc, #468]	@ (8008008 <_dtoa_r+0x588>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	4620      	mov	r0, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7f8 fe4f 	bl	8000adc <__aeabi_dcmplt>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f000 808b 	beq.w	8007f5a <_dtoa_r+0x4da>
 8007e44:	9b03      	ldr	r3, [sp, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 8087 	beq.w	8007f5a <_dtoa_r+0x4da>
 8007e4c:	f1bb 0f00 	cmp.w	fp, #0
 8007e50:	dd34      	ble.n	8007ebc <_dtoa_r+0x43c>
 8007e52:	4620      	mov	r0, r4
 8007e54:	4b6d      	ldr	r3, [pc, #436]	@ (800800c <_dtoa_r+0x58c>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7f8 fbcd 	bl	80005f8 <__aeabi_dmul>
 8007e5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e62:	f107 38ff 	add.w	r8, r7, #4294967295
 8007e66:	3601      	adds	r6, #1
 8007e68:	465c      	mov	r4, fp
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7f8 fb5a 	bl	8000524 <__aeabi_i2d>
 8007e70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
 8007e78:	4b65      	ldr	r3, [pc, #404]	@ (8008010 <_dtoa_r+0x590>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f7f8 fa06 	bl	800028c <__adddf3>
 8007e80:	4605      	mov	r5, r0
 8007e82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e86:	2c00      	cmp	r4, #0
 8007e88:	d16a      	bne.n	8007f60 <_dtoa_r+0x4e0>
 8007e8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e8e:	4b61      	ldr	r3, [pc, #388]	@ (8008014 <_dtoa_r+0x594>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	f7f8 f9f9 	bl	8000288 <__aeabi_dsub>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e9e:	462a      	mov	r2, r5
 8007ea0:	4633      	mov	r3, r6
 8007ea2:	f7f8 fe39 	bl	8000b18 <__aeabi_dcmpgt>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	f040 8298 	bne.w	80083dc <_dtoa_r+0x95c>
 8007eac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eb0:	462a      	mov	r2, r5
 8007eb2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007eb6:	f7f8 fe11 	bl	8000adc <__aeabi_dcmplt>
 8007eba:	bb38      	cbnz	r0, 8007f0c <_dtoa_r+0x48c>
 8007ebc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007ec0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ec4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f2c0 8157 	blt.w	800817a <_dtoa_r+0x6fa>
 8007ecc:	2f0e      	cmp	r7, #14
 8007ece:	f300 8154 	bgt.w	800817a <_dtoa_r+0x6fa>
 8007ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8008000 <_dtoa_r+0x580>)
 8007ed4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ed8:	ed93 7b00 	vldr	d7, [r3]
 8007edc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	ed8d 7b00 	vstr	d7, [sp]
 8007ee4:	f280 80e5 	bge.w	80080b2 <_dtoa_r+0x632>
 8007ee8:	9b03      	ldr	r3, [sp, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f300 80e1 	bgt.w	80080b2 <_dtoa_r+0x632>
 8007ef0:	d10c      	bne.n	8007f0c <_dtoa_r+0x48c>
 8007ef2:	4b48      	ldr	r3, [pc, #288]	@ (8008014 <_dtoa_r+0x594>)
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	ec51 0b17 	vmov	r0, r1, d7
 8007efa:	f7f8 fb7d 	bl	80005f8 <__aeabi_dmul>
 8007efe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f02:	f7f8 fdff 	bl	8000b04 <__aeabi_dcmpge>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f000 8266 	beq.w	80083d8 <_dtoa_r+0x958>
 8007f0c:	2400      	movs	r4, #0
 8007f0e:	4625      	mov	r5, r4
 8007f10:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f12:	4656      	mov	r6, sl
 8007f14:	ea6f 0803 	mvn.w	r8, r3
 8007f18:	2700      	movs	r7, #0
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	4648      	mov	r0, r9
 8007f1e:	f000 fcbf 	bl	80088a0 <_Bfree>
 8007f22:	2d00      	cmp	r5, #0
 8007f24:	f000 80bd 	beq.w	80080a2 <_dtoa_r+0x622>
 8007f28:	b12f      	cbz	r7, 8007f36 <_dtoa_r+0x4b6>
 8007f2a:	42af      	cmp	r7, r5
 8007f2c:	d003      	beq.n	8007f36 <_dtoa_r+0x4b6>
 8007f2e:	4639      	mov	r1, r7
 8007f30:	4648      	mov	r0, r9
 8007f32:	f000 fcb5 	bl	80088a0 <_Bfree>
 8007f36:	4629      	mov	r1, r5
 8007f38:	4648      	mov	r0, r9
 8007f3a:	f000 fcb1 	bl	80088a0 <_Bfree>
 8007f3e:	e0b0      	b.n	80080a2 <_dtoa_r+0x622>
 8007f40:	07e2      	lsls	r2, r4, #31
 8007f42:	d505      	bpl.n	8007f50 <_dtoa_r+0x4d0>
 8007f44:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f48:	f7f8 fb56 	bl	80005f8 <__aeabi_dmul>
 8007f4c:	3601      	adds	r6, #1
 8007f4e:	2301      	movs	r3, #1
 8007f50:	1064      	asrs	r4, r4, #1
 8007f52:	3508      	adds	r5, #8
 8007f54:	e762      	b.n	8007e1c <_dtoa_r+0x39c>
 8007f56:	2602      	movs	r6, #2
 8007f58:	e765      	b.n	8007e26 <_dtoa_r+0x3a6>
 8007f5a:	9c03      	ldr	r4, [sp, #12]
 8007f5c:	46b8      	mov	r8, r7
 8007f5e:	e784      	b.n	8007e6a <_dtoa_r+0x3ea>
 8007f60:	4b27      	ldr	r3, [pc, #156]	@ (8008000 <_dtoa_r+0x580>)
 8007f62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f64:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f68:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f6c:	4454      	add	r4, sl
 8007f6e:	2900      	cmp	r1, #0
 8007f70:	d054      	beq.n	800801c <_dtoa_r+0x59c>
 8007f72:	4929      	ldr	r1, [pc, #164]	@ (8008018 <_dtoa_r+0x598>)
 8007f74:	2000      	movs	r0, #0
 8007f76:	f7f8 fc69 	bl	800084c <__aeabi_ddiv>
 8007f7a:	4633      	mov	r3, r6
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	f7f8 f983 	bl	8000288 <__aeabi_dsub>
 8007f82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f86:	4656      	mov	r6, sl
 8007f88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f8c:	f7f8 fde4 	bl	8000b58 <__aeabi_d2iz>
 8007f90:	4605      	mov	r5, r0
 8007f92:	f7f8 fac7 	bl	8000524 <__aeabi_i2d>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f9e:	f7f8 f973 	bl	8000288 <__aeabi_dsub>
 8007fa2:	3530      	adds	r5, #48	@ 0x30
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fac:	f806 5b01 	strb.w	r5, [r6], #1
 8007fb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007fb4:	f7f8 fd92 	bl	8000adc <__aeabi_dcmplt>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d172      	bne.n	80080a2 <_dtoa_r+0x622>
 8007fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fc0:	4911      	ldr	r1, [pc, #68]	@ (8008008 <_dtoa_r+0x588>)
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	f7f8 f960 	bl	8000288 <__aeabi_dsub>
 8007fc8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007fcc:	f7f8 fd86 	bl	8000adc <__aeabi_dcmplt>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	f040 80b4 	bne.w	800813e <_dtoa_r+0x6be>
 8007fd6:	42a6      	cmp	r6, r4
 8007fd8:	f43f af70 	beq.w	8007ebc <_dtoa_r+0x43c>
 8007fdc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800800c <_dtoa_r+0x58c>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f7f8 fb08 	bl	80005f8 <__aeabi_dmul>
 8007fe8:	4b08      	ldr	r3, [pc, #32]	@ (800800c <_dtoa_r+0x58c>)
 8007fea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007fee:	2200      	movs	r2, #0
 8007ff0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ff4:	f7f8 fb00 	bl	80005f8 <__aeabi_dmul>
 8007ff8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ffc:	e7c4      	b.n	8007f88 <_dtoa_r+0x508>
 8007ffe:	bf00      	nop
 8008000:	0800a7d8 	.word	0x0800a7d8
 8008004:	0800a7b0 	.word	0x0800a7b0
 8008008:	3ff00000 	.word	0x3ff00000
 800800c:	40240000 	.word	0x40240000
 8008010:	401c0000 	.word	0x401c0000
 8008014:	40140000 	.word	0x40140000
 8008018:	3fe00000 	.word	0x3fe00000
 800801c:	4631      	mov	r1, r6
 800801e:	4628      	mov	r0, r5
 8008020:	f7f8 faea 	bl	80005f8 <__aeabi_dmul>
 8008024:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008028:	9413      	str	r4, [sp, #76]	@ 0x4c
 800802a:	4656      	mov	r6, sl
 800802c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008030:	f7f8 fd92 	bl	8000b58 <__aeabi_d2iz>
 8008034:	4605      	mov	r5, r0
 8008036:	f7f8 fa75 	bl	8000524 <__aeabi_i2d>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008042:	f7f8 f921 	bl	8000288 <__aeabi_dsub>
 8008046:	3530      	adds	r5, #48	@ 0x30
 8008048:	f806 5b01 	strb.w	r5, [r6], #1
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	42a6      	cmp	r6, r4
 8008052:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008056:	f04f 0200 	mov.w	r2, #0
 800805a:	d124      	bne.n	80080a6 <_dtoa_r+0x626>
 800805c:	4baf      	ldr	r3, [pc, #700]	@ (800831c <_dtoa_r+0x89c>)
 800805e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008062:	f7f8 f913 	bl	800028c <__adddf3>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800806e:	f7f8 fd53 	bl	8000b18 <__aeabi_dcmpgt>
 8008072:	2800      	cmp	r0, #0
 8008074:	d163      	bne.n	800813e <_dtoa_r+0x6be>
 8008076:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800807a:	49a8      	ldr	r1, [pc, #672]	@ (800831c <_dtoa_r+0x89c>)
 800807c:	2000      	movs	r0, #0
 800807e:	f7f8 f903 	bl	8000288 <__aeabi_dsub>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800808a:	f7f8 fd27 	bl	8000adc <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	f43f af14 	beq.w	8007ebc <_dtoa_r+0x43c>
 8008094:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008096:	1e73      	subs	r3, r6, #1
 8008098:	9313      	str	r3, [sp, #76]	@ 0x4c
 800809a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800809e:	2b30      	cmp	r3, #48	@ 0x30
 80080a0:	d0f8      	beq.n	8008094 <_dtoa_r+0x614>
 80080a2:	4647      	mov	r7, r8
 80080a4:	e03b      	b.n	800811e <_dtoa_r+0x69e>
 80080a6:	4b9e      	ldr	r3, [pc, #632]	@ (8008320 <_dtoa_r+0x8a0>)
 80080a8:	f7f8 faa6 	bl	80005f8 <__aeabi_dmul>
 80080ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80080b0:	e7bc      	b.n	800802c <_dtoa_r+0x5ac>
 80080b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80080b6:	4656      	mov	r6, sl
 80080b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080bc:	4620      	mov	r0, r4
 80080be:	4629      	mov	r1, r5
 80080c0:	f7f8 fbc4 	bl	800084c <__aeabi_ddiv>
 80080c4:	f7f8 fd48 	bl	8000b58 <__aeabi_d2iz>
 80080c8:	4680      	mov	r8, r0
 80080ca:	f7f8 fa2b 	bl	8000524 <__aeabi_i2d>
 80080ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080d2:	f7f8 fa91 	bl	80005f8 <__aeabi_dmul>
 80080d6:	4602      	mov	r2, r0
 80080d8:	460b      	mov	r3, r1
 80080da:	4620      	mov	r0, r4
 80080dc:	4629      	mov	r1, r5
 80080de:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80080e2:	f7f8 f8d1 	bl	8000288 <__aeabi_dsub>
 80080e6:	f806 4b01 	strb.w	r4, [r6], #1
 80080ea:	9d03      	ldr	r5, [sp, #12]
 80080ec:	eba6 040a 	sub.w	r4, r6, sl
 80080f0:	42a5      	cmp	r5, r4
 80080f2:	4602      	mov	r2, r0
 80080f4:	460b      	mov	r3, r1
 80080f6:	d133      	bne.n	8008160 <_dtoa_r+0x6e0>
 80080f8:	f7f8 f8c8 	bl	800028c <__adddf3>
 80080fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008100:	4604      	mov	r4, r0
 8008102:	460d      	mov	r5, r1
 8008104:	f7f8 fd08 	bl	8000b18 <__aeabi_dcmpgt>
 8008108:	b9c0      	cbnz	r0, 800813c <_dtoa_r+0x6bc>
 800810a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800810e:	4620      	mov	r0, r4
 8008110:	4629      	mov	r1, r5
 8008112:	f7f8 fcd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008116:	b110      	cbz	r0, 800811e <_dtoa_r+0x69e>
 8008118:	f018 0f01 	tst.w	r8, #1
 800811c:	d10e      	bne.n	800813c <_dtoa_r+0x6bc>
 800811e:	9902      	ldr	r1, [sp, #8]
 8008120:	4648      	mov	r0, r9
 8008122:	f000 fbbd 	bl	80088a0 <_Bfree>
 8008126:	2300      	movs	r3, #0
 8008128:	7033      	strb	r3, [r6, #0]
 800812a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800812c:	3701      	adds	r7, #1
 800812e:	601f      	str	r7, [r3, #0]
 8008130:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 824b 	beq.w	80085ce <_dtoa_r+0xb4e>
 8008138:	601e      	str	r6, [r3, #0]
 800813a:	e248      	b.n	80085ce <_dtoa_r+0xb4e>
 800813c:	46b8      	mov	r8, r7
 800813e:	4633      	mov	r3, r6
 8008140:	461e      	mov	r6, r3
 8008142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008146:	2a39      	cmp	r2, #57	@ 0x39
 8008148:	d106      	bne.n	8008158 <_dtoa_r+0x6d8>
 800814a:	459a      	cmp	sl, r3
 800814c:	d1f8      	bne.n	8008140 <_dtoa_r+0x6c0>
 800814e:	2230      	movs	r2, #48	@ 0x30
 8008150:	f108 0801 	add.w	r8, r8, #1
 8008154:	f88a 2000 	strb.w	r2, [sl]
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	3201      	adds	r2, #1
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	e7a0      	b.n	80080a2 <_dtoa_r+0x622>
 8008160:	4b6f      	ldr	r3, [pc, #444]	@ (8008320 <_dtoa_r+0x8a0>)
 8008162:	2200      	movs	r2, #0
 8008164:	f7f8 fa48 	bl	80005f8 <__aeabi_dmul>
 8008168:	2200      	movs	r2, #0
 800816a:	2300      	movs	r3, #0
 800816c:	4604      	mov	r4, r0
 800816e:	460d      	mov	r5, r1
 8008170:	f7f8 fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008174:	2800      	cmp	r0, #0
 8008176:	d09f      	beq.n	80080b8 <_dtoa_r+0x638>
 8008178:	e7d1      	b.n	800811e <_dtoa_r+0x69e>
 800817a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800817c:	2a00      	cmp	r2, #0
 800817e:	f000 80ea 	beq.w	8008356 <_dtoa_r+0x8d6>
 8008182:	9a07      	ldr	r2, [sp, #28]
 8008184:	2a01      	cmp	r2, #1
 8008186:	f300 80cd 	bgt.w	8008324 <_dtoa_r+0x8a4>
 800818a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800818c:	2a00      	cmp	r2, #0
 800818e:	f000 80c1 	beq.w	8008314 <_dtoa_r+0x894>
 8008192:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008196:	9c08      	ldr	r4, [sp, #32]
 8008198:	9e00      	ldr	r6, [sp, #0]
 800819a:	9a00      	ldr	r2, [sp, #0]
 800819c:	441a      	add	r2, r3
 800819e:	9200      	str	r2, [sp, #0]
 80081a0:	9a06      	ldr	r2, [sp, #24]
 80081a2:	2101      	movs	r1, #1
 80081a4:	441a      	add	r2, r3
 80081a6:	4648      	mov	r0, r9
 80081a8:	9206      	str	r2, [sp, #24]
 80081aa:	f000 fc2d 	bl	8008a08 <__i2b>
 80081ae:	4605      	mov	r5, r0
 80081b0:	b166      	cbz	r6, 80081cc <_dtoa_r+0x74c>
 80081b2:	9b06      	ldr	r3, [sp, #24]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	dd09      	ble.n	80081cc <_dtoa_r+0x74c>
 80081b8:	42b3      	cmp	r3, r6
 80081ba:	9a00      	ldr	r2, [sp, #0]
 80081bc:	bfa8      	it	ge
 80081be:	4633      	movge	r3, r6
 80081c0:	1ad2      	subs	r2, r2, r3
 80081c2:	9200      	str	r2, [sp, #0]
 80081c4:	9a06      	ldr	r2, [sp, #24]
 80081c6:	1af6      	subs	r6, r6, r3
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	9306      	str	r3, [sp, #24]
 80081cc:	9b08      	ldr	r3, [sp, #32]
 80081ce:	b30b      	cbz	r3, 8008214 <_dtoa_r+0x794>
 80081d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 80c6 	beq.w	8008364 <_dtoa_r+0x8e4>
 80081d8:	2c00      	cmp	r4, #0
 80081da:	f000 80c0 	beq.w	800835e <_dtoa_r+0x8de>
 80081de:	4629      	mov	r1, r5
 80081e0:	4622      	mov	r2, r4
 80081e2:	4648      	mov	r0, r9
 80081e4:	f000 fcc8 	bl	8008b78 <__pow5mult>
 80081e8:	9a02      	ldr	r2, [sp, #8]
 80081ea:	4601      	mov	r1, r0
 80081ec:	4605      	mov	r5, r0
 80081ee:	4648      	mov	r0, r9
 80081f0:	f000 fc20 	bl	8008a34 <__multiply>
 80081f4:	9902      	ldr	r1, [sp, #8]
 80081f6:	4680      	mov	r8, r0
 80081f8:	4648      	mov	r0, r9
 80081fa:	f000 fb51 	bl	80088a0 <_Bfree>
 80081fe:	9b08      	ldr	r3, [sp, #32]
 8008200:	1b1b      	subs	r3, r3, r4
 8008202:	9308      	str	r3, [sp, #32]
 8008204:	f000 80b1 	beq.w	800836a <_dtoa_r+0x8ea>
 8008208:	9a08      	ldr	r2, [sp, #32]
 800820a:	4641      	mov	r1, r8
 800820c:	4648      	mov	r0, r9
 800820e:	f000 fcb3 	bl	8008b78 <__pow5mult>
 8008212:	9002      	str	r0, [sp, #8]
 8008214:	2101      	movs	r1, #1
 8008216:	4648      	mov	r0, r9
 8008218:	f000 fbf6 	bl	8008a08 <__i2b>
 800821c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800821e:	4604      	mov	r4, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 81d8 	beq.w	80085d6 <_dtoa_r+0xb56>
 8008226:	461a      	mov	r2, r3
 8008228:	4601      	mov	r1, r0
 800822a:	4648      	mov	r0, r9
 800822c:	f000 fca4 	bl	8008b78 <__pow5mult>
 8008230:	9b07      	ldr	r3, [sp, #28]
 8008232:	2b01      	cmp	r3, #1
 8008234:	4604      	mov	r4, r0
 8008236:	f300 809f 	bgt.w	8008378 <_dtoa_r+0x8f8>
 800823a:	9b04      	ldr	r3, [sp, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	f040 8097 	bne.w	8008370 <_dtoa_r+0x8f0>
 8008242:	9b05      	ldr	r3, [sp, #20]
 8008244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008248:	2b00      	cmp	r3, #0
 800824a:	f040 8093 	bne.w	8008374 <_dtoa_r+0x8f4>
 800824e:	9b05      	ldr	r3, [sp, #20]
 8008250:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008254:	0d1b      	lsrs	r3, r3, #20
 8008256:	051b      	lsls	r3, r3, #20
 8008258:	b133      	cbz	r3, 8008268 <_dtoa_r+0x7e8>
 800825a:	9b00      	ldr	r3, [sp, #0]
 800825c:	3301      	adds	r3, #1
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	9b06      	ldr	r3, [sp, #24]
 8008262:	3301      	adds	r3, #1
 8008264:	9306      	str	r3, [sp, #24]
 8008266:	2301      	movs	r3, #1
 8008268:	9308      	str	r3, [sp, #32]
 800826a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800826c:	2b00      	cmp	r3, #0
 800826e:	f000 81b8 	beq.w	80085e2 <_dtoa_r+0xb62>
 8008272:	6923      	ldr	r3, [r4, #16]
 8008274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008278:	6918      	ldr	r0, [r3, #16]
 800827a:	f000 fb79 	bl	8008970 <__hi0bits>
 800827e:	f1c0 0020 	rsb	r0, r0, #32
 8008282:	9b06      	ldr	r3, [sp, #24]
 8008284:	4418      	add	r0, r3
 8008286:	f010 001f 	ands.w	r0, r0, #31
 800828a:	f000 8082 	beq.w	8008392 <_dtoa_r+0x912>
 800828e:	f1c0 0320 	rsb	r3, r0, #32
 8008292:	2b04      	cmp	r3, #4
 8008294:	dd73      	ble.n	800837e <_dtoa_r+0x8fe>
 8008296:	9b00      	ldr	r3, [sp, #0]
 8008298:	f1c0 001c 	rsb	r0, r0, #28
 800829c:	4403      	add	r3, r0
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	9b06      	ldr	r3, [sp, #24]
 80082a2:	4403      	add	r3, r0
 80082a4:	4406      	add	r6, r0
 80082a6:	9306      	str	r3, [sp, #24]
 80082a8:	9b00      	ldr	r3, [sp, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dd05      	ble.n	80082ba <_dtoa_r+0x83a>
 80082ae:	9902      	ldr	r1, [sp, #8]
 80082b0:	461a      	mov	r2, r3
 80082b2:	4648      	mov	r0, r9
 80082b4:	f000 fcba 	bl	8008c2c <__lshift>
 80082b8:	9002      	str	r0, [sp, #8]
 80082ba:	9b06      	ldr	r3, [sp, #24]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	dd05      	ble.n	80082cc <_dtoa_r+0x84c>
 80082c0:	4621      	mov	r1, r4
 80082c2:	461a      	mov	r2, r3
 80082c4:	4648      	mov	r0, r9
 80082c6:	f000 fcb1 	bl	8008c2c <__lshift>
 80082ca:	4604      	mov	r4, r0
 80082cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d061      	beq.n	8008396 <_dtoa_r+0x916>
 80082d2:	9802      	ldr	r0, [sp, #8]
 80082d4:	4621      	mov	r1, r4
 80082d6:	f000 fd15 	bl	8008d04 <__mcmp>
 80082da:	2800      	cmp	r0, #0
 80082dc:	da5b      	bge.n	8008396 <_dtoa_r+0x916>
 80082de:	2300      	movs	r3, #0
 80082e0:	9902      	ldr	r1, [sp, #8]
 80082e2:	220a      	movs	r2, #10
 80082e4:	4648      	mov	r0, r9
 80082e6:	f000 fafd 	bl	80088e4 <__multadd>
 80082ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ec:	9002      	str	r0, [sp, #8]
 80082ee:	f107 38ff 	add.w	r8, r7, #4294967295
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f000 8177 	beq.w	80085e6 <_dtoa_r+0xb66>
 80082f8:	4629      	mov	r1, r5
 80082fa:	2300      	movs	r3, #0
 80082fc:	220a      	movs	r2, #10
 80082fe:	4648      	mov	r0, r9
 8008300:	f000 faf0 	bl	80088e4 <__multadd>
 8008304:	f1bb 0f00 	cmp.w	fp, #0
 8008308:	4605      	mov	r5, r0
 800830a:	dc6f      	bgt.n	80083ec <_dtoa_r+0x96c>
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	2b02      	cmp	r3, #2
 8008310:	dc49      	bgt.n	80083a6 <_dtoa_r+0x926>
 8008312:	e06b      	b.n	80083ec <_dtoa_r+0x96c>
 8008314:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008316:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800831a:	e73c      	b.n	8008196 <_dtoa_r+0x716>
 800831c:	3fe00000 	.word	0x3fe00000
 8008320:	40240000 	.word	0x40240000
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	1e5c      	subs	r4, r3, #1
 8008328:	9b08      	ldr	r3, [sp, #32]
 800832a:	42a3      	cmp	r3, r4
 800832c:	db09      	blt.n	8008342 <_dtoa_r+0x8c2>
 800832e:	1b1c      	subs	r4, r3, r4
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f6bf af30 	bge.w	8008198 <_dtoa_r+0x718>
 8008338:	9b00      	ldr	r3, [sp, #0]
 800833a:	9a03      	ldr	r2, [sp, #12]
 800833c:	1a9e      	subs	r6, r3, r2
 800833e:	2300      	movs	r3, #0
 8008340:	e72b      	b.n	800819a <_dtoa_r+0x71a>
 8008342:	9b08      	ldr	r3, [sp, #32]
 8008344:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008346:	9408      	str	r4, [sp, #32]
 8008348:	1ae3      	subs	r3, r4, r3
 800834a:	441a      	add	r2, r3
 800834c:	9e00      	ldr	r6, [sp, #0]
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	920d      	str	r2, [sp, #52]	@ 0x34
 8008352:	2400      	movs	r4, #0
 8008354:	e721      	b.n	800819a <_dtoa_r+0x71a>
 8008356:	9c08      	ldr	r4, [sp, #32]
 8008358:	9e00      	ldr	r6, [sp, #0]
 800835a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800835c:	e728      	b.n	80081b0 <_dtoa_r+0x730>
 800835e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008362:	e751      	b.n	8008208 <_dtoa_r+0x788>
 8008364:	9a08      	ldr	r2, [sp, #32]
 8008366:	9902      	ldr	r1, [sp, #8]
 8008368:	e750      	b.n	800820c <_dtoa_r+0x78c>
 800836a:	f8cd 8008 	str.w	r8, [sp, #8]
 800836e:	e751      	b.n	8008214 <_dtoa_r+0x794>
 8008370:	2300      	movs	r3, #0
 8008372:	e779      	b.n	8008268 <_dtoa_r+0x7e8>
 8008374:	9b04      	ldr	r3, [sp, #16]
 8008376:	e777      	b.n	8008268 <_dtoa_r+0x7e8>
 8008378:	2300      	movs	r3, #0
 800837a:	9308      	str	r3, [sp, #32]
 800837c:	e779      	b.n	8008272 <_dtoa_r+0x7f2>
 800837e:	d093      	beq.n	80082a8 <_dtoa_r+0x828>
 8008380:	9a00      	ldr	r2, [sp, #0]
 8008382:	331c      	adds	r3, #28
 8008384:	441a      	add	r2, r3
 8008386:	9200      	str	r2, [sp, #0]
 8008388:	9a06      	ldr	r2, [sp, #24]
 800838a:	441a      	add	r2, r3
 800838c:	441e      	add	r6, r3
 800838e:	9206      	str	r2, [sp, #24]
 8008390:	e78a      	b.n	80082a8 <_dtoa_r+0x828>
 8008392:	4603      	mov	r3, r0
 8008394:	e7f4      	b.n	8008380 <_dtoa_r+0x900>
 8008396:	9b03      	ldr	r3, [sp, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	46b8      	mov	r8, r7
 800839c:	dc20      	bgt.n	80083e0 <_dtoa_r+0x960>
 800839e:	469b      	mov	fp, r3
 80083a0:	9b07      	ldr	r3, [sp, #28]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	dd1e      	ble.n	80083e4 <_dtoa_r+0x964>
 80083a6:	f1bb 0f00 	cmp.w	fp, #0
 80083aa:	f47f adb1 	bne.w	8007f10 <_dtoa_r+0x490>
 80083ae:	4621      	mov	r1, r4
 80083b0:	465b      	mov	r3, fp
 80083b2:	2205      	movs	r2, #5
 80083b4:	4648      	mov	r0, r9
 80083b6:	f000 fa95 	bl	80088e4 <__multadd>
 80083ba:	4601      	mov	r1, r0
 80083bc:	4604      	mov	r4, r0
 80083be:	9802      	ldr	r0, [sp, #8]
 80083c0:	f000 fca0 	bl	8008d04 <__mcmp>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	f77f ada3 	ble.w	8007f10 <_dtoa_r+0x490>
 80083ca:	4656      	mov	r6, sl
 80083cc:	2331      	movs	r3, #49	@ 0x31
 80083ce:	f806 3b01 	strb.w	r3, [r6], #1
 80083d2:	f108 0801 	add.w	r8, r8, #1
 80083d6:	e59f      	b.n	8007f18 <_dtoa_r+0x498>
 80083d8:	9c03      	ldr	r4, [sp, #12]
 80083da:	46b8      	mov	r8, r7
 80083dc:	4625      	mov	r5, r4
 80083de:	e7f4      	b.n	80083ca <_dtoa_r+0x94a>
 80083e0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80083e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 8101 	beq.w	80085ee <_dtoa_r+0xb6e>
 80083ec:	2e00      	cmp	r6, #0
 80083ee:	dd05      	ble.n	80083fc <_dtoa_r+0x97c>
 80083f0:	4629      	mov	r1, r5
 80083f2:	4632      	mov	r2, r6
 80083f4:	4648      	mov	r0, r9
 80083f6:	f000 fc19 	bl	8008c2c <__lshift>
 80083fa:	4605      	mov	r5, r0
 80083fc:	9b08      	ldr	r3, [sp, #32]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d05c      	beq.n	80084bc <_dtoa_r+0xa3c>
 8008402:	6869      	ldr	r1, [r5, #4]
 8008404:	4648      	mov	r0, r9
 8008406:	f000 fa0b 	bl	8008820 <_Balloc>
 800840a:	4606      	mov	r6, r0
 800840c:	b928      	cbnz	r0, 800841a <_dtoa_r+0x99a>
 800840e:	4b82      	ldr	r3, [pc, #520]	@ (8008618 <_dtoa_r+0xb98>)
 8008410:	4602      	mov	r2, r0
 8008412:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008416:	f7ff bb4a 	b.w	8007aae <_dtoa_r+0x2e>
 800841a:	692a      	ldr	r2, [r5, #16]
 800841c:	3202      	adds	r2, #2
 800841e:	0092      	lsls	r2, r2, #2
 8008420:	f105 010c 	add.w	r1, r5, #12
 8008424:	300c      	adds	r0, #12
 8008426:	f000 ffa3 	bl	8009370 <memcpy>
 800842a:	2201      	movs	r2, #1
 800842c:	4631      	mov	r1, r6
 800842e:	4648      	mov	r0, r9
 8008430:	f000 fbfc 	bl	8008c2c <__lshift>
 8008434:	f10a 0301 	add.w	r3, sl, #1
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	eb0a 030b 	add.w	r3, sl, fp
 800843e:	9308      	str	r3, [sp, #32]
 8008440:	9b04      	ldr	r3, [sp, #16]
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	462f      	mov	r7, r5
 8008448:	9306      	str	r3, [sp, #24]
 800844a:	4605      	mov	r5, r0
 800844c:	9b00      	ldr	r3, [sp, #0]
 800844e:	9802      	ldr	r0, [sp, #8]
 8008450:	4621      	mov	r1, r4
 8008452:	f103 3bff 	add.w	fp, r3, #4294967295
 8008456:	f7ff fa88 	bl	800796a <quorem>
 800845a:	4603      	mov	r3, r0
 800845c:	3330      	adds	r3, #48	@ 0x30
 800845e:	9003      	str	r0, [sp, #12]
 8008460:	4639      	mov	r1, r7
 8008462:	9802      	ldr	r0, [sp, #8]
 8008464:	9309      	str	r3, [sp, #36]	@ 0x24
 8008466:	f000 fc4d 	bl	8008d04 <__mcmp>
 800846a:	462a      	mov	r2, r5
 800846c:	9004      	str	r0, [sp, #16]
 800846e:	4621      	mov	r1, r4
 8008470:	4648      	mov	r0, r9
 8008472:	f000 fc63 	bl	8008d3c <__mdiff>
 8008476:	68c2      	ldr	r2, [r0, #12]
 8008478:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800847a:	4606      	mov	r6, r0
 800847c:	bb02      	cbnz	r2, 80084c0 <_dtoa_r+0xa40>
 800847e:	4601      	mov	r1, r0
 8008480:	9802      	ldr	r0, [sp, #8]
 8008482:	f000 fc3f 	bl	8008d04 <__mcmp>
 8008486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008488:	4602      	mov	r2, r0
 800848a:	4631      	mov	r1, r6
 800848c:	4648      	mov	r0, r9
 800848e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008490:	9309      	str	r3, [sp, #36]	@ 0x24
 8008492:	f000 fa05 	bl	80088a0 <_Bfree>
 8008496:	9b07      	ldr	r3, [sp, #28]
 8008498:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800849a:	9e00      	ldr	r6, [sp, #0]
 800849c:	ea42 0103 	orr.w	r1, r2, r3
 80084a0:	9b06      	ldr	r3, [sp, #24]
 80084a2:	4319      	orrs	r1, r3
 80084a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a6:	d10d      	bne.n	80084c4 <_dtoa_r+0xa44>
 80084a8:	2b39      	cmp	r3, #57	@ 0x39
 80084aa:	d027      	beq.n	80084fc <_dtoa_r+0xa7c>
 80084ac:	9a04      	ldr	r2, [sp, #16]
 80084ae:	2a00      	cmp	r2, #0
 80084b0:	dd01      	ble.n	80084b6 <_dtoa_r+0xa36>
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	3331      	adds	r3, #49	@ 0x31
 80084b6:	f88b 3000 	strb.w	r3, [fp]
 80084ba:	e52e      	b.n	8007f1a <_dtoa_r+0x49a>
 80084bc:	4628      	mov	r0, r5
 80084be:	e7b9      	b.n	8008434 <_dtoa_r+0x9b4>
 80084c0:	2201      	movs	r2, #1
 80084c2:	e7e2      	b.n	800848a <_dtoa_r+0xa0a>
 80084c4:	9904      	ldr	r1, [sp, #16]
 80084c6:	2900      	cmp	r1, #0
 80084c8:	db04      	blt.n	80084d4 <_dtoa_r+0xa54>
 80084ca:	9807      	ldr	r0, [sp, #28]
 80084cc:	4301      	orrs	r1, r0
 80084ce:	9806      	ldr	r0, [sp, #24]
 80084d0:	4301      	orrs	r1, r0
 80084d2:	d120      	bne.n	8008516 <_dtoa_r+0xa96>
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	ddee      	ble.n	80084b6 <_dtoa_r+0xa36>
 80084d8:	9902      	ldr	r1, [sp, #8]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	2201      	movs	r2, #1
 80084de:	4648      	mov	r0, r9
 80084e0:	f000 fba4 	bl	8008c2c <__lshift>
 80084e4:	4621      	mov	r1, r4
 80084e6:	9002      	str	r0, [sp, #8]
 80084e8:	f000 fc0c 	bl	8008d04 <__mcmp>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	9b00      	ldr	r3, [sp, #0]
 80084f0:	dc02      	bgt.n	80084f8 <_dtoa_r+0xa78>
 80084f2:	d1e0      	bne.n	80084b6 <_dtoa_r+0xa36>
 80084f4:	07da      	lsls	r2, r3, #31
 80084f6:	d5de      	bpl.n	80084b6 <_dtoa_r+0xa36>
 80084f8:	2b39      	cmp	r3, #57	@ 0x39
 80084fa:	d1da      	bne.n	80084b2 <_dtoa_r+0xa32>
 80084fc:	2339      	movs	r3, #57	@ 0x39
 80084fe:	f88b 3000 	strb.w	r3, [fp]
 8008502:	4633      	mov	r3, r6
 8008504:	461e      	mov	r6, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800850c:	2a39      	cmp	r2, #57	@ 0x39
 800850e:	d04e      	beq.n	80085ae <_dtoa_r+0xb2e>
 8008510:	3201      	adds	r2, #1
 8008512:	701a      	strb	r2, [r3, #0]
 8008514:	e501      	b.n	8007f1a <_dtoa_r+0x49a>
 8008516:	2a00      	cmp	r2, #0
 8008518:	dd03      	ble.n	8008522 <_dtoa_r+0xaa2>
 800851a:	2b39      	cmp	r3, #57	@ 0x39
 800851c:	d0ee      	beq.n	80084fc <_dtoa_r+0xa7c>
 800851e:	3301      	adds	r3, #1
 8008520:	e7c9      	b.n	80084b6 <_dtoa_r+0xa36>
 8008522:	9a00      	ldr	r2, [sp, #0]
 8008524:	9908      	ldr	r1, [sp, #32]
 8008526:	f802 3c01 	strb.w	r3, [r2, #-1]
 800852a:	428a      	cmp	r2, r1
 800852c:	d028      	beq.n	8008580 <_dtoa_r+0xb00>
 800852e:	9902      	ldr	r1, [sp, #8]
 8008530:	2300      	movs	r3, #0
 8008532:	220a      	movs	r2, #10
 8008534:	4648      	mov	r0, r9
 8008536:	f000 f9d5 	bl	80088e4 <__multadd>
 800853a:	42af      	cmp	r7, r5
 800853c:	9002      	str	r0, [sp, #8]
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	f04f 020a 	mov.w	r2, #10
 8008546:	4639      	mov	r1, r7
 8008548:	4648      	mov	r0, r9
 800854a:	d107      	bne.n	800855c <_dtoa_r+0xadc>
 800854c:	f000 f9ca 	bl	80088e4 <__multadd>
 8008550:	4607      	mov	r7, r0
 8008552:	4605      	mov	r5, r0
 8008554:	9b00      	ldr	r3, [sp, #0]
 8008556:	3301      	adds	r3, #1
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	e777      	b.n	800844c <_dtoa_r+0x9cc>
 800855c:	f000 f9c2 	bl	80088e4 <__multadd>
 8008560:	4629      	mov	r1, r5
 8008562:	4607      	mov	r7, r0
 8008564:	2300      	movs	r3, #0
 8008566:	220a      	movs	r2, #10
 8008568:	4648      	mov	r0, r9
 800856a:	f000 f9bb 	bl	80088e4 <__multadd>
 800856e:	4605      	mov	r5, r0
 8008570:	e7f0      	b.n	8008554 <_dtoa_r+0xad4>
 8008572:	f1bb 0f00 	cmp.w	fp, #0
 8008576:	bfcc      	ite	gt
 8008578:	465e      	movgt	r6, fp
 800857a:	2601      	movle	r6, #1
 800857c:	4456      	add	r6, sl
 800857e:	2700      	movs	r7, #0
 8008580:	9902      	ldr	r1, [sp, #8]
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	2201      	movs	r2, #1
 8008586:	4648      	mov	r0, r9
 8008588:	f000 fb50 	bl	8008c2c <__lshift>
 800858c:	4621      	mov	r1, r4
 800858e:	9002      	str	r0, [sp, #8]
 8008590:	f000 fbb8 	bl	8008d04 <__mcmp>
 8008594:	2800      	cmp	r0, #0
 8008596:	dcb4      	bgt.n	8008502 <_dtoa_r+0xa82>
 8008598:	d102      	bne.n	80085a0 <_dtoa_r+0xb20>
 800859a:	9b00      	ldr	r3, [sp, #0]
 800859c:	07db      	lsls	r3, r3, #31
 800859e:	d4b0      	bmi.n	8008502 <_dtoa_r+0xa82>
 80085a0:	4633      	mov	r3, r6
 80085a2:	461e      	mov	r6, r3
 80085a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085a8:	2a30      	cmp	r2, #48	@ 0x30
 80085aa:	d0fa      	beq.n	80085a2 <_dtoa_r+0xb22>
 80085ac:	e4b5      	b.n	8007f1a <_dtoa_r+0x49a>
 80085ae:	459a      	cmp	sl, r3
 80085b0:	d1a8      	bne.n	8008504 <_dtoa_r+0xa84>
 80085b2:	2331      	movs	r3, #49	@ 0x31
 80085b4:	f108 0801 	add.w	r8, r8, #1
 80085b8:	f88a 3000 	strb.w	r3, [sl]
 80085bc:	e4ad      	b.n	8007f1a <_dtoa_r+0x49a>
 80085be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085c0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800861c <_dtoa_r+0xb9c>
 80085c4:	b11b      	cbz	r3, 80085ce <_dtoa_r+0xb4e>
 80085c6:	f10a 0308 	add.w	r3, sl, #8
 80085ca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	4650      	mov	r0, sl
 80085d0:	b017      	add	sp, #92	@ 0x5c
 80085d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d6:	9b07      	ldr	r3, [sp, #28]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	f77f ae2e 	ble.w	800823a <_dtoa_r+0x7ba>
 80085de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085e0:	9308      	str	r3, [sp, #32]
 80085e2:	2001      	movs	r0, #1
 80085e4:	e64d      	b.n	8008282 <_dtoa_r+0x802>
 80085e6:	f1bb 0f00 	cmp.w	fp, #0
 80085ea:	f77f aed9 	ble.w	80083a0 <_dtoa_r+0x920>
 80085ee:	4656      	mov	r6, sl
 80085f0:	9802      	ldr	r0, [sp, #8]
 80085f2:	4621      	mov	r1, r4
 80085f4:	f7ff f9b9 	bl	800796a <quorem>
 80085f8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80085fc:	f806 3b01 	strb.w	r3, [r6], #1
 8008600:	eba6 020a 	sub.w	r2, r6, sl
 8008604:	4593      	cmp	fp, r2
 8008606:	ddb4      	ble.n	8008572 <_dtoa_r+0xaf2>
 8008608:	9902      	ldr	r1, [sp, #8]
 800860a:	2300      	movs	r3, #0
 800860c:	220a      	movs	r2, #10
 800860e:	4648      	mov	r0, r9
 8008610:	f000 f968 	bl	80088e4 <__multadd>
 8008614:	9002      	str	r0, [sp, #8]
 8008616:	e7eb      	b.n	80085f0 <_dtoa_r+0xb70>
 8008618:	0800a6e0 	.word	0x0800a6e0
 800861c:	0800a664 	.word	0x0800a664

08008620 <_free_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4605      	mov	r5, r0
 8008624:	2900      	cmp	r1, #0
 8008626:	d041      	beq.n	80086ac <_free_r+0x8c>
 8008628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800862c:	1f0c      	subs	r4, r1, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	bfb8      	it	lt
 8008632:	18e4      	addlt	r4, r4, r3
 8008634:	f000 f8e8 	bl	8008808 <__malloc_lock>
 8008638:	4a1d      	ldr	r2, [pc, #116]	@ (80086b0 <_free_r+0x90>)
 800863a:	6813      	ldr	r3, [r2, #0]
 800863c:	b933      	cbnz	r3, 800864c <_free_r+0x2c>
 800863e:	6063      	str	r3, [r4, #4]
 8008640:	6014      	str	r4, [r2, #0]
 8008642:	4628      	mov	r0, r5
 8008644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008648:	f000 b8e4 	b.w	8008814 <__malloc_unlock>
 800864c:	42a3      	cmp	r3, r4
 800864e:	d908      	bls.n	8008662 <_free_r+0x42>
 8008650:	6820      	ldr	r0, [r4, #0]
 8008652:	1821      	adds	r1, r4, r0
 8008654:	428b      	cmp	r3, r1
 8008656:	bf01      	itttt	eq
 8008658:	6819      	ldreq	r1, [r3, #0]
 800865a:	685b      	ldreq	r3, [r3, #4]
 800865c:	1809      	addeq	r1, r1, r0
 800865e:	6021      	streq	r1, [r4, #0]
 8008660:	e7ed      	b.n	800863e <_free_r+0x1e>
 8008662:	461a      	mov	r2, r3
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	b10b      	cbz	r3, 800866c <_free_r+0x4c>
 8008668:	42a3      	cmp	r3, r4
 800866a:	d9fa      	bls.n	8008662 <_free_r+0x42>
 800866c:	6811      	ldr	r1, [r2, #0]
 800866e:	1850      	adds	r0, r2, r1
 8008670:	42a0      	cmp	r0, r4
 8008672:	d10b      	bne.n	800868c <_free_r+0x6c>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	4401      	add	r1, r0
 8008678:	1850      	adds	r0, r2, r1
 800867a:	4283      	cmp	r3, r0
 800867c:	6011      	str	r1, [r2, #0]
 800867e:	d1e0      	bne.n	8008642 <_free_r+0x22>
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	6053      	str	r3, [r2, #4]
 8008686:	4408      	add	r0, r1
 8008688:	6010      	str	r0, [r2, #0]
 800868a:	e7da      	b.n	8008642 <_free_r+0x22>
 800868c:	d902      	bls.n	8008694 <_free_r+0x74>
 800868e:	230c      	movs	r3, #12
 8008690:	602b      	str	r3, [r5, #0]
 8008692:	e7d6      	b.n	8008642 <_free_r+0x22>
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	1821      	adds	r1, r4, r0
 8008698:	428b      	cmp	r3, r1
 800869a:	bf04      	itt	eq
 800869c:	6819      	ldreq	r1, [r3, #0]
 800869e:	685b      	ldreq	r3, [r3, #4]
 80086a0:	6063      	str	r3, [r4, #4]
 80086a2:	bf04      	itt	eq
 80086a4:	1809      	addeq	r1, r1, r0
 80086a6:	6021      	streq	r1, [r4, #0]
 80086a8:	6054      	str	r4, [r2, #4]
 80086aa:	e7ca      	b.n	8008642 <_free_r+0x22>
 80086ac:	bd38      	pop	{r3, r4, r5, pc}
 80086ae:	bf00      	nop
 80086b0:	20000444 	.word	0x20000444

080086b4 <malloc>:
 80086b4:	4b02      	ldr	r3, [pc, #8]	@ (80086c0 <malloc+0xc>)
 80086b6:	4601      	mov	r1, r0
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f000 b825 	b.w	8008708 <_malloc_r>
 80086be:	bf00      	nop
 80086c0:	2000001c 	.word	0x2000001c

080086c4 <sbrk_aligned>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	4e0f      	ldr	r6, [pc, #60]	@ (8008704 <sbrk_aligned+0x40>)
 80086c8:	460c      	mov	r4, r1
 80086ca:	6831      	ldr	r1, [r6, #0]
 80086cc:	4605      	mov	r5, r0
 80086ce:	b911      	cbnz	r1, 80086d6 <sbrk_aligned+0x12>
 80086d0:	f000 fe3e 	bl	8009350 <_sbrk_r>
 80086d4:	6030      	str	r0, [r6, #0]
 80086d6:	4621      	mov	r1, r4
 80086d8:	4628      	mov	r0, r5
 80086da:	f000 fe39 	bl	8009350 <_sbrk_r>
 80086de:	1c43      	adds	r3, r0, #1
 80086e0:	d103      	bne.n	80086ea <sbrk_aligned+0x26>
 80086e2:	f04f 34ff 	mov.w	r4, #4294967295
 80086e6:	4620      	mov	r0, r4
 80086e8:	bd70      	pop	{r4, r5, r6, pc}
 80086ea:	1cc4      	adds	r4, r0, #3
 80086ec:	f024 0403 	bic.w	r4, r4, #3
 80086f0:	42a0      	cmp	r0, r4
 80086f2:	d0f8      	beq.n	80086e6 <sbrk_aligned+0x22>
 80086f4:	1a21      	subs	r1, r4, r0
 80086f6:	4628      	mov	r0, r5
 80086f8:	f000 fe2a 	bl	8009350 <_sbrk_r>
 80086fc:	3001      	adds	r0, #1
 80086fe:	d1f2      	bne.n	80086e6 <sbrk_aligned+0x22>
 8008700:	e7ef      	b.n	80086e2 <sbrk_aligned+0x1e>
 8008702:	bf00      	nop
 8008704:	20000440 	.word	0x20000440

08008708 <_malloc_r>:
 8008708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800870c:	1ccd      	adds	r5, r1, #3
 800870e:	f025 0503 	bic.w	r5, r5, #3
 8008712:	3508      	adds	r5, #8
 8008714:	2d0c      	cmp	r5, #12
 8008716:	bf38      	it	cc
 8008718:	250c      	movcc	r5, #12
 800871a:	2d00      	cmp	r5, #0
 800871c:	4606      	mov	r6, r0
 800871e:	db01      	blt.n	8008724 <_malloc_r+0x1c>
 8008720:	42a9      	cmp	r1, r5
 8008722:	d904      	bls.n	800872e <_malloc_r+0x26>
 8008724:	230c      	movs	r3, #12
 8008726:	6033      	str	r3, [r6, #0]
 8008728:	2000      	movs	r0, #0
 800872a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800872e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008804 <_malloc_r+0xfc>
 8008732:	f000 f869 	bl	8008808 <__malloc_lock>
 8008736:	f8d8 3000 	ldr.w	r3, [r8]
 800873a:	461c      	mov	r4, r3
 800873c:	bb44      	cbnz	r4, 8008790 <_malloc_r+0x88>
 800873e:	4629      	mov	r1, r5
 8008740:	4630      	mov	r0, r6
 8008742:	f7ff ffbf 	bl	80086c4 <sbrk_aligned>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	4604      	mov	r4, r0
 800874a:	d158      	bne.n	80087fe <_malloc_r+0xf6>
 800874c:	f8d8 4000 	ldr.w	r4, [r8]
 8008750:	4627      	mov	r7, r4
 8008752:	2f00      	cmp	r7, #0
 8008754:	d143      	bne.n	80087de <_malloc_r+0xd6>
 8008756:	2c00      	cmp	r4, #0
 8008758:	d04b      	beq.n	80087f2 <_malloc_r+0xea>
 800875a:	6823      	ldr	r3, [r4, #0]
 800875c:	4639      	mov	r1, r7
 800875e:	4630      	mov	r0, r6
 8008760:	eb04 0903 	add.w	r9, r4, r3
 8008764:	f000 fdf4 	bl	8009350 <_sbrk_r>
 8008768:	4581      	cmp	r9, r0
 800876a:	d142      	bne.n	80087f2 <_malloc_r+0xea>
 800876c:	6821      	ldr	r1, [r4, #0]
 800876e:	1a6d      	subs	r5, r5, r1
 8008770:	4629      	mov	r1, r5
 8008772:	4630      	mov	r0, r6
 8008774:	f7ff ffa6 	bl	80086c4 <sbrk_aligned>
 8008778:	3001      	adds	r0, #1
 800877a:	d03a      	beq.n	80087f2 <_malloc_r+0xea>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	442b      	add	r3, r5
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	f8d8 3000 	ldr.w	r3, [r8]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	bb62      	cbnz	r2, 80087e4 <_malloc_r+0xdc>
 800878a:	f8c8 7000 	str.w	r7, [r8]
 800878e:	e00f      	b.n	80087b0 <_malloc_r+0xa8>
 8008790:	6822      	ldr	r2, [r4, #0]
 8008792:	1b52      	subs	r2, r2, r5
 8008794:	d420      	bmi.n	80087d8 <_malloc_r+0xd0>
 8008796:	2a0b      	cmp	r2, #11
 8008798:	d917      	bls.n	80087ca <_malloc_r+0xc2>
 800879a:	1961      	adds	r1, r4, r5
 800879c:	42a3      	cmp	r3, r4
 800879e:	6025      	str	r5, [r4, #0]
 80087a0:	bf18      	it	ne
 80087a2:	6059      	strne	r1, [r3, #4]
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	bf08      	it	eq
 80087a8:	f8c8 1000 	streq.w	r1, [r8]
 80087ac:	5162      	str	r2, [r4, r5]
 80087ae:	604b      	str	r3, [r1, #4]
 80087b0:	4630      	mov	r0, r6
 80087b2:	f000 f82f 	bl	8008814 <__malloc_unlock>
 80087b6:	f104 000b 	add.w	r0, r4, #11
 80087ba:	1d23      	adds	r3, r4, #4
 80087bc:	f020 0007 	bic.w	r0, r0, #7
 80087c0:	1ac2      	subs	r2, r0, r3
 80087c2:	bf1c      	itt	ne
 80087c4:	1a1b      	subne	r3, r3, r0
 80087c6:	50a3      	strne	r3, [r4, r2]
 80087c8:	e7af      	b.n	800872a <_malloc_r+0x22>
 80087ca:	6862      	ldr	r2, [r4, #4]
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	bf0c      	ite	eq
 80087d0:	f8c8 2000 	streq.w	r2, [r8]
 80087d4:	605a      	strne	r2, [r3, #4]
 80087d6:	e7eb      	b.n	80087b0 <_malloc_r+0xa8>
 80087d8:	4623      	mov	r3, r4
 80087da:	6864      	ldr	r4, [r4, #4]
 80087dc:	e7ae      	b.n	800873c <_malloc_r+0x34>
 80087de:	463c      	mov	r4, r7
 80087e0:	687f      	ldr	r7, [r7, #4]
 80087e2:	e7b6      	b.n	8008752 <_malloc_r+0x4a>
 80087e4:	461a      	mov	r2, r3
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	d1fb      	bne.n	80087e4 <_malloc_r+0xdc>
 80087ec:	2300      	movs	r3, #0
 80087ee:	6053      	str	r3, [r2, #4]
 80087f0:	e7de      	b.n	80087b0 <_malloc_r+0xa8>
 80087f2:	230c      	movs	r3, #12
 80087f4:	6033      	str	r3, [r6, #0]
 80087f6:	4630      	mov	r0, r6
 80087f8:	f000 f80c 	bl	8008814 <__malloc_unlock>
 80087fc:	e794      	b.n	8008728 <_malloc_r+0x20>
 80087fe:	6005      	str	r5, [r0, #0]
 8008800:	e7d6      	b.n	80087b0 <_malloc_r+0xa8>
 8008802:	bf00      	nop
 8008804:	20000444 	.word	0x20000444

08008808 <__malloc_lock>:
 8008808:	4801      	ldr	r0, [pc, #4]	@ (8008810 <__malloc_lock+0x8>)
 800880a:	f7ff b8ac 	b.w	8007966 <__retarget_lock_acquire_recursive>
 800880e:	bf00      	nop
 8008810:	2000043c 	.word	0x2000043c

08008814 <__malloc_unlock>:
 8008814:	4801      	ldr	r0, [pc, #4]	@ (800881c <__malloc_unlock+0x8>)
 8008816:	f7ff b8a7 	b.w	8007968 <__retarget_lock_release_recursive>
 800881a:	bf00      	nop
 800881c:	2000043c 	.word	0x2000043c

08008820 <_Balloc>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	69c6      	ldr	r6, [r0, #28]
 8008824:	4604      	mov	r4, r0
 8008826:	460d      	mov	r5, r1
 8008828:	b976      	cbnz	r6, 8008848 <_Balloc+0x28>
 800882a:	2010      	movs	r0, #16
 800882c:	f7ff ff42 	bl	80086b4 <malloc>
 8008830:	4602      	mov	r2, r0
 8008832:	61e0      	str	r0, [r4, #28]
 8008834:	b920      	cbnz	r0, 8008840 <_Balloc+0x20>
 8008836:	4b18      	ldr	r3, [pc, #96]	@ (8008898 <_Balloc+0x78>)
 8008838:	4818      	ldr	r0, [pc, #96]	@ (800889c <_Balloc+0x7c>)
 800883a:	216b      	movs	r1, #107	@ 0x6b
 800883c:	f000 fda6 	bl	800938c <__assert_func>
 8008840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008844:	6006      	str	r6, [r0, #0]
 8008846:	60c6      	str	r6, [r0, #12]
 8008848:	69e6      	ldr	r6, [r4, #28]
 800884a:	68f3      	ldr	r3, [r6, #12]
 800884c:	b183      	cbz	r3, 8008870 <_Balloc+0x50>
 800884e:	69e3      	ldr	r3, [r4, #28]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008856:	b9b8      	cbnz	r0, 8008888 <_Balloc+0x68>
 8008858:	2101      	movs	r1, #1
 800885a:	fa01 f605 	lsl.w	r6, r1, r5
 800885e:	1d72      	adds	r2, r6, #5
 8008860:	0092      	lsls	r2, r2, #2
 8008862:	4620      	mov	r0, r4
 8008864:	f000 fdb0 	bl	80093c8 <_calloc_r>
 8008868:	b160      	cbz	r0, 8008884 <_Balloc+0x64>
 800886a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800886e:	e00e      	b.n	800888e <_Balloc+0x6e>
 8008870:	2221      	movs	r2, #33	@ 0x21
 8008872:	2104      	movs	r1, #4
 8008874:	4620      	mov	r0, r4
 8008876:	f000 fda7 	bl	80093c8 <_calloc_r>
 800887a:	69e3      	ldr	r3, [r4, #28]
 800887c:	60f0      	str	r0, [r6, #12]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d1e4      	bne.n	800884e <_Balloc+0x2e>
 8008884:	2000      	movs	r0, #0
 8008886:	bd70      	pop	{r4, r5, r6, pc}
 8008888:	6802      	ldr	r2, [r0, #0]
 800888a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800888e:	2300      	movs	r3, #0
 8008890:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008894:	e7f7      	b.n	8008886 <_Balloc+0x66>
 8008896:	bf00      	nop
 8008898:	0800a671 	.word	0x0800a671
 800889c:	0800a6f1 	.word	0x0800a6f1

080088a0 <_Bfree>:
 80088a0:	b570      	push	{r4, r5, r6, lr}
 80088a2:	69c6      	ldr	r6, [r0, #28]
 80088a4:	4605      	mov	r5, r0
 80088a6:	460c      	mov	r4, r1
 80088a8:	b976      	cbnz	r6, 80088c8 <_Bfree+0x28>
 80088aa:	2010      	movs	r0, #16
 80088ac:	f7ff ff02 	bl	80086b4 <malloc>
 80088b0:	4602      	mov	r2, r0
 80088b2:	61e8      	str	r0, [r5, #28]
 80088b4:	b920      	cbnz	r0, 80088c0 <_Bfree+0x20>
 80088b6:	4b09      	ldr	r3, [pc, #36]	@ (80088dc <_Bfree+0x3c>)
 80088b8:	4809      	ldr	r0, [pc, #36]	@ (80088e0 <_Bfree+0x40>)
 80088ba:	218f      	movs	r1, #143	@ 0x8f
 80088bc:	f000 fd66 	bl	800938c <__assert_func>
 80088c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088c4:	6006      	str	r6, [r0, #0]
 80088c6:	60c6      	str	r6, [r0, #12]
 80088c8:	b13c      	cbz	r4, 80088da <_Bfree+0x3a>
 80088ca:	69eb      	ldr	r3, [r5, #28]
 80088cc:	6862      	ldr	r2, [r4, #4]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088d4:	6021      	str	r1, [r4, #0]
 80088d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088da:	bd70      	pop	{r4, r5, r6, pc}
 80088dc:	0800a671 	.word	0x0800a671
 80088e0:	0800a6f1 	.word	0x0800a6f1

080088e4 <__multadd>:
 80088e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e8:	690d      	ldr	r5, [r1, #16]
 80088ea:	4607      	mov	r7, r0
 80088ec:	460c      	mov	r4, r1
 80088ee:	461e      	mov	r6, r3
 80088f0:	f101 0c14 	add.w	ip, r1, #20
 80088f4:	2000      	movs	r0, #0
 80088f6:	f8dc 3000 	ldr.w	r3, [ip]
 80088fa:	b299      	uxth	r1, r3
 80088fc:	fb02 6101 	mla	r1, r2, r1, r6
 8008900:	0c1e      	lsrs	r6, r3, #16
 8008902:	0c0b      	lsrs	r3, r1, #16
 8008904:	fb02 3306 	mla	r3, r2, r6, r3
 8008908:	b289      	uxth	r1, r1
 800890a:	3001      	adds	r0, #1
 800890c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008910:	4285      	cmp	r5, r0
 8008912:	f84c 1b04 	str.w	r1, [ip], #4
 8008916:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800891a:	dcec      	bgt.n	80088f6 <__multadd+0x12>
 800891c:	b30e      	cbz	r6, 8008962 <__multadd+0x7e>
 800891e:	68a3      	ldr	r3, [r4, #8]
 8008920:	42ab      	cmp	r3, r5
 8008922:	dc19      	bgt.n	8008958 <__multadd+0x74>
 8008924:	6861      	ldr	r1, [r4, #4]
 8008926:	4638      	mov	r0, r7
 8008928:	3101      	adds	r1, #1
 800892a:	f7ff ff79 	bl	8008820 <_Balloc>
 800892e:	4680      	mov	r8, r0
 8008930:	b928      	cbnz	r0, 800893e <__multadd+0x5a>
 8008932:	4602      	mov	r2, r0
 8008934:	4b0c      	ldr	r3, [pc, #48]	@ (8008968 <__multadd+0x84>)
 8008936:	480d      	ldr	r0, [pc, #52]	@ (800896c <__multadd+0x88>)
 8008938:	21ba      	movs	r1, #186	@ 0xba
 800893a:	f000 fd27 	bl	800938c <__assert_func>
 800893e:	6922      	ldr	r2, [r4, #16]
 8008940:	3202      	adds	r2, #2
 8008942:	f104 010c 	add.w	r1, r4, #12
 8008946:	0092      	lsls	r2, r2, #2
 8008948:	300c      	adds	r0, #12
 800894a:	f000 fd11 	bl	8009370 <memcpy>
 800894e:	4621      	mov	r1, r4
 8008950:	4638      	mov	r0, r7
 8008952:	f7ff ffa5 	bl	80088a0 <_Bfree>
 8008956:	4644      	mov	r4, r8
 8008958:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800895c:	3501      	adds	r5, #1
 800895e:	615e      	str	r6, [r3, #20]
 8008960:	6125      	str	r5, [r4, #16]
 8008962:	4620      	mov	r0, r4
 8008964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008968:	0800a6e0 	.word	0x0800a6e0
 800896c:	0800a6f1 	.word	0x0800a6f1

08008970 <__hi0bits>:
 8008970:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008974:	4603      	mov	r3, r0
 8008976:	bf36      	itet	cc
 8008978:	0403      	lslcc	r3, r0, #16
 800897a:	2000      	movcs	r0, #0
 800897c:	2010      	movcc	r0, #16
 800897e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008982:	bf3c      	itt	cc
 8008984:	021b      	lslcc	r3, r3, #8
 8008986:	3008      	addcc	r0, #8
 8008988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800898c:	bf3c      	itt	cc
 800898e:	011b      	lslcc	r3, r3, #4
 8008990:	3004      	addcc	r0, #4
 8008992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008996:	bf3c      	itt	cc
 8008998:	009b      	lslcc	r3, r3, #2
 800899a:	3002      	addcc	r0, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	db05      	blt.n	80089ac <__hi0bits+0x3c>
 80089a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089a4:	f100 0001 	add.w	r0, r0, #1
 80089a8:	bf08      	it	eq
 80089aa:	2020      	moveq	r0, #32
 80089ac:	4770      	bx	lr

080089ae <__lo0bits>:
 80089ae:	6803      	ldr	r3, [r0, #0]
 80089b0:	4602      	mov	r2, r0
 80089b2:	f013 0007 	ands.w	r0, r3, #7
 80089b6:	d00b      	beq.n	80089d0 <__lo0bits+0x22>
 80089b8:	07d9      	lsls	r1, r3, #31
 80089ba:	d421      	bmi.n	8008a00 <__lo0bits+0x52>
 80089bc:	0798      	lsls	r0, r3, #30
 80089be:	bf49      	itett	mi
 80089c0:	085b      	lsrmi	r3, r3, #1
 80089c2:	089b      	lsrpl	r3, r3, #2
 80089c4:	2001      	movmi	r0, #1
 80089c6:	6013      	strmi	r3, [r2, #0]
 80089c8:	bf5c      	itt	pl
 80089ca:	6013      	strpl	r3, [r2, #0]
 80089cc:	2002      	movpl	r0, #2
 80089ce:	4770      	bx	lr
 80089d0:	b299      	uxth	r1, r3
 80089d2:	b909      	cbnz	r1, 80089d8 <__lo0bits+0x2a>
 80089d4:	0c1b      	lsrs	r3, r3, #16
 80089d6:	2010      	movs	r0, #16
 80089d8:	b2d9      	uxtb	r1, r3
 80089da:	b909      	cbnz	r1, 80089e0 <__lo0bits+0x32>
 80089dc:	3008      	adds	r0, #8
 80089de:	0a1b      	lsrs	r3, r3, #8
 80089e0:	0719      	lsls	r1, r3, #28
 80089e2:	bf04      	itt	eq
 80089e4:	091b      	lsreq	r3, r3, #4
 80089e6:	3004      	addeq	r0, #4
 80089e8:	0799      	lsls	r1, r3, #30
 80089ea:	bf04      	itt	eq
 80089ec:	089b      	lsreq	r3, r3, #2
 80089ee:	3002      	addeq	r0, #2
 80089f0:	07d9      	lsls	r1, r3, #31
 80089f2:	d403      	bmi.n	80089fc <__lo0bits+0x4e>
 80089f4:	085b      	lsrs	r3, r3, #1
 80089f6:	f100 0001 	add.w	r0, r0, #1
 80089fa:	d003      	beq.n	8008a04 <__lo0bits+0x56>
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	4770      	bx	lr
 8008a00:	2000      	movs	r0, #0
 8008a02:	4770      	bx	lr
 8008a04:	2020      	movs	r0, #32
 8008a06:	4770      	bx	lr

08008a08 <__i2b>:
 8008a08:	b510      	push	{r4, lr}
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	f7ff ff07 	bl	8008820 <_Balloc>
 8008a12:	4602      	mov	r2, r0
 8008a14:	b928      	cbnz	r0, 8008a22 <__i2b+0x1a>
 8008a16:	4b05      	ldr	r3, [pc, #20]	@ (8008a2c <__i2b+0x24>)
 8008a18:	4805      	ldr	r0, [pc, #20]	@ (8008a30 <__i2b+0x28>)
 8008a1a:	f240 1145 	movw	r1, #325	@ 0x145
 8008a1e:	f000 fcb5 	bl	800938c <__assert_func>
 8008a22:	2301      	movs	r3, #1
 8008a24:	6144      	str	r4, [r0, #20]
 8008a26:	6103      	str	r3, [r0, #16]
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	bf00      	nop
 8008a2c:	0800a6e0 	.word	0x0800a6e0
 8008a30:	0800a6f1 	.word	0x0800a6f1

08008a34 <__multiply>:
 8008a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a38:	4617      	mov	r7, r2
 8008a3a:	690a      	ldr	r2, [r1, #16]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	bfa8      	it	ge
 8008a42:	463b      	movge	r3, r7
 8008a44:	4689      	mov	r9, r1
 8008a46:	bfa4      	itt	ge
 8008a48:	460f      	movge	r7, r1
 8008a4a:	4699      	movge	r9, r3
 8008a4c:	693d      	ldr	r5, [r7, #16]
 8008a4e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	6879      	ldr	r1, [r7, #4]
 8008a56:	eb05 060a 	add.w	r6, r5, sl
 8008a5a:	42b3      	cmp	r3, r6
 8008a5c:	b085      	sub	sp, #20
 8008a5e:	bfb8      	it	lt
 8008a60:	3101      	addlt	r1, #1
 8008a62:	f7ff fedd 	bl	8008820 <_Balloc>
 8008a66:	b930      	cbnz	r0, 8008a76 <__multiply+0x42>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	4b41      	ldr	r3, [pc, #260]	@ (8008b70 <__multiply+0x13c>)
 8008a6c:	4841      	ldr	r0, [pc, #260]	@ (8008b74 <__multiply+0x140>)
 8008a6e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a72:	f000 fc8b 	bl	800938c <__assert_func>
 8008a76:	f100 0414 	add.w	r4, r0, #20
 8008a7a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008a7e:	4623      	mov	r3, r4
 8008a80:	2200      	movs	r2, #0
 8008a82:	4573      	cmp	r3, lr
 8008a84:	d320      	bcc.n	8008ac8 <__multiply+0x94>
 8008a86:	f107 0814 	add.w	r8, r7, #20
 8008a8a:	f109 0114 	add.w	r1, r9, #20
 8008a8e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008a92:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008a96:	9302      	str	r3, [sp, #8]
 8008a98:	1beb      	subs	r3, r5, r7
 8008a9a:	3b15      	subs	r3, #21
 8008a9c:	f023 0303 	bic.w	r3, r3, #3
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	3715      	adds	r7, #21
 8008aa4:	42bd      	cmp	r5, r7
 8008aa6:	bf38      	it	cc
 8008aa8:	2304      	movcc	r3, #4
 8008aaa:	9301      	str	r3, [sp, #4]
 8008aac:	9b02      	ldr	r3, [sp, #8]
 8008aae:	9103      	str	r1, [sp, #12]
 8008ab0:	428b      	cmp	r3, r1
 8008ab2:	d80c      	bhi.n	8008ace <__multiply+0x9a>
 8008ab4:	2e00      	cmp	r6, #0
 8008ab6:	dd03      	ble.n	8008ac0 <__multiply+0x8c>
 8008ab8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d055      	beq.n	8008b6c <__multiply+0x138>
 8008ac0:	6106      	str	r6, [r0, #16]
 8008ac2:	b005      	add	sp, #20
 8008ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac8:	f843 2b04 	str.w	r2, [r3], #4
 8008acc:	e7d9      	b.n	8008a82 <__multiply+0x4e>
 8008ace:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ad2:	f1ba 0f00 	cmp.w	sl, #0
 8008ad6:	d01f      	beq.n	8008b18 <__multiply+0xe4>
 8008ad8:	46c4      	mov	ip, r8
 8008ada:	46a1      	mov	r9, r4
 8008adc:	2700      	movs	r7, #0
 8008ade:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008ae2:	f8d9 3000 	ldr.w	r3, [r9]
 8008ae6:	fa1f fb82 	uxth.w	fp, r2
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	fb0a 330b 	mla	r3, sl, fp, r3
 8008af0:	443b      	add	r3, r7
 8008af2:	f8d9 7000 	ldr.w	r7, [r9]
 8008af6:	0c12      	lsrs	r2, r2, #16
 8008af8:	0c3f      	lsrs	r7, r7, #16
 8008afa:	fb0a 7202 	mla	r2, sl, r2, r7
 8008afe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b08:	4565      	cmp	r5, ip
 8008b0a:	f849 3b04 	str.w	r3, [r9], #4
 8008b0e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008b12:	d8e4      	bhi.n	8008ade <__multiply+0xaa>
 8008b14:	9b01      	ldr	r3, [sp, #4]
 8008b16:	50e7      	str	r7, [r4, r3]
 8008b18:	9b03      	ldr	r3, [sp, #12]
 8008b1a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b1e:	3104      	adds	r1, #4
 8008b20:	f1b9 0f00 	cmp.w	r9, #0
 8008b24:	d020      	beq.n	8008b68 <__multiply+0x134>
 8008b26:	6823      	ldr	r3, [r4, #0]
 8008b28:	4647      	mov	r7, r8
 8008b2a:	46a4      	mov	ip, r4
 8008b2c:	f04f 0a00 	mov.w	sl, #0
 8008b30:	f8b7 b000 	ldrh.w	fp, [r7]
 8008b34:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008b38:	fb09 220b 	mla	r2, r9, fp, r2
 8008b3c:	4452      	add	r2, sl
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b44:	f84c 3b04 	str.w	r3, [ip], #4
 8008b48:	f857 3b04 	ldr.w	r3, [r7], #4
 8008b4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b50:	f8bc 3000 	ldrh.w	r3, [ip]
 8008b54:	fb09 330a 	mla	r3, r9, sl, r3
 8008b58:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008b5c:	42bd      	cmp	r5, r7
 8008b5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b62:	d8e5      	bhi.n	8008b30 <__multiply+0xfc>
 8008b64:	9a01      	ldr	r2, [sp, #4]
 8008b66:	50a3      	str	r3, [r4, r2]
 8008b68:	3404      	adds	r4, #4
 8008b6a:	e79f      	b.n	8008aac <__multiply+0x78>
 8008b6c:	3e01      	subs	r6, #1
 8008b6e:	e7a1      	b.n	8008ab4 <__multiply+0x80>
 8008b70:	0800a6e0 	.word	0x0800a6e0
 8008b74:	0800a6f1 	.word	0x0800a6f1

08008b78 <__pow5mult>:
 8008b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b7c:	4615      	mov	r5, r2
 8008b7e:	f012 0203 	ands.w	r2, r2, #3
 8008b82:	4607      	mov	r7, r0
 8008b84:	460e      	mov	r6, r1
 8008b86:	d007      	beq.n	8008b98 <__pow5mult+0x20>
 8008b88:	4c25      	ldr	r4, [pc, #148]	@ (8008c20 <__pow5mult+0xa8>)
 8008b8a:	3a01      	subs	r2, #1
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b92:	f7ff fea7 	bl	80088e4 <__multadd>
 8008b96:	4606      	mov	r6, r0
 8008b98:	10ad      	asrs	r5, r5, #2
 8008b9a:	d03d      	beq.n	8008c18 <__pow5mult+0xa0>
 8008b9c:	69fc      	ldr	r4, [r7, #28]
 8008b9e:	b97c      	cbnz	r4, 8008bc0 <__pow5mult+0x48>
 8008ba0:	2010      	movs	r0, #16
 8008ba2:	f7ff fd87 	bl	80086b4 <malloc>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	61f8      	str	r0, [r7, #28]
 8008baa:	b928      	cbnz	r0, 8008bb8 <__pow5mult+0x40>
 8008bac:	4b1d      	ldr	r3, [pc, #116]	@ (8008c24 <__pow5mult+0xac>)
 8008bae:	481e      	ldr	r0, [pc, #120]	@ (8008c28 <__pow5mult+0xb0>)
 8008bb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008bb4:	f000 fbea 	bl	800938c <__assert_func>
 8008bb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bbc:	6004      	str	r4, [r0, #0]
 8008bbe:	60c4      	str	r4, [r0, #12]
 8008bc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008bc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bc8:	b94c      	cbnz	r4, 8008bde <__pow5mult+0x66>
 8008bca:	f240 2171 	movw	r1, #625	@ 0x271
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f7ff ff1a 	bl	8008a08 <__i2b>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bda:	4604      	mov	r4, r0
 8008bdc:	6003      	str	r3, [r0, #0]
 8008bde:	f04f 0900 	mov.w	r9, #0
 8008be2:	07eb      	lsls	r3, r5, #31
 8008be4:	d50a      	bpl.n	8008bfc <__pow5mult+0x84>
 8008be6:	4631      	mov	r1, r6
 8008be8:	4622      	mov	r2, r4
 8008bea:	4638      	mov	r0, r7
 8008bec:	f7ff ff22 	bl	8008a34 <__multiply>
 8008bf0:	4631      	mov	r1, r6
 8008bf2:	4680      	mov	r8, r0
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	f7ff fe53 	bl	80088a0 <_Bfree>
 8008bfa:	4646      	mov	r6, r8
 8008bfc:	106d      	asrs	r5, r5, #1
 8008bfe:	d00b      	beq.n	8008c18 <__pow5mult+0xa0>
 8008c00:	6820      	ldr	r0, [r4, #0]
 8008c02:	b938      	cbnz	r0, 8008c14 <__pow5mult+0x9c>
 8008c04:	4622      	mov	r2, r4
 8008c06:	4621      	mov	r1, r4
 8008c08:	4638      	mov	r0, r7
 8008c0a:	f7ff ff13 	bl	8008a34 <__multiply>
 8008c0e:	6020      	str	r0, [r4, #0]
 8008c10:	f8c0 9000 	str.w	r9, [r0]
 8008c14:	4604      	mov	r4, r0
 8008c16:	e7e4      	b.n	8008be2 <__pow5mult+0x6a>
 8008c18:	4630      	mov	r0, r6
 8008c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c1e:	bf00      	nop
 8008c20:	0800a7a4 	.word	0x0800a7a4
 8008c24:	0800a671 	.word	0x0800a671
 8008c28:	0800a6f1 	.word	0x0800a6f1

08008c2c <__lshift>:
 8008c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c30:	460c      	mov	r4, r1
 8008c32:	6849      	ldr	r1, [r1, #4]
 8008c34:	6923      	ldr	r3, [r4, #16]
 8008c36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c3a:	68a3      	ldr	r3, [r4, #8]
 8008c3c:	4607      	mov	r7, r0
 8008c3e:	4691      	mov	r9, r2
 8008c40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c44:	f108 0601 	add.w	r6, r8, #1
 8008c48:	42b3      	cmp	r3, r6
 8008c4a:	db0b      	blt.n	8008c64 <__lshift+0x38>
 8008c4c:	4638      	mov	r0, r7
 8008c4e:	f7ff fde7 	bl	8008820 <_Balloc>
 8008c52:	4605      	mov	r5, r0
 8008c54:	b948      	cbnz	r0, 8008c6a <__lshift+0x3e>
 8008c56:	4602      	mov	r2, r0
 8008c58:	4b28      	ldr	r3, [pc, #160]	@ (8008cfc <__lshift+0xd0>)
 8008c5a:	4829      	ldr	r0, [pc, #164]	@ (8008d00 <__lshift+0xd4>)
 8008c5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c60:	f000 fb94 	bl	800938c <__assert_func>
 8008c64:	3101      	adds	r1, #1
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	e7ee      	b.n	8008c48 <__lshift+0x1c>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	f100 0114 	add.w	r1, r0, #20
 8008c70:	f100 0210 	add.w	r2, r0, #16
 8008c74:	4618      	mov	r0, r3
 8008c76:	4553      	cmp	r3, sl
 8008c78:	db33      	blt.n	8008ce2 <__lshift+0xb6>
 8008c7a:	6920      	ldr	r0, [r4, #16]
 8008c7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c80:	f104 0314 	add.w	r3, r4, #20
 8008c84:	f019 091f 	ands.w	r9, r9, #31
 8008c88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c90:	d02b      	beq.n	8008cea <__lshift+0xbe>
 8008c92:	f1c9 0e20 	rsb	lr, r9, #32
 8008c96:	468a      	mov	sl, r1
 8008c98:	2200      	movs	r2, #0
 8008c9a:	6818      	ldr	r0, [r3, #0]
 8008c9c:	fa00 f009 	lsl.w	r0, r0, r9
 8008ca0:	4310      	orrs	r0, r2
 8008ca2:	f84a 0b04 	str.w	r0, [sl], #4
 8008ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008caa:	459c      	cmp	ip, r3
 8008cac:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cb0:	d8f3      	bhi.n	8008c9a <__lshift+0x6e>
 8008cb2:	ebac 0304 	sub.w	r3, ip, r4
 8008cb6:	3b15      	subs	r3, #21
 8008cb8:	f023 0303 	bic.w	r3, r3, #3
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	f104 0015 	add.w	r0, r4, #21
 8008cc2:	4560      	cmp	r0, ip
 8008cc4:	bf88      	it	hi
 8008cc6:	2304      	movhi	r3, #4
 8008cc8:	50ca      	str	r2, [r1, r3]
 8008cca:	b10a      	cbz	r2, 8008cd0 <__lshift+0xa4>
 8008ccc:	f108 0602 	add.w	r6, r8, #2
 8008cd0:	3e01      	subs	r6, #1
 8008cd2:	4638      	mov	r0, r7
 8008cd4:	612e      	str	r6, [r5, #16]
 8008cd6:	4621      	mov	r1, r4
 8008cd8:	f7ff fde2 	bl	80088a0 <_Bfree>
 8008cdc:	4628      	mov	r0, r5
 8008cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce2:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	e7c5      	b.n	8008c76 <__lshift+0x4a>
 8008cea:	3904      	subs	r1, #4
 8008cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf0:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cf4:	459c      	cmp	ip, r3
 8008cf6:	d8f9      	bhi.n	8008cec <__lshift+0xc0>
 8008cf8:	e7ea      	b.n	8008cd0 <__lshift+0xa4>
 8008cfa:	bf00      	nop
 8008cfc:	0800a6e0 	.word	0x0800a6e0
 8008d00:	0800a6f1 	.word	0x0800a6f1

08008d04 <__mcmp>:
 8008d04:	690a      	ldr	r2, [r1, #16]
 8008d06:	4603      	mov	r3, r0
 8008d08:	6900      	ldr	r0, [r0, #16]
 8008d0a:	1a80      	subs	r0, r0, r2
 8008d0c:	b530      	push	{r4, r5, lr}
 8008d0e:	d10e      	bne.n	8008d2e <__mcmp+0x2a>
 8008d10:	3314      	adds	r3, #20
 8008d12:	3114      	adds	r1, #20
 8008d14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d24:	4295      	cmp	r5, r2
 8008d26:	d003      	beq.n	8008d30 <__mcmp+0x2c>
 8008d28:	d205      	bcs.n	8008d36 <__mcmp+0x32>
 8008d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2e:	bd30      	pop	{r4, r5, pc}
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	d3f3      	bcc.n	8008d1c <__mcmp+0x18>
 8008d34:	e7fb      	b.n	8008d2e <__mcmp+0x2a>
 8008d36:	2001      	movs	r0, #1
 8008d38:	e7f9      	b.n	8008d2e <__mcmp+0x2a>
	...

08008d3c <__mdiff>:
 8008d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d40:	4689      	mov	r9, r1
 8008d42:	4606      	mov	r6, r0
 8008d44:	4611      	mov	r1, r2
 8008d46:	4648      	mov	r0, r9
 8008d48:	4614      	mov	r4, r2
 8008d4a:	f7ff ffdb 	bl	8008d04 <__mcmp>
 8008d4e:	1e05      	subs	r5, r0, #0
 8008d50:	d112      	bne.n	8008d78 <__mdiff+0x3c>
 8008d52:	4629      	mov	r1, r5
 8008d54:	4630      	mov	r0, r6
 8008d56:	f7ff fd63 	bl	8008820 <_Balloc>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	b928      	cbnz	r0, 8008d6a <__mdiff+0x2e>
 8008d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8008e5c <__mdiff+0x120>)
 8008d60:	f240 2137 	movw	r1, #567	@ 0x237
 8008d64:	483e      	ldr	r0, [pc, #248]	@ (8008e60 <__mdiff+0x124>)
 8008d66:	f000 fb11 	bl	800938c <__assert_func>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d70:	4610      	mov	r0, r2
 8008d72:	b003      	add	sp, #12
 8008d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d78:	bfbc      	itt	lt
 8008d7a:	464b      	movlt	r3, r9
 8008d7c:	46a1      	movlt	r9, r4
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008d84:	bfba      	itte	lt
 8008d86:	461c      	movlt	r4, r3
 8008d88:	2501      	movlt	r5, #1
 8008d8a:	2500      	movge	r5, #0
 8008d8c:	f7ff fd48 	bl	8008820 <_Balloc>
 8008d90:	4602      	mov	r2, r0
 8008d92:	b918      	cbnz	r0, 8008d9c <__mdiff+0x60>
 8008d94:	4b31      	ldr	r3, [pc, #196]	@ (8008e5c <__mdiff+0x120>)
 8008d96:	f240 2145 	movw	r1, #581	@ 0x245
 8008d9a:	e7e3      	b.n	8008d64 <__mdiff+0x28>
 8008d9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008da0:	6926      	ldr	r6, [r4, #16]
 8008da2:	60c5      	str	r5, [r0, #12]
 8008da4:	f109 0310 	add.w	r3, r9, #16
 8008da8:	f109 0514 	add.w	r5, r9, #20
 8008dac:	f104 0e14 	add.w	lr, r4, #20
 8008db0:	f100 0b14 	add.w	fp, r0, #20
 8008db4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008db8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008dbc:	9301      	str	r3, [sp, #4]
 8008dbe:	46d9      	mov	r9, fp
 8008dc0:	f04f 0c00 	mov.w	ip, #0
 8008dc4:	9b01      	ldr	r3, [sp, #4]
 8008dc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008dca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	fa1f f38a 	uxth.w	r3, sl
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	b283      	uxth	r3, r0
 8008dd8:	1acb      	subs	r3, r1, r3
 8008dda:	0c00      	lsrs	r0, r0, #16
 8008ddc:	4463      	add	r3, ip
 8008dde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008de2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008dec:	4576      	cmp	r6, lr
 8008dee:	f849 3b04 	str.w	r3, [r9], #4
 8008df2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008df6:	d8e5      	bhi.n	8008dc4 <__mdiff+0x88>
 8008df8:	1b33      	subs	r3, r6, r4
 8008dfa:	3b15      	subs	r3, #21
 8008dfc:	f023 0303 	bic.w	r3, r3, #3
 8008e00:	3415      	adds	r4, #21
 8008e02:	3304      	adds	r3, #4
 8008e04:	42a6      	cmp	r6, r4
 8008e06:	bf38      	it	cc
 8008e08:	2304      	movcc	r3, #4
 8008e0a:	441d      	add	r5, r3
 8008e0c:	445b      	add	r3, fp
 8008e0e:	461e      	mov	r6, r3
 8008e10:	462c      	mov	r4, r5
 8008e12:	4544      	cmp	r4, r8
 8008e14:	d30e      	bcc.n	8008e34 <__mdiff+0xf8>
 8008e16:	f108 0103 	add.w	r1, r8, #3
 8008e1a:	1b49      	subs	r1, r1, r5
 8008e1c:	f021 0103 	bic.w	r1, r1, #3
 8008e20:	3d03      	subs	r5, #3
 8008e22:	45a8      	cmp	r8, r5
 8008e24:	bf38      	it	cc
 8008e26:	2100      	movcc	r1, #0
 8008e28:	440b      	add	r3, r1
 8008e2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e2e:	b191      	cbz	r1, 8008e56 <__mdiff+0x11a>
 8008e30:	6117      	str	r7, [r2, #16]
 8008e32:	e79d      	b.n	8008d70 <__mdiff+0x34>
 8008e34:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e38:	46e6      	mov	lr, ip
 8008e3a:	0c08      	lsrs	r0, r1, #16
 8008e3c:	fa1c fc81 	uxtah	ip, ip, r1
 8008e40:	4471      	add	r1, lr
 8008e42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e46:	b289      	uxth	r1, r1
 8008e48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e4c:	f846 1b04 	str.w	r1, [r6], #4
 8008e50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e54:	e7dd      	b.n	8008e12 <__mdiff+0xd6>
 8008e56:	3f01      	subs	r7, #1
 8008e58:	e7e7      	b.n	8008e2a <__mdiff+0xee>
 8008e5a:	bf00      	nop
 8008e5c:	0800a6e0 	.word	0x0800a6e0
 8008e60:	0800a6f1 	.word	0x0800a6f1

08008e64 <__d2b>:
 8008e64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e68:	460f      	mov	r7, r1
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	ec59 8b10 	vmov	r8, r9, d0
 8008e70:	4616      	mov	r6, r2
 8008e72:	f7ff fcd5 	bl	8008820 <_Balloc>
 8008e76:	4604      	mov	r4, r0
 8008e78:	b930      	cbnz	r0, 8008e88 <__d2b+0x24>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	4b23      	ldr	r3, [pc, #140]	@ (8008f0c <__d2b+0xa8>)
 8008e7e:	4824      	ldr	r0, [pc, #144]	@ (8008f10 <__d2b+0xac>)
 8008e80:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e84:	f000 fa82 	bl	800938c <__assert_func>
 8008e88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e90:	b10d      	cbz	r5, 8008e96 <__d2b+0x32>
 8008e92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	f1b8 0300 	subs.w	r3, r8, #0
 8008e9c:	d023      	beq.n	8008ee6 <__d2b+0x82>
 8008e9e:	4668      	mov	r0, sp
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	f7ff fd84 	bl	80089ae <__lo0bits>
 8008ea6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008eaa:	b1d0      	cbz	r0, 8008ee2 <__d2b+0x7e>
 8008eac:	f1c0 0320 	rsb	r3, r0, #32
 8008eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008eb4:	430b      	orrs	r3, r1
 8008eb6:	40c2      	lsrs	r2, r0
 8008eb8:	6163      	str	r3, [r4, #20]
 8008eba:	9201      	str	r2, [sp, #4]
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	61a3      	str	r3, [r4, #24]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	bf0c      	ite	eq
 8008ec4:	2201      	moveq	r2, #1
 8008ec6:	2202      	movne	r2, #2
 8008ec8:	6122      	str	r2, [r4, #16]
 8008eca:	b1a5      	cbz	r5, 8008ef6 <__d2b+0x92>
 8008ecc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008ed0:	4405      	add	r5, r0
 8008ed2:	603d      	str	r5, [r7, #0]
 8008ed4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ed8:	6030      	str	r0, [r6, #0]
 8008eda:	4620      	mov	r0, r4
 8008edc:	b003      	add	sp, #12
 8008ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ee2:	6161      	str	r1, [r4, #20]
 8008ee4:	e7ea      	b.n	8008ebc <__d2b+0x58>
 8008ee6:	a801      	add	r0, sp, #4
 8008ee8:	f7ff fd61 	bl	80089ae <__lo0bits>
 8008eec:	9b01      	ldr	r3, [sp, #4]
 8008eee:	6163      	str	r3, [r4, #20]
 8008ef0:	3020      	adds	r0, #32
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	e7e8      	b.n	8008ec8 <__d2b+0x64>
 8008ef6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008efa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008efe:	6038      	str	r0, [r7, #0]
 8008f00:	6918      	ldr	r0, [r3, #16]
 8008f02:	f7ff fd35 	bl	8008970 <__hi0bits>
 8008f06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f0a:	e7e5      	b.n	8008ed8 <__d2b+0x74>
 8008f0c:	0800a6e0 	.word	0x0800a6e0
 8008f10:	0800a6f1 	.word	0x0800a6f1

08008f14 <__ssputs_r>:
 8008f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f18:	688e      	ldr	r6, [r1, #8]
 8008f1a:	461f      	mov	r7, r3
 8008f1c:	42be      	cmp	r6, r7
 8008f1e:	680b      	ldr	r3, [r1, #0]
 8008f20:	4682      	mov	sl, r0
 8008f22:	460c      	mov	r4, r1
 8008f24:	4690      	mov	r8, r2
 8008f26:	d82d      	bhi.n	8008f84 <__ssputs_r+0x70>
 8008f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008f30:	d026      	beq.n	8008f80 <__ssputs_r+0x6c>
 8008f32:	6965      	ldr	r5, [r4, #20]
 8008f34:	6909      	ldr	r1, [r1, #16]
 8008f36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f3a:	eba3 0901 	sub.w	r9, r3, r1
 8008f3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f42:	1c7b      	adds	r3, r7, #1
 8008f44:	444b      	add	r3, r9
 8008f46:	106d      	asrs	r5, r5, #1
 8008f48:	429d      	cmp	r5, r3
 8008f4a:	bf38      	it	cc
 8008f4c:	461d      	movcc	r5, r3
 8008f4e:	0553      	lsls	r3, r2, #21
 8008f50:	d527      	bpl.n	8008fa2 <__ssputs_r+0x8e>
 8008f52:	4629      	mov	r1, r5
 8008f54:	f7ff fbd8 	bl	8008708 <_malloc_r>
 8008f58:	4606      	mov	r6, r0
 8008f5a:	b360      	cbz	r0, 8008fb6 <__ssputs_r+0xa2>
 8008f5c:	6921      	ldr	r1, [r4, #16]
 8008f5e:	464a      	mov	r2, r9
 8008f60:	f000 fa06 	bl	8009370 <memcpy>
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f6e:	81a3      	strh	r3, [r4, #12]
 8008f70:	6126      	str	r6, [r4, #16]
 8008f72:	6165      	str	r5, [r4, #20]
 8008f74:	444e      	add	r6, r9
 8008f76:	eba5 0509 	sub.w	r5, r5, r9
 8008f7a:	6026      	str	r6, [r4, #0]
 8008f7c:	60a5      	str	r5, [r4, #8]
 8008f7e:	463e      	mov	r6, r7
 8008f80:	42be      	cmp	r6, r7
 8008f82:	d900      	bls.n	8008f86 <__ssputs_r+0x72>
 8008f84:	463e      	mov	r6, r7
 8008f86:	6820      	ldr	r0, [r4, #0]
 8008f88:	4632      	mov	r2, r6
 8008f8a:	4641      	mov	r1, r8
 8008f8c:	f000 f9c6 	bl	800931c <memmove>
 8008f90:	68a3      	ldr	r3, [r4, #8]
 8008f92:	1b9b      	subs	r3, r3, r6
 8008f94:	60a3      	str	r3, [r4, #8]
 8008f96:	6823      	ldr	r3, [r4, #0]
 8008f98:	4433      	add	r3, r6
 8008f9a:	6023      	str	r3, [r4, #0]
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa2:	462a      	mov	r2, r5
 8008fa4:	f000 fa36 	bl	8009414 <_realloc_r>
 8008fa8:	4606      	mov	r6, r0
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d1e0      	bne.n	8008f70 <__ssputs_r+0x5c>
 8008fae:	6921      	ldr	r1, [r4, #16]
 8008fb0:	4650      	mov	r0, sl
 8008fb2:	f7ff fb35 	bl	8008620 <_free_r>
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	f8ca 3000 	str.w	r3, [sl]
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fc2:	81a3      	strh	r3, [r4, #12]
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	e7e9      	b.n	8008f9e <__ssputs_r+0x8a>
	...

08008fcc <_svfiprintf_r>:
 8008fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	4698      	mov	r8, r3
 8008fd2:	898b      	ldrh	r3, [r1, #12]
 8008fd4:	061b      	lsls	r3, r3, #24
 8008fd6:	b09d      	sub	sp, #116	@ 0x74
 8008fd8:	4607      	mov	r7, r0
 8008fda:	460d      	mov	r5, r1
 8008fdc:	4614      	mov	r4, r2
 8008fde:	d510      	bpl.n	8009002 <_svfiprintf_r+0x36>
 8008fe0:	690b      	ldr	r3, [r1, #16]
 8008fe2:	b973      	cbnz	r3, 8009002 <_svfiprintf_r+0x36>
 8008fe4:	2140      	movs	r1, #64	@ 0x40
 8008fe6:	f7ff fb8f 	bl	8008708 <_malloc_r>
 8008fea:	6028      	str	r0, [r5, #0]
 8008fec:	6128      	str	r0, [r5, #16]
 8008fee:	b930      	cbnz	r0, 8008ffe <_svfiprintf_r+0x32>
 8008ff0:	230c      	movs	r3, #12
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff8:	b01d      	add	sp, #116	@ 0x74
 8008ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffe:	2340      	movs	r3, #64	@ 0x40
 8009000:	616b      	str	r3, [r5, #20]
 8009002:	2300      	movs	r3, #0
 8009004:	9309      	str	r3, [sp, #36]	@ 0x24
 8009006:	2320      	movs	r3, #32
 8009008:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800900c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009010:	2330      	movs	r3, #48	@ 0x30
 8009012:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80091b0 <_svfiprintf_r+0x1e4>
 8009016:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800901a:	f04f 0901 	mov.w	r9, #1
 800901e:	4623      	mov	r3, r4
 8009020:	469a      	mov	sl, r3
 8009022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009026:	b10a      	cbz	r2, 800902c <_svfiprintf_r+0x60>
 8009028:	2a25      	cmp	r2, #37	@ 0x25
 800902a:	d1f9      	bne.n	8009020 <_svfiprintf_r+0x54>
 800902c:	ebba 0b04 	subs.w	fp, sl, r4
 8009030:	d00b      	beq.n	800904a <_svfiprintf_r+0x7e>
 8009032:	465b      	mov	r3, fp
 8009034:	4622      	mov	r2, r4
 8009036:	4629      	mov	r1, r5
 8009038:	4638      	mov	r0, r7
 800903a:	f7ff ff6b 	bl	8008f14 <__ssputs_r>
 800903e:	3001      	adds	r0, #1
 8009040:	f000 80a7 	beq.w	8009192 <_svfiprintf_r+0x1c6>
 8009044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009046:	445a      	add	r2, fp
 8009048:	9209      	str	r2, [sp, #36]	@ 0x24
 800904a:	f89a 3000 	ldrb.w	r3, [sl]
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 809f 	beq.w	8009192 <_svfiprintf_r+0x1c6>
 8009054:	2300      	movs	r3, #0
 8009056:	f04f 32ff 	mov.w	r2, #4294967295
 800905a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800905e:	f10a 0a01 	add.w	sl, sl, #1
 8009062:	9304      	str	r3, [sp, #16]
 8009064:	9307      	str	r3, [sp, #28]
 8009066:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800906a:	931a      	str	r3, [sp, #104]	@ 0x68
 800906c:	4654      	mov	r4, sl
 800906e:	2205      	movs	r2, #5
 8009070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009074:	484e      	ldr	r0, [pc, #312]	@ (80091b0 <_svfiprintf_r+0x1e4>)
 8009076:	f7f7 f8ab 	bl	80001d0 <memchr>
 800907a:	9a04      	ldr	r2, [sp, #16]
 800907c:	b9d8      	cbnz	r0, 80090b6 <_svfiprintf_r+0xea>
 800907e:	06d0      	lsls	r0, r2, #27
 8009080:	bf44      	itt	mi
 8009082:	2320      	movmi	r3, #32
 8009084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009088:	0711      	lsls	r1, r2, #28
 800908a:	bf44      	itt	mi
 800908c:	232b      	movmi	r3, #43	@ 0x2b
 800908e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009092:	f89a 3000 	ldrb.w	r3, [sl]
 8009096:	2b2a      	cmp	r3, #42	@ 0x2a
 8009098:	d015      	beq.n	80090c6 <_svfiprintf_r+0xfa>
 800909a:	9a07      	ldr	r2, [sp, #28]
 800909c:	4654      	mov	r4, sl
 800909e:	2000      	movs	r0, #0
 80090a0:	f04f 0c0a 	mov.w	ip, #10
 80090a4:	4621      	mov	r1, r4
 80090a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090aa:	3b30      	subs	r3, #48	@ 0x30
 80090ac:	2b09      	cmp	r3, #9
 80090ae:	d94b      	bls.n	8009148 <_svfiprintf_r+0x17c>
 80090b0:	b1b0      	cbz	r0, 80090e0 <_svfiprintf_r+0x114>
 80090b2:	9207      	str	r2, [sp, #28]
 80090b4:	e014      	b.n	80090e0 <_svfiprintf_r+0x114>
 80090b6:	eba0 0308 	sub.w	r3, r0, r8
 80090ba:	fa09 f303 	lsl.w	r3, r9, r3
 80090be:	4313      	orrs	r3, r2
 80090c0:	9304      	str	r3, [sp, #16]
 80090c2:	46a2      	mov	sl, r4
 80090c4:	e7d2      	b.n	800906c <_svfiprintf_r+0xa0>
 80090c6:	9b03      	ldr	r3, [sp, #12]
 80090c8:	1d19      	adds	r1, r3, #4
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	9103      	str	r1, [sp, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bfbb      	ittet	lt
 80090d2:	425b      	neglt	r3, r3
 80090d4:	f042 0202 	orrlt.w	r2, r2, #2
 80090d8:	9307      	strge	r3, [sp, #28]
 80090da:	9307      	strlt	r3, [sp, #28]
 80090dc:	bfb8      	it	lt
 80090de:	9204      	strlt	r2, [sp, #16]
 80090e0:	7823      	ldrb	r3, [r4, #0]
 80090e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80090e4:	d10a      	bne.n	80090fc <_svfiprintf_r+0x130>
 80090e6:	7863      	ldrb	r3, [r4, #1]
 80090e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80090ea:	d132      	bne.n	8009152 <_svfiprintf_r+0x186>
 80090ec:	9b03      	ldr	r3, [sp, #12]
 80090ee:	1d1a      	adds	r2, r3, #4
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	9203      	str	r2, [sp, #12]
 80090f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090f8:	3402      	adds	r4, #2
 80090fa:	9305      	str	r3, [sp, #20]
 80090fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80091c0 <_svfiprintf_r+0x1f4>
 8009100:	7821      	ldrb	r1, [r4, #0]
 8009102:	2203      	movs	r2, #3
 8009104:	4650      	mov	r0, sl
 8009106:	f7f7 f863 	bl	80001d0 <memchr>
 800910a:	b138      	cbz	r0, 800911c <_svfiprintf_r+0x150>
 800910c:	9b04      	ldr	r3, [sp, #16]
 800910e:	eba0 000a 	sub.w	r0, r0, sl
 8009112:	2240      	movs	r2, #64	@ 0x40
 8009114:	4082      	lsls	r2, r0
 8009116:	4313      	orrs	r3, r2
 8009118:	3401      	adds	r4, #1
 800911a:	9304      	str	r3, [sp, #16]
 800911c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009120:	4824      	ldr	r0, [pc, #144]	@ (80091b4 <_svfiprintf_r+0x1e8>)
 8009122:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009126:	2206      	movs	r2, #6
 8009128:	f7f7 f852 	bl	80001d0 <memchr>
 800912c:	2800      	cmp	r0, #0
 800912e:	d036      	beq.n	800919e <_svfiprintf_r+0x1d2>
 8009130:	4b21      	ldr	r3, [pc, #132]	@ (80091b8 <_svfiprintf_r+0x1ec>)
 8009132:	bb1b      	cbnz	r3, 800917c <_svfiprintf_r+0x1b0>
 8009134:	9b03      	ldr	r3, [sp, #12]
 8009136:	3307      	adds	r3, #7
 8009138:	f023 0307 	bic.w	r3, r3, #7
 800913c:	3308      	adds	r3, #8
 800913e:	9303      	str	r3, [sp, #12]
 8009140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009142:	4433      	add	r3, r6
 8009144:	9309      	str	r3, [sp, #36]	@ 0x24
 8009146:	e76a      	b.n	800901e <_svfiprintf_r+0x52>
 8009148:	fb0c 3202 	mla	r2, ip, r2, r3
 800914c:	460c      	mov	r4, r1
 800914e:	2001      	movs	r0, #1
 8009150:	e7a8      	b.n	80090a4 <_svfiprintf_r+0xd8>
 8009152:	2300      	movs	r3, #0
 8009154:	3401      	adds	r4, #1
 8009156:	9305      	str	r3, [sp, #20]
 8009158:	4619      	mov	r1, r3
 800915a:	f04f 0c0a 	mov.w	ip, #10
 800915e:	4620      	mov	r0, r4
 8009160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009164:	3a30      	subs	r2, #48	@ 0x30
 8009166:	2a09      	cmp	r2, #9
 8009168:	d903      	bls.n	8009172 <_svfiprintf_r+0x1a6>
 800916a:	2b00      	cmp	r3, #0
 800916c:	d0c6      	beq.n	80090fc <_svfiprintf_r+0x130>
 800916e:	9105      	str	r1, [sp, #20]
 8009170:	e7c4      	b.n	80090fc <_svfiprintf_r+0x130>
 8009172:	fb0c 2101 	mla	r1, ip, r1, r2
 8009176:	4604      	mov	r4, r0
 8009178:	2301      	movs	r3, #1
 800917a:	e7f0      	b.n	800915e <_svfiprintf_r+0x192>
 800917c:	ab03      	add	r3, sp, #12
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	462a      	mov	r2, r5
 8009182:	4b0e      	ldr	r3, [pc, #56]	@ (80091bc <_svfiprintf_r+0x1f0>)
 8009184:	a904      	add	r1, sp, #16
 8009186:	4638      	mov	r0, r7
 8009188:	f7fd fe92 	bl	8006eb0 <_printf_float>
 800918c:	1c42      	adds	r2, r0, #1
 800918e:	4606      	mov	r6, r0
 8009190:	d1d6      	bne.n	8009140 <_svfiprintf_r+0x174>
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	065b      	lsls	r3, r3, #25
 8009196:	f53f af2d 	bmi.w	8008ff4 <_svfiprintf_r+0x28>
 800919a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800919c:	e72c      	b.n	8008ff8 <_svfiprintf_r+0x2c>
 800919e:	ab03      	add	r3, sp, #12
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	462a      	mov	r2, r5
 80091a4:	4b05      	ldr	r3, [pc, #20]	@ (80091bc <_svfiprintf_r+0x1f0>)
 80091a6:	a904      	add	r1, sp, #16
 80091a8:	4638      	mov	r0, r7
 80091aa:	f7fe f919 	bl	80073e0 <_printf_i>
 80091ae:	e7ed      	b.n	800918c <_svfiprintf_r+0x1c0>
 80091b0:	0800a74a 	.word	0x0800a74a
 80091b4:	0800a754 	.word	0x0800a754
 80091b8:	08006eb1 	.word	0x08006eb1
 80091bc:	08008f15 	.word	0x08008f15
 80091c0:	0800a750 	.word	0x0800a750

080091c4 <__sflush_r>:
 80091c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091cc:	0716      	lsls	r6, r2, #28
 80091ce:	4605      	mov	r5, r0
 80091d0:	460c      	mov	r4, r1
 80091d2:	d454      	bmi.n	800927e <__sflush_r+0xba>
 80091d4:	684b      	ldr	r3, [r1, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	dc02      	bgt.n	80091e0 <__sflush_r+0x1c>
 80091da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091dc:	2b00      	cmp	r3, #0
 80091de:	dd48      	ble.n	8009272 <__sflush_r+0xae>
 80091e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091e2:	2e00      	cmp	r6, #0
 80091e4:	d045      	beq.n	8009272 <__sflush_r+0xae>
 80091e6:	2300      	movs	r3, #0
 80091e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091ec:	682f      	ldr	r7, [r5, #0]
 80091ee:	6a21      	ldr	r1, [r4, #32]
 80091f0:	602b      	str	r3, [r5, #0]
 80091f2:	d030      	beq.n	8009256 <__sflush_r+0x92>
 80091f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	0759      	lsls	r1, r3, #29
 80091fa:	d505      	bpl.n	8009208 <__sflush_r+0x44>
 80091fc:	6863      	ldr	r3, [r4, #4]
 80091fe:	1ad2      	subs	r2, r2, r3
 8009200:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009202:	b10b      	cbz	r3, 8009208 <__sflush_r+0x44>
 8009204:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009206:	1ad2      	subs	r2, r2, r3
 8009208:	2300      	movs	r3, #0
 800920a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800920c:	6a21      	ldr	r1, [r4, #32]
 800920e:	4628      	mov	r0, r5
 8009210:	47b0      	blx	r6
 8009212:	1c43      	adds	r3, r0, #1
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	d106      	bne.n	8009226 <__sflush_r+0x62>
 8009218:	6829      	ldr	r1, [r5, #0]
 800921a:	291d      	cmp	r1, #29
 800921c:	d82b      	bhi.n	8009276 <__sflush_r+0xb2>
 800921e:	4a2a      	ldr	r2, [pc, #168]	@ (80092c8 <__sflush_r+0x104>)
 8009220:	40ca      	lsrs	r2, r1
 8009222:	07d6      	lsls	r6, r2, #31
 8009224:	d527      	bpl.n	8009276 <__sflush_r+0xb2>
 8009226:	2200      	movs	r2, #0
 8009228:	6062      	str	r2, [r4, #4]
 800922a:	04d9      	lsls	r1, r3, #19
 800922c:	6922      	ldr	r2, [r4, #16]
 800922e:	6022      	str	r2, [r4, #0]
 8009230:	d504      	bpl.n	800923c <__sflush_r+0x78>
 8009232:	1c42      	adds	r2, r0, #1
 8009234:	d101      	bne.n	800923a <__sflush_r+0x76>
 8009236:	682b      	ldr	r3, [r5, #0]
 8009238:	b903      	cbnz	r3, 800923c <__sflush_r+0x78>
 800923a:	6560      	str	r0, [r4, #84]	@ 0x54
 800923c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800923e:	602f      	str	r7, [r5, #0]
 8009240:	b1b9      	cbz	r1, 8009272 <__sflush_r+0xae>
 8009242:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009246:	4299      	cmp	r1, r3
 8009248:	d002      	beq.n	8009250 <__sflush_r+0x8c>
 800924a:	4628      	mov	r0, r5
 800924c:	f7ff f9e8 	bl	8008620 <_free_r>
 8009250:	2300      	movs	r3, #0
 8009252:	6363      	str	r3, [r4, #52]	@ 0x34
 8009254:	e00d      	b.n	8009272 <__sflush_r+0xae>
 8009256:	2301      	movs	r3, #1
 8009258:	4628      	mov	r0, r5
 800925a:	47b0      	blx	r6
 800925c:	4602      	mov	r2, r0
 800925e:	1c50      	adds	r0, r2, #1
 8009260:	d1c9      	bne.n	80091f6 <__sflush_r+0x32>
 8009262:	682b      	ldr	r3, [r5, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d0c6      	beq.n	80091f6 <__sflush_r+0x32>
 8009268:	2b1d      	cmp	r3, #29
 800926a:	d001      	beq.n	8009270 <__sflush_r+0xac>
 800926c:	2b16      	cmp	r3, #22
 800926e:	d11e      	bne.n	80092ae <__sflush_r+0xea>
 8009270:	602f      	str	r7, [r5, #0]
 8009272:	2000      	movs	r0, #0
 8009274:	e022      	b.n	80092bc <__sflush_r+0xf8>
 8009276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800927a:	b21b      	sxth	r3, r3
 800927c:	e01b      	b.n	80092b6 <__sflush_r+0xf2>
 800927e:	690f      	ldr	r7, [r1, #16]
 8009280:	2f00      	cmp	r7, #0
 8009282:	d0f6      	beq.n	8009272 <__sflush_r+0xae>
 8009284:	0793      	lsls	r3, r2, #30
 8009286:	680e      	ldr	r6, [r1, #0]
 8009288:	bf08      	it	eq
 800928a:	694b      	ldreq	r3, [r1, #20]
 800928c:	600f      	str	r7, [r1, #0]
 800928e:	bf18      	it	ne
 8009290:	2300      	movne	r3, #0
 8009292:	eba6 0807 	sub.w	r8, r6, r7
 8009296:	608b      	str	r3, [r1, #8]
 8009298:	f1b8 0f00 	cmp.w	r8, #0
 800929c:	dde9      	ble.n	8009272 <__sflush_r+0xae>
 800929e:	6a21      	ldr	r1, [r4, #32]
 80092a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80092a2:	4643      	mov	r3, r8
 80092a4:	463a      	mov	r2, r7
 80092a6:	4628      	mov	r0, r5
 80092a8:	47b0      	blx	r6
 80092aa:	2800      	cmp	r0, #0
 80092ac:	dc08      	bgt.n	80092c0 <__sflush_r+0xfc>
 80092ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092b6:	81a3      	strh	r3, [r4, #12]
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c0:	4407      	add	r7, r0
 80092c2:	eba8 0800 	sub.w	r8, r8, r0
 80092c6:	e7e7      	b.n	8009298 <__sflush_r+0xd4>
 80092c8:	20400001 	.word	0x20400001

080092cc <_fflush_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	690b      	ldr	r3, [r1, #16]
 80092d0:	4605      	mov	r5, r0
 80092d2:	460c      	mov	r4, r1
 80092d4:	b913      	cbnz	r3, 80092dc <_fflush_r+0x10>
 80092d6:	2500      	movs	r5, #0
 80092d8:	4628      	mov	r0, r5
 80092da:	bd38      	pop	{r3, r4, r5, pc}
 80092dc:	b118      	cbz	r0, 80092e6 <_fflush_r+0x1a>
 80092de:	6a03      	ldr	r3, [r0, #32]
 80092e0:	b90b      	cbnz	r3, 80092e6 <_fflush_r+0x1a>
 80092e2:	f7fe fa27 	bl	8007734 <__sinit>
 80092e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d0f3      	beq.n	80092d6 <_fflush_r+0xa>
 80092ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092f0:	07d0      	lsls	r0, r2, #31
 80092f2:	d404      	bmi.n	80092fe <_fflush_r+0x32>
 80092f4:	0599      	lsls	r1, r3, #22
 80092f6:	d402      	bmi.n	80092fe <_fflush_r+0x32>
 80092f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092fa:	f7fe fb34 	bl	8007966 <__retarget_lock_acquire_recursive>
 80092fe:	4628      	mov	r0, r5
 8009300:	4621      	mov	r1, r4
 8009302:	f7ff ff5f 	bl	80091c4 <__sflush_r>
 8009306:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009308:	07da      	lsls	r2, r3, #31
 800930a:	4605      	mov	r5, r0
 800930c:	d4e4      	bmi.n	80092d8 <_fflush_r+0xc>
 800930e:	89a3      	ldrh	r3, [r4, #12]
 8009310:	059b      	lsls	r3, r3, #22
 8009312:	d4e1      	bmi.n	80092d8 <_fflush_r+0xc>
 8009314:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009316:	f7fe fb27 	bl	8007968 <__retarget_lock_release_recursive>
 800931a:	e7dd      	b.n	80092d8 <_fflush_r+0xc>

0800931c <memmove>:
 800931c:	4288      	cmp	r0, r1
 800931e:	b510      	push	{r4, lr}
 8009320:	eb01 0402 	add.w	r4, r1, r2
 8009324:	d902      	bls.n	800932c <memmove+0x10>
 8009326:	4284      	cmp	r4, r0
 8009328:	4623      	mov	r3, r4
 800932a:	d807      	bhi.n	800933c <memmove+0x20>
 800932c:	1e43      	subs	r3, r0, #1
 800932e:	42a1      	cmp	r1, r4
 8009330:	d008      	beq.n	8009344 <memmove+0x28>
 8009332:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009336:	f803 2f01 	strb.w	r2, [r3, #1]!
 800933a:	e7f8      	b.n	800932e <memmove+0x12>
 800933c:	4402      	add	r2, r0
 800933e:	4601      	mov	r1, r0
 8009340:	428a      	cmp	r2, r1
 8009342:	d100      	bne.n	8009346 <memmove+0x2a>
 8009344:	bd10      	pop	{r4, pc}
 8009346:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800934a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800934e:	e7f7      	b.n	8009340 <memmove+0x24>

08009350 <_sbrk_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4d06      	ldr	r5, [pc, #24]	@ (800936c <_sbrk_r+0x1c>)
 8009354:	2300      	movs	r3, #0
 8009356:	4604      	mov	r4, r0
 8009358:	4608      	mov	r0, r1
 800935a:	602b      	str	r3, [r5, #0]
 800935c:	f7f8 fcf2 	bl	8001d44 <_sbrk>
 8009360:	1c43      	adds	r3, r0, #1
 8009362:	d102      	bne.n	800936a <_sbrk_r+0x1a>
 8009364:	682b      	ldr	r3, [r5, #0]
 8009366:	b103      	cbz	r3, 800936a <_sbrk_r+0x1a>
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	bd38      	pop	{r3, r4, r5, pc}
 800936c:	20000438 	.word	0x20000438

08009370 <memcpy>:
 8009370:	440a      	add	r2, r1
 8009372:	4291      	cmp	r1, r2
 8009374:	f100 33ff 	add.w	r3, r0, #4294967295
 8009378:	d100      	bne.n	800937c <memcpy+0xc>
 800937a:	4770      	bx	lr
 800937c:	b510      	push	{r4, lr}
 800937e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009386:	4291      	cmp	r1, r2
 8009388:	d1f9      	bne.n	800937e <memcpy+0xe>
 800938a:	bd10      	pop	{r4, pc}

0800938c <__assert_func>:
 800938c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800938e:	4614      	mov	r4, r2
 8009390:	461a      	mov	r2, r3
 8009392:	4b09      	ldr	r3, [pc, #36]	@ (80093b8 <__assert_func+0x2c>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4605      	mov	r5, r0
 8009398:	68d8      	ldr	r0, [r3, #12]
 800939a:	b14c      	cbz	r4, 80093b0 <__assert_func+0x24>
 800939c:	4b07      	ldr	r3, [pc, #28]	@ (80093bc <__assert_func+0x30>)
 800939e:	9100      	str	r1, [sp, #0]
 80093a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093a4:	4906      	ldr	r1, [pc, #24]	@ (80093c0 <__assert_func+0x34>)
 80093a6:	462b      	mov	r3, r5
 80093a8:	f000 f870 	bl	800948c <fiprintf>
 80093ac:	f000 f880 	bl	80094b0 <abort>
 80093b0:	4b04      	ldr	r3, [pc, #16]	@ (80093c4 <__assert_func+0x38>)
 80093b2:	461c      	mov	r4, r3
 80093b4:	e7f3      	b.n	800939e <__assert_func+0x12>
 80093b6:	bf00      	nop
 80093b8:	2000001c 	.word	0x2000001c
 80093bc:	0800a765 	.word	0x0800a765
 80093c0:	0800a772 	.word	0x0800a772
 80093c4:	0800a7a0 	.word	0x0800a7a0

080093c8 <_calloc_r>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	fba1 5402 	umull	r5, r4, r1, r2
 80093ce:	b934      	cbnz	r4, 80093de <_calloc_r+0x16>
 80093d0:	4629      	mov	r1, r5
 80093d2:	f7ff f999 	bl	8008708 <_malloc_r>
 80093d6:	4606      	mov	r6, r0
 80093d8:	b928      	cbnz	r0, 80093e6 <_calloc_r+0x1e>
 80093da:	4630      	mov	r0, r6
 80093dc:	bd70      	pop	{r4, r5, r6, pc}
 80093de:	220c      	movs	r2, #12
 80093e0:	6002      	str	r2, [r0, #0]
 80093e2:	2600      	movs	r6, #0
 80093e4:	e7f9      	b.n	80093da <_calloc_r+0x12>
 80093e6:	462a      	mov	r2, r5
 80093e8:	4621      	mov	r1, r4
 80093ea:	f7fe fa3e 	bl	800786a <memset>
 80093ee:	e7f4      	b.n	80093da <_calloc_r+0x12>

080093f0 <__ascii_mbtowc>:
 80093f0:	b082      	sub	sp, #8
 80093f2:	b901      	cbnz	r1, 80093f6 <__ascii_mbtowc+0x6>
 80093f4:	a901      	add	r1, sp, #4
 80093f6:	b142      	cbz	r2, 800940a <__ascii_mbtowc+0x1a>
 80093f8:	b14b      	cbz	r3, 800940e <__ascii_mbtowc+0x1e>
 80093fa:	7813      	ldrb	r3, [r2, #0]
 80093fc:	600b      	str	r3, [r1, #0]
 80093fe:	7812      	ldrb	r2, [r2, #0]
 8009400:	1e10      	subs	r0, r2, #0
 8009402:	bf18      	it	ne
 8009404:	2001      	movne	r0, #1
 8009406:	b002      	add	sp, #8
 8009408:	4770      	bx	lr
 800940a:	4610      	mov	r0, r2
 800940c:	e7fb      	b.n	8009406 <__ascii_mbtowc+0x16>
 800940e:	f06f 0001 	mvn.w	r0, #1
 8009412:	e7f8      	b.n	8009406 <__ascii_mbtowc+0x16>

08009414 <_realloc_r>:
 8009414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009418:	4607      	mov	r7, r0
 800941a:	4614      	mov	r4, r2
 800941c:	460d      	mov	r5, r1
 800941e:	b921      	cbnz	r1, 800942a <_realloc_r+0x16>
 8009420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009424:	4611      	mov	r1, r2
 8009426:	f7ff b96f 	b.w	8008708 <_malloc_r>
 800942a:	b92a      	cbnz	r2, 8009438 <_realloc_r+0x24>
 800942c:	f7ff f8f8 	bl	8008620 <_free_r>
 8009430:	4625      	mov	r5, r4
 8009432:	4628      	mov	r0, r5
 8009434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009438:	f000 f841 	bl	80094be <_malloc_usable_size_r>
 800943c:	4284      	cmp	r4, r0
 800943e:	4606      	mov	r6, r0
 8009440:	d802      	bhi.n	8009448 <_realloc_r+0x34>
 8009442:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009446:	d8f4      	bhi.n	8009432 <_realloc_r+0x1e>
 8009448:	4621      	mov	r1, r4
 800944a:	4638      	mov	r0, r7
 800944c:	f7ff f95c 	bl	8008708 <_malloc_r>
 8009450:	4680      	mov	r8, r0
 8009452:	b908      	cbnz	r0, 8009458 <_realloc_r+0x44>
 8009454:	4645      	mov	r5, r8
 8009456:	e7ec      	b.n	8009432 <_realloc_r+0x1e>
 8009458:	42b4      	cmp	r4, r6
 800945a:	4622      	mov	r2, r4
 800945c:	4629      	mov	r1, r5
 800945e:	bf28      	it	cs
 8009460:	4632      	movcs	r2, r6
 8009462:	f7ff ff85 	bl	8009370 <memcpy>
 8009466:	4629      	mov	r1, r5
 8009468:	4638      	mov	r0, r7
 800946a:	f7ff f8d9 	bl	8008620 <_free_r>
 800946e:	e7f1      	b.n	8009454 <_realloc_r+0x40>

08009470 <__ascii_wctomb>:
 8009470:	4603      	mov	r3, r0
 8009472:	4608      	mov	r0, r1
 8009474:	b141      	cbz	r1, 8009488 <__ascii_wctomb+0x18>
 8009476:	2aff      	cmp	r2, #255	@ 0xff
 8009478:	d904      	bls.n	8009484 <__ascii_wctomb+0x14>
 800947a:	228a      	movs	r2, #138	@ 0x8a
 800947c:	601a      	str	r2, [r3, #0]
 800947e:	f04f 30ff 	mov.w	r0, #4294967295
 8009482:	4770      	bx	lr
 8009484:	700a      	strb	r2, [r1, #0]
 8009486:	2001      	movs	r0, #1
 8009488:	4770      	bx	lr
	...

0800948c <fiprintf>:
 800948c:	b40e      	push	{r1, r2, r3}
 800948e:	b503      	push	{r0, r1, lr}
 8009490:	4601      	mov	r1, r0
 8009492:	ab03      	add	r3, sp, #12
 8009494:	4805      	ldr	r0, [pc, #20]	@ (80094ac <fiprintf+0x20>)
 8009496:	f853 2b04 	ldr.w	r2, [r3], #4
 800949a:	6800      	ldr	r0, [r0, #0]
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	f000 f83f 	bl	8009520 <_vfiprintf_r>
 80094a2:	b002      	add	sp, #8
 80094a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80094a8:	b003      	add	sp, #12
 80094aa:	4770      	bx	lr
 80094ac:	2000001c 	.word	0x2000001c

080094b0 <abort>:
 80094b0:	b508      	push	{r3, lr}
 80094b2:	2006      	movs	r0, #6
 80094b4:	f000 fa08 	bl	80098c8 <raise>
 80094b8:	2001      	movs	r0, #1
 80094ba:	f7f8 fbcb 	bl	8001c54 <_exit>

080094be <_malloc_usable_size_r>:
 80094be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094c2:	1f18      	subs	r0, r3, #4
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bfbc      	itt	lt
 80094c8:	580b      	ldrlt	r3, [r1, r0]
 80094ca:	18c0      	addlt	r0, r0, r3
 80094cc:	4770      	bx	lr

080094ce <__sfputc_r>:
 80094ce:	6893      	ldr	r3, [r2, #8]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	b410      	push	{r4}
 80094d6:	6093      	str	r3, [r2, #8]
 80094d8:	da08      	bge.n	80094ec <__sfputc_r+0x1e>
 80094da:	6994      	ldr	r4, [r2, #24]
 80094dc:	42a3      	cmp	r3, r4
 80094de:	db01      	blt.n	80094e4 <__sfputc_r+0x16>
 80094e0:	290a      	cmp	r1, #10
 80094e2:	d103      	bne.n	80094ec <__sfputc_r+0x1e>
 80094e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094e8:	f000 b932 	b.w	8009750 <__swbuf_r>
 80094ec:	6813      	ldr	r3, [r2, #0]
 80094ee:	1c58      	adds	r0, r3, #1
 80094f0:	6010      	str	r0, [r2, #0]
 80094f2:	7019      	strb	r1, [r3, #0]
 80094f4:	4608      	mov	r0, r1
 80094f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <__sfputs_r>:
 80094fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fe:	4606      	mov	r6, r0
 8009500:	460f      	mov	r7, r1
 8009502:	4614      	mov	r4, r2
 8009504:	18d5      	adds	r5, r2, r3
 8009506:	42ac      	cmp	r4, r5
 8009508:	d101      	bne.n	800950e <__sfputs_r+0x12>
 800950a:	2000      	movs	r0, #0
 800950c:	e007      	b.n	800951e <__sfputs_r+0x22>
 800950e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009512:	463a      	mov	r2, r7
 8009514:	4630      	mov	r0, r6
 8009516:	f7ff ffda 	bl	80094ce <__sfputc_r>
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	d1f3      	bne.n	8009506 <__sfputs_r+0xa>
 800951e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009520 <_vfiprintf_r>:
 8009520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009524:	460d      	mov	r5, r1
 8009526:	b09d      	sub	sp, #116	@ 0x74
 8009528:	4614      	mov	r4, r2
 800952a:	4698      	mov	r8, r3
 800952c:	4606      	mov	r6, r0
 800952e:	b118      	cbz	r0, 8009538 <_vfiprintf_r+0x18>
 8009530:	6a03      	ldr	r3, [r0, #32]
 8009532:	b90b      	cbnz	r3, 8009538 <_vfiprintf_r+0x18>
 8009534:	f7fe f8fe 	bl	8007734 <__sinit>
 8009538:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800953a:	07d9      	lsls	r1, r3, #31
 800953c:	d405      	bmi.n	800954a <_vfiprintf_r+0x2a>
 800953e:	89ab      	ldrh	r3, [r5, #12]
 8009540:	059a      	lsls	r2, r3, #22
 8009542:	d402      	bmi.n	800954a <_vfiprintf_r+0x2a>
 8009544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009546:	f7fe fa0e 	bl	8007966 <__retarget_lock_acquire_recursive>
 800954a:	89ab      	ldrh	r3, [r5, #12]
 800954c:	071b      	lsls	r3, r3, #28
 800954e:	d501      	bpl.n	8009554 <_vfiprintf_r+0x34>
 8009550:	692b      	ldr	r3, [r5, #16]
 8009552:	b99b      	cbnz	r3, 800957c <_vfiprintf_r+0x5c>
 8009554:	4629      	mov	r1, r5
 8009556:	4630      	mov	r0, r6
 8009558:	f000 f938 	bl	80097cc <__swsetup_r>
 800955c:	b170      	cbz	r0, 800957c <_vfiprintf_r+0x5c>
 800955e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009560:	07dc      	lsls	r4, r3, #31
 8009562:	d504      	bpl.n	800956e <_vfiprintf_r+0x4e>
 8009564:	f04f 30ff 	mov.w	r0, #4294967295
 8009568:	b01d      	add	sp, #116	@ 0x74
 800956a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956e:	89ab      	ldrh	r3, [r5, #12]
 8009570:	0598      	lsls	r0, r3, #22
 8009572:	d4f7      	bmi.n	8009564 <_vfiprintf_r+0x44>
 8009574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009576:	f7fe f9f7 	bl	8007968 <__retarget_lock_release_recursive>
 800957a:	e7f3      	b.n	8009564 <_vfiprintf_r+0x44>
 800957c:	2300      	movs	r3, #0
 800957e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009580:	2320      	movs	r3, #32
 8009582:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009586:	f8cd 800c 	str.w	r8, [sp, #12]
 800958a:	2330      	movs	r3, #48	@ 0x30
 800958c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800973c <_vfiprintf_r+0x21c>
 8009590:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009594:	f04f 0901 	mov.w	r9, #1
 8009598:	4623      	mov	r3, r4
 800959a:	469a      	mov	sl, r3
 800959c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095a0:	b10a      	cbz	r2, 80095a6 <_vfiprintf_r+0x86>
 80095a2:	2a25      	cmp	r2, #37	@ 0x25
 80095a4:	d1f9      	bne.n	800959a <_vfiprintf_r+0x7a>
 80095a6:	ebba 0b04 	subs.w	fp, sl, r4
 80095aa:	d00b      	beq.n	80095c4 <_vfiprintf_r+0xa4>
 80095ac:	465b      	mov	r3, fp
 80095ae:	4622      	mov	r2, r4
 80095b0:	4629      	mov	r1, r5
 80095b2:	4630      	mov	r0, r6
 80095b4:	f7ff ffa2 	bl	80094fc <__sfputs_r>
 80095b8:	3001      	adds	r0, #1
 80095ba:	f000 80a7 	beq.w	800970c <_vfiprintf_r+0x1ec>
 80095be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095c0:	445a      	add	r2, fp
 80095c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80095c4:	f89a 3000 	ldrb.w	r3, [sl]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 809f 	beq.w	800970c <_vfiprintf_r+0x1ec>
 80095ce:	2300      	movs	r3, #0
 80095d0:	f04f 32ff 	mov.w	r2, #4294967295
 80095d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095d8:	f10a 0a01 	add.w	sl, sl, #1
 80095dc:	9304      	str	r3, [sp, #16]
 80095de:	9307      	str	r3, [sp, #28]
 80095e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80095e6:	4654      	mov	r4, sl
 80095e8:	2205      	movs	r2, #5
 80095ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ee:	4853      	ldr	r0, [pc, #332]	@ (800973c <_vfiprintf_r+0x21c>)
 80095f0:	f7f6 fdee 	bl	80001d0 <memchr>
 80095f4:	9a04      	ldr	r2, [sp, #16]
 80095f6:	b9d8      	cbnz	r0, 8009630 <_vfiprintf_r+0x110>
 80095f8:	06d1      	lsls	r1, r2, #27
 80095fa:	bf44      	itt	mi
 80095fc:	2320      	movmi	r3, #32
 80095fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009602:	0713      	lsls	r3, r2, #28
 8009604:	bf44      	itt	mi
 8009606:	232b      	movmi	r3, #43	@ 0x2b
 8009608:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800960c:	f89a 3000 	ldrb.w	r3, [sl]
 8009610:	2b2a      	cmp	r3, #42	@ 0x2a
 8009612:	d015      	beq.n	8009640 <_vfiprintf_r+0x120>
 8009614:	9a07      	ldr	r2, [sp, #28]
 8009616:	4654      	mov	r4, sl
 8009618:	2000      	movs	r0, #0
 800961a:	f04f 0c0a 	mov.w	ip, #10
 800961e:	4621      	mov	r1, r4
 8009620:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009624:	3b30      	subs	r3, #48	@ 0x30
 8009626:	2b09      	cmp	r3, #9
 8009628:	d94b      	bls.n	80096c2 <_vfiprintf_r+0x1a2>
 800962a:	b1b0      	cbz	r0, 800965a <_vfiprintf_r+0x13a>
 800962c:	9207      	str	r2, [sp, #28]
 800962e:	e014      	b.n	800965a <_vfiprintf_r+0x13a>
 8009630:	eba0 0308 	sub.w	r3, r0, r8
 8009634:	fa09 f303 	lsl.w	r3, r9, r3
 8009638:	4313      	orrs	r3, r2
 800963a:	9304      	str	r3, [sp, #16]
 800963c:	46a2      	mov	sl, r4
 800963e:	e7d2      	b.n	80095e6 <_vfiprintf_r+0xc6>
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	1d19      	adds	r1, r3, #4
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	9103      	str	r1, [sp, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	bfbb      	ittet	lt
 800964c:	425b      	neglt	r3, r3
 800964e:	f042 0202 	orrlt.w	r2, r2, #2
 8009652:	9307      	strge	r3, [sp, #28]
 8009654:	9307      	strlt	r3, [sp, #28]
 8009656:	bfb8      	it	lt
 8009658:	9204      	strlt	r2, [sp, #16]
 800965a:	7823      	ldrb	r3, [r4, #0]
 800965c:	2b2e      	cmp	r3, #46	@ 0x2e
 800965e:	d10a      	bne.n	8009676 <_vfiprintf_r+0x156>
 8009660:	7863      	ldrb	r3, [r4, #1]
 8009662:	2b2a      	cmp	r3, #42	@ 0x2a
 8009664:	d132      	bne.n	80096cc <_vfiprintf_r+0x1ac>
 8009666:	9b03      	ldr	r3, [sp, #12]
 8009668:	1d1a      	adds	r2, r3, #4
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	9203      	str	r2, [sp, #12]
 800966e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009672:	3402      	adds	r4, #2
 8009674:	9305      	str	r3, [sp, #20]
 8009676:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800974c <_vfiprintf_r+0x22c>
 800967a:	7821      	ldrb	r1, [r4, #0]
 800967c:	2203      	movs	r2, #3
 800967e:	4650      	mov	r0, sl
 8009680:	f7f6 fda6 	bl	80001d0 <memchr>
 8009684:	b138      	cbz	r0, 8009696 <_vfiprintf_r+0x176>
 8009686:	9b04      	ldr	r3, [sp, #16]
 8009688:	eba0 000a 	sub.w	r0, r0, sl
 800968c:	2240      	movs	r2, #64	@ 0x40
 800968e:	4082      	lsls	r2, r0
 8009690:	4313      	orrs	r3, r2
 8009692:	3401      	adds	r4, #1
 8009694:	9304      	str	r3, [sp, #16]
 8009696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969a:	4829      	ldr	r0, [pc, #164]	@ (8009740 <_vfiprintf_r+0x220>)
 800969c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096a0:	2206      	movs	r2, #6
 80096a2:	f7f6 fd95 	bl	80001d0 <memchr>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d03f      	beq.n	800972a <_vfiprintf_r+0x20a>
 80096aa:	4b26      	ldr	r3, [pc, #152]	@ (8009744 <_vfiprintf_r+0x224>)
 80096ac:	bb1b      	cbnz	r3, 80096f6 <_vfiprintf_r+0x1d6>
 80096ae:	9b03      	ldr	r3, [sp, #12]
 80096b0:	3307      	adds	r3, #7
 80096b2:	f023 0307 	bic.w	r3, r3, #7
 80096b6:	3308      	adds	r3, #8
 80096b8:	9303      	str	r3, [sp, #12]
 80096ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096bc:	443b      	add	r3, r7
 80096be:	9309      	str	r3, [sp, #36]	@ 0x24
 80096c0:	e76a      	b.n	8009598 <_vfiprintf_r+0x78>
 80096c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80096c6:	460c      	mov	r4, r1
 80096c8:	2001      	movs	r0, #1
 80096ca:	e7a8      	b.n	800961e <_vfiprintf_r+0xfe>
 80096cc:	2300      	movs	r3, #0
 80096ce:	3401      	adds	r4, #1
 80096d0:	9305      	str	r3, [sp, #20]
 80096d2:	4619      	mov	r1, r3
 80096d4:	f04f 0c0a 	mov.w	ip, #10
 80096d8:	4620      	mov	r0, r4
 80096da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096de:	3a30      	subs	r2, #48	@ 0x30
 80096e0:	2a09      	cmp	r2, #9
 80096e2:	d903      	bls.n	80096ec <_vfiprintf_r+0x1cc>
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d0c6      	beq.n	8009676 <_vfiprintf_r+0x156>
 80096e8:	9105      	str	r1, [sp, #20]
 80096ea:	e7c4      	b.n	8009676 <_vfiprintf_r+0x156>
 80096ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80096f0:	4604      	mov	r4, r0
 80096f2:	2301      	movs	r3, #1
 80096f4:	e7f0      	b.n	80096d8 <_vfiprintf_r+0x1b8>
 80096f6:	ab03      	add	r3, sp, #12
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	462a      	mov	r2, r5
 80096fc:	4b12      	ldr	r3, [pc, #72]	@ (8009748 <_vfiprintf_r+0x228>)
 80096fe:	a904      	add	r1, sp, #16
 8009700:	4630      	mov	r0, r6
 8009702:	f7fd fbd5 	bl	8006eb0 <_printf_float>
 8009706:	4607      	mov	r7, r0
 8009708:	1c78      	adds	r0, r7, #1
 800970a:	d1d6      	bne.n	80096ba <_vfiprintf_r+0x19a>
 800970c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800970e:	07d9      	lsls	r1, r3, #31
 8009710:	d405      	bmi.n	800971e <_vfiprintf_r+0x1fe>
 8009712:	89ab      	ldrh	r3, [r5, #12]
 8009714:	059a      	lsls	r2, r3, #22
 8009716:	d402      	bmi.n	800971e <_vfiprintf_r+0x1fe>
 8009718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800971a:	f7fe f925 	bl	8007968 <__retarget_lock_release_recursive>
 800971e:	89ab      	ldrh	r3, [r5, #12]
 8009720:	065b      	lsls	r3, r3, #25
 8009722:	f53f af1f 	bmi.w	8009564 <_vfiprintf_r+0x44>
 8009726:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009728:	e71e      	b.n	8009568 <_vfiprintf_r+0x48>
 800972a:	ab03      	add	r3, sp, #12
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	462a      	mov	r2, r5
 8009730:	4b05      	ldr	r3, [pc, #20]	@ (8009748 <_vfiprintf_r+0x228>)
 8009732:	a904      	add	r1, sp, #16
 8009734:	4630      	mov	r0, r6
 8009736:	f7fd fe53 	bl	80073e0 <_printf_i>
 800973a:	e7e4      	b.n	8009706 <_vfiprintf_r+0x1e6>
 800973c:	0800a74a 	.word	0x0800a74a
 8009740:	0800a754 	.word	0x0800a754
 8009744:	08006eb1 	.word	0x08006eb1
 8009748:	080094fd 	.word	0x080094fd
 800974c:	0800a750 	.word	0x0800a750

08009750 <__swbuf_r>:
 8009750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009752:	460e      	mov	r6, r1
 8009754:	4614      	mov	r4, r2
 8009756:	4605      	mov	r5, r0
 8009758:	b118      	cbz	r0, 8009762 <__swbuf_r+0x12>
 800975a:	6a03      	ldr	r3, [r0, #32]
 800975c:	b90b      	cbnz	r3, 8009762 <__swbuf_r+0x12>
 800975e:	f7fd ffe9 	bl	8007734 <__sinit>
 8009762:	69a3      	ldr	r3, [r4, #24]
 8009764:	60a3      	str	r3, [r4, #8]
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	071a      	lsls	r2, r3, #28
 800976a:	d501      	bpl.n	8009770 <__swbuf_r+0x20>
 800976c:	6923      	ldr	r3, [r4, #16]
 800976e:	b943      	cbnz	r3, 8009782 <__swbuf_r+0x32>
 8009770:	4621      	mov	r1, r4
 8009772:	4628      	mov	r0, r5
 8009774:	f000 f82a 	bl	80097cc <__swsetup_r>
 8009778:	b118      	cbz	r0, 8009782 <__swbuf_r+0x32>
 800977a:	f04f 37ff 	mov.w	r7, #4294967295
 800977e:	4638      	mov	r0, r7
 8009780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	6922      	ldr	r2, [r4, #16]
 8009786:	1a98      	subs	r0, r3, r2
 8009788:	6963      	ldr	r3, [r4, #20]
 800978a:	b2f6      	uxtb	r6, r6
 800978c:	4283      	cmp	r3, r0
 800978e:	4637      	mov	r7, r6
 8009790:	dc05      	bgt.n	800979e <__swbuf_r+0x4e>
 8009792:	4621      	mov	r1, r4
 8009794:	4628      	mov	r0, r5
 8009796:	f7ff fd99 	bl	80092cc <_fflush_r>
 800979a:	2800      	cmp	r0, #0
 800979c:	d1ed      	bne.n	800977a <__swbuf_r+0x2a>
 800979e:	68a3      	ldr	r3, [r4, #8]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	60a3      	str	r3, [r4, #8]
 80097a4:	6823      	ldr	r3, [r4, #0]
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	6022      	str	r2, [r4, #0]
 80097aa:	701e      	strb	r6, [r3, #0]
 80097ac:	6962      	ldr	r2, [r4, #20]
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d004      	beq.n	80097be <__swbuf_r+0x6e>
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	07db      	lsls	r3, r3, #31
 80097b8:	d5e1      	bpl.n	800977e <__swbuf_r+0x2e>
 80097ba:	2e0a      	cmp	r6, #10
 80097bc:	d1df      	bne.n	800977e <__swbuf_r+0x2e>
 80097be:	4621      	mov	r1, r4
 80097c0:	4628      	mov	r0, r5
 80097c2:	f7ff fd83 	bl	80092cc <_fflush_r>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	d0d9      	beq.n	800977e <__swbuf_r+0x2e>
 80097ca:	e7d6      	b.n	800977a <__swbuf_r+0x2a>

080097cc <__swsetup_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4b29      	ldr	r3, [pc, #164]	@ (8009874 <__swsetup_r+0xa8>)
 80097d0:	4605      	mov	r5, r0
 80097d2:	6818      	ldr	r0, [r3, #0]
 80097d4:	460c      	mov	r4, r1
 80097d6:	b118      	cbz	r0, 80097e0 <__swsetup_r+0x14>
 80097d8:	6a03      	ldr	r3, [r0, #32]
 80097da:	b90b      	cbnz	r3, 80097e0 <__swsetup_r+0x14>
 80097dc:	f7fd ffaa 	bl	8007734 <__sinit>
 80097e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e4:	0719      	lsls	r1, r3, #28
 80097e6:	d422      	bmi.n	800982e <__swsetup_r+0x62>
 80097e8:	06da      	lsls	r2, r3, #27
 80097ea:	d407      	bmi.n	80097fc <__swsetup_r+0x30>
 80097ec:	2209      	movs	r2, #9
 80097ee:	602a      	str	r2, [r5, #0]
 80097f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	f04f 30ff 	mov.w	r0, #4294967295
 80097fa:	e033      	b.n	8009864 <__swsetup_r+0x98>
 80097fc:	0758      	lsls	r0, r3, #29
 80097fe:	d512      	bpl.n	8009826 <__swsetup_r+0x5a>
 8009800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009802:	b141      	cbz	r1, 8009816 <__swsetup_r+0x4a>
 8009804:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009808:	4299      	cmp	r1, r3
 800980a:	d002      	beq.n	8009812 <__swsetup_r+0x46>
 800980c:	4628      	mov	r0, r5
 800980e:	f7fe ff07 	bl	8008620 <_free_r>
 8009812:	2300      	movs	r3, #0
 8009814:	6363      	str	r3, [r4, #52]	@ 0x34
 8009816:	89a3      	ldrh	r3, [r4, #12]
 8009818:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800981c:	81a3      	strh	r3, [r4, #12]
 800981e:	2300      	movs	r3, #0
 8009820:	6063      	str	r3, [r4, #4]
 8009822:	6923      	ldr	r3, [r4, #16]
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	f043 0308 	orr.w	r3, r3, #8
 800982c:	81a3      	strh	r3, [r4, #12]
 800982e:	6923      	ldr	r3, [r4, #16]
 8009830:	b94b      	cbnz	r3, 8009846 <__swsetup_r+0x7a>
 8009832:	89a3      	ldrh	r3, [r4, #12]
 8009834:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800983c:	d003      	beq.n	8009846 <__swsetup_r+0x7a>
 800983e:	4621      	mov	r1, r4
 8009840:	4628      	mov	r0, r5
 8009842:	f000 f883 	bl	800994c <__smakebuf_r>
 8009846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800984a:	f013 0201 	ands.w	r2, r3, #1
 800984e:	d00a      	beq.n	8009866 <__swsetup_r+0x9a>
 8009850:	2200      	movs	r2, #0
 8009852:	60a2      	str	r2, [r4, #8]
 8009854:	6962      	ldr	r2, [r4, #20]
 8009856:	4252      	negs	r2, r2
 8009858:	61a2      	str	r2, [r4, #24]
 800985a:	6922      	ldr	r2, [r4, #16]
 800985c:	b942      	cbnz	r2, 8009870 <__swsetup_r+0xa4>
 800985e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009862:	d1c5      	bne.n	80097f0 <__swsetup_r+0x24>
 8009864:	bd38      	pop	{r3, r4, r5, pc}
 8009866:	0799      	lsls	r1, r3, #30
 8009868:	bf58      	it	pl
 800986a:	6962      	ldrpl	r2, [r4, #20]
 800986c:	60a2      	str	r2, [r4, #8]
 800986e:	e7f4      	b.n	800985a <__swsetup_r+0x8e>
 8009870:	2000      	movs	r0, #0
 8009872:	e7f7      	b.n	8009864 <__swsetup_r+0x98>
 8009874:	2000001c 	.word	0x2000001c

08009878 <_raise_r>:
 8009878:	291f      	cmp	r1, #31
 800987a:	b538      	push	{r3, r4, r5, lr}
 800987c:	4605      	mov	r5, r0
 800987e:	460c      	mov	r4, r1
 8009880:	d904      	bls.n	800988c <_raise_r+0x14>
 8009882:	2316      	movs	r3, #22
 8009884:	6003      	str	r3, [r0, #0]
 8009886:	f04f 30ff 	mov.w	r0, #4294967295
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800988e:	b112      	cbz	r2, 8009896 <_raise_r+0x1e>
 8009890:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009894:	b94b      	cbnz	r3, 80098aa <_raise_r+0x32>
 8009896:	4628      	mov	r0, r5
 8009898:	f000 f830 	bl	80098fc <_getpid_r>
 800989c:	4622      	mov	r2, r4
 800989e:	4601      	mov	r1, r0
 80098a0:	4628      	mov	r0, r5
 80098a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098a6:	f000 b817 	b.w	80098d8 <_kill_r>
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d00a      	beq.n	80098c4 <_raise_r+0x4c>
 80098ae:	1c59      	adds	r1, r3, #1
 80098b0:	d103      	bne.n	80098ba <_raise_r+0x42>
 80098b2:	2316      	movs	r3, #22
 80098b4:	6003      	str	r3, [r0, #0]
 80098b6:	2001      	movs	r0, #1
 80098b8:	e7e7      	b.n	800988a <_raise_r+0x12>
 80098ba:	2100      	movs	r1, #0
 80098bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80098c0:	4620      	mov	r0, r4
 80098c2:	4798      	blx	r3
 80098c4:	2000      	movs	r0, #0
 80098c6:	e7e0      	b.n	800988a <_raise_r+0x12>

080098c8 <raise>:
 80098c8:	4b02      	ldr	r3, [pc, #8]	@ (80098d4 <raise+0xc>)
 80098ca:	4601      	mov	r1, r0
 80098cc:	6818      	ldr	r0, [r3, #0]
 80098ce:	f7ff bfd3 	b.w	8009878 <_raise_r>
 80098d2:	bf00      	nop
 80098d4:	2000001c 	.word	0x2000001c

080098d8 <_kill_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4d07      	ldr	r5, [pc, #28]	@ (80098f8 <_kill_r+0x20>)
 80098dc:	2300      	movs	r3, #0
 80098de:	4604      	mov	r4, r0
 80098e0:	4608      	mov	r0, r1
 80098e2:	4611      	mov	r1, r2
 80098e4:	602b      	str	r3, [r5, #0]
 80098e6:	f7f8 f9a5 	bl	8001c34 <_kill>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	d102      	bne.n	80098f4 <_kill_r+0x1c>
 80098ee:	682b      	ldr	r3, [r5, #0]
 80098f0:	b103      	cbz	r3, 80098f4 <_kill_r+0x1c>
 80098f2:	6023      	str	r3, [r4, #0]
 80098f4:	bd38      	pop	{r3, r4, r5, pc}
 80098f6:	bf00      	nop
 80098f8:	20000438 	.word	0x20000438

080098fc <_getpid_r>:
 80098fc:	f7f8 b992 	b.w	8001c24 <_getpid>

08009900 <__swhatbuf_r>:
 8009900:	b570      	push	{r4, r5, r6, lr}
 8009902:	460c      	mov	r4, r1
 8009904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009908:	2900      	cmp	r1, #0
 800990a:	b096      	sub	sp, #88	@ 0x58
 800990c:	4615      	mov	r5, r2
 800990e:	461e      	mov	r6, r3
 8009910:	da0d      	bge.n	800992e <__swhatbuf_r+0x2e>
 8009912:	89a3      	ldrh	r3, [r4, #12]
 8009914:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009918:	f04f 0100 	mov.w	r1, #0
 800991c:	bf14      	ite	ne
 800991e:	2340      	movne	r3, #64	@ 0x40
 8009920:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009924:	2000      	movs	r0, #0
 8009926:	6031      	str	r1, [r6, #0]
 8009928:	602b      	str	r3, [r5, #0]
 800992a:	b016      	add	sp, #88	@ 0x58
 800992c:	bd70      	pop	{r4, r5, r6, pc}
 800992e:	466a      	mov	r2, sp
 8009930:	f000 f848 	bl	80099c4 <_fstat_r>
 8009934:	2800      	cmp	r0, #0
 8009936:	dbec      	blt.n	8009912 <__swhatbuf_r+0x12>
 8009938:	9901      	ldr	r1, [sp, #4]
 800993a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800993e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009942:	4259      	negs	r1, r3
 8009944:	4159      	adcs	r1, r3
 8009946:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800994a:	e7eb      	b.n	8009924 <__swhatbuf_r+0x24>

0800994c <__smakebuf_r>:
 800994c:	898b      	ldrh	r3, [r1, #12]
 800994e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009950:	079d      	lsls	r5, r3, #30
 8009952:	4606      	mov	r6, r0
 8009954:	460c      	mov	r4, r1
 8009956:	d507      	bpl.n	8009968 <__smakebuf_r+0x1c>
 8009958:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800995c:	6023      	str	r3, [r4, #0]
 800995e:	6123      	str	r3, [r4, #16]
 8009960:	2301      	movs	r3, #1
 8009962:	6163      	str	r3, [r4, #20]
 8009964:	b003      	add	sp, #12
 8009966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009968:	ab01      	add	r3, sp, #4
 800996a:	466a      	mov	r2, sp
 800996c:	f7ff ffc8 	bl	8009900 <__swhatbuf_r>
 8009970:	9f00      	ldr	r7, [sp, #0]
 8009972:	4605      	mov	r5, r0
 8009974:	4639      	mov	r1, r7
 8009976:	4630      	mov	r0, r6
 8009978:	f7fe fec6 	bl	8008708 <_malloc_r>
 800997c:	b948      	cbnz	r0, 8009992 <__smakebuf_r+0x46>
 800997e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009982:	059a      	lsls	r2, r3, #22
 8009984:	d4ee      	bmi.n	8009964 <__smakebuf_r+0x18>
 8009986:	f023 0303 	bic.w	r3, r3, #3
 800998a:	f043 0302 	orr.w	r3, r3, #2
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	e7e2      	b.n	8009958 <__smakebuf_r+0xc>
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	6020      	str	r0, [r4, #0]
 8009996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	9b01      	ldr	r3, [sp, #4]
 800999e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099a2:	b15b      	cbz	r3, 80099bc <__smakebuf_r+0x70>
 80099a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099a8:	4630      	mov	r0, r6
 80099aa:	f000 f81d 	bl	80099e8 <_isatty_r>
 80099ae:	b128      	cbz	r0, 80099bc <__smakebuf_r+0x70>
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	f023 0303 	bic.w	r3, r3, #3
 80099b6:	f043 0301 	orr.w	r3, r3, #1
 80099ba:	81a3      	strh	r3, [r4, #12]
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	431d      	orrs	r5, r3
 80099c0:	81a5      	strh	r5, [r4, #12]
 80099c2:	e7cf      	b.n	8009964 <__smakebuf_r+0x18>

080099c4 <_fstat_r>:
 80099c4:	b538      	push	{r3, r4, r5, lr}
 80099c6:	4d07      	ldr	r5, [pc, #28]	@ (80099e4 <_fstat_r+0x20>)
 80099c8:	2300      	movs	r3, #0
 80099ca:	4604      	mov	r4, r0
 80099cc:	4608      	mov	r0, r1
 80099ce:	4611      	mov	r1, r2
 80099d0:	602b      	str	r3, [r5, #0]
 80099d2:	f7f8 f98f 	bl	8001cf4 <_fstat>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	d102      	bne.n	80099e0 <_fstat_r+0x1c>
 80099da:	682b      	ldr	r3, [r5, #0]
 80099dc:	b103      	cbz	r3, 80099e0 <_fstat_r+0x1c>
 80099de:	6023      	str	r3, [r4, #0]
 80099e0:	bd38      	pop	{r3, r4, r5, pc}
 80099e2:	bf00      	nop
 80099e4:	20000438 	.word	0x20000438

080099e8 <_isatty_r>:
 80099e8:	b538      	push	{r3, r4, r5, lr}
 80099ea:	4d06      	ldr	r5, [pc, #24]	@ (8009a04 <_isatty_r+0x1c>)
 80099ec:	2300      	movs	r3, #0
 80099ee:	4604      	mov	r4, r0
 80099f0:	4608      	mov	r0, r1
 80099f2:	602b      	str	r3, [r5, #0]
 80099f4:	f7f8 f98e 	bl	8001d14 <_isatty>
 80099f8:	1c43      	adds	r3, r0, #1
 80099fa:	d102      	bne.n	8009a02 <_isatty_r+0x1a>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	b103      	cbz	r3, 8009a02 <_isatty_r+0x1a>
 8009a00:	6023      	str	r3, [r4, #0]
 8009a02:	bd38      	pop	{r3, r4, r5, pc}
 8009a04:	20000438 	.word	0x20000438

08009a08 <cosf>:
 8009a08:	ee10 3a10 	vmov	r3, s0
 8009a0c:	b507      	push	{r0, r1, r2, lr}
 8009a0e:	4a1e      	ldr	r2, [pc, #120]	@ (8009a88 <cosf+0x80>)
 8009a10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d806      	bhi.n	8009a26 <cosf+0x1e>
 8009a18:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8009a8c <cosf+0x84>
 8009a1c:	b003      	add	sp, #12
 8009a1e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a22:	f000 b8d1 	b.w	8009bc8 <__kernel_cosf>
 8009a26:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009a2a:	d304      	bcc.n	8009a36 <cosf+0x2e>
 8009a2c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009a30:	b003      	add	sp, #12
 8009a32:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a36:	4668      	mov	r0, sp
 8009a38:	f000 f966 	bl	8009d08 <__ieee754_rem_pio2f>
 8009a3c:	f000 0003 	and.w	r0, r0, #3
 8009a40:	2801      	cmp	r0, #1
 8009a42:	d009      	beq.n	8009a58 <cosf+0x50>
 8009a44:	2802      	cmp	r0, #2
 8009a46:	d010      	beq.n	8009a6a <cosf+0x62>
 8009a48:	b9b0      	cbnz	r0, 8009a78 <cosf+0x70>
 8009a4a:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a4e:	ed9d 0a00 	vldr	s0, [sp]
 8009a52:	f000 f8b9 	bl	8009bc8 <__kernel_cosf>
 8009a56:	e7eb      	b.n	8009a30 <cosf+0x28>
 8009a58:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a5c:	ed9d 0a00 	vldr	s0, [sp]
 8009a60:	f000 f90a 	bl	8009c78 <__kernel_sinf>
 8009a64:	eeb1 0a40 	vneg.f32	s0, s0
 8009a68:	e7e2      	b.n	8009a30 <cosf+0x28>
 8009a6a:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a6e:	ed9d 0a00 	vldr	s0, [sp]
 8009a72:	f000 f8a9 	bl	8009bc8 <__kernel_cosf>
 8009a76:	e7f5      	b.n	8009a64 <cosf+0x5c>
 8009a78:	eddd 0a01 	vldr	s1, [sp, #4]
 8009a7c:	ed9d 0a00 	vldr	s0, [sp]
 8009a80:	2001      	movs	r0, #1
 8009a82:	f000 f8f9 	bl	8009c78 <__kernel_sinf>
 8009a86:	e7d3      	b.n	8009a30 <cosf+0x28>
 8009a88:	3f490fd8 	.word	0x3f490fd8
 8009a8c:	00000000 	.word	0x00000000

08009a90 <sinf>:
 8009a90:	ee10 3a10 	vmov	r3, s0
 8009a94:	b507      	push	{r0, r1, r2, lr}
 8009a96:	4a1f      	ldr	r2, [pc, #124]	@ (8009b14 <sinf+0x84>)
 8009a98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d807      	bhi.n	8009ab0 <sinf+0x20>
 8009aa0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8009b18 <sinf+0x88>
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	b003      	add	sp, #12
 8009aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aac:	f000 b8e4 	b.w	8009c78 <__kernel_sinf>
 8009ab0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009ab4:	d304      	bcc.n	8009ac0 <sinf+0x30>
 8009ab6:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009aba:	b003      	add	sp, #12
 8009abc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009ac0:	4668      	mov	r0, sp
 8009ac2:	f000 f921 	bl	8009d08 <__ieee754_rem_pio2f>
 8009ac6:	f000 0003 	and.w	r0, r0, #3
 8009aca:	2801      	cmp	r0, #1
 8009acc:	d00a      	beq.n	8009ae4 <sinf+0x54>
 8009ace:	2802      	cmp	r0, #2
 8009ad0:	d00f      	beq.n	8009af2 <sinf+0x62>
 8009ad2:	b9c0      	cbnz	r0, 8009b06 <sinf+0x76>
 8009ad4:	eddd 0a01 	vldr	s1, [sp, #4]
 8009ad8:	ed9d 0a00 	vldr	s0, [sp]
 8009adc:	2001      	movs	r0, #1
 8009ade:	f000 f8cb 	bl	8009c78 <__kernel_sinf>
 8009ae2:	e7ea      	b.n	8009aba <sinf+0x2a>
 8009ae4:	eddd 0a01 	vldr	s1, [sp, #4]
 8009ae8:	ed9d 0a00 	vldr	s0, [sp]
 8009aec:	f000 f86c 	bl	8009bc8 <__kernel_cosf>
 8009af0:	e7e3      	b.n	8009aba <sinf+0x2a>
 8009af2:	eddd 0a01 	vldr	s1, [sp, #4]
 8009af6:	ed9d 0a00 	vldr	s0, [sp]
 8009afa:	2001      	movs	r0, #1
 8009afc:	f000 f8bc 	bl	8009c78 <__kernel_sinf>
 8009b00:	eeb1 0a40 	vneg.f32	s0, s0
 8009b04:	e7d9      	b.n	8009aba <sinf+0x2a>
 8009b06:	eddd 0a01 	vldr	s1, [sp, #4]
 8009b0a:	ed9d 0a00 	vldr	s0, [sp]
 8009b0e:	f000 f85b 	bl	8009bc8 <__kernel_cosf>
 8009b12:	e7f5      	b.n	8009b00 <sinf+0x70>
 8009b14:	3f490fd8 	.word	0x3f490fd8
 8009b18:	00000000 	.word	0x00000000

08009b1c <fmaxf>:
 8009b1c:	b508      	push	{r3, lr}
 8009b1e:	ed2d 8b02 	vpush	{d8}
 8009b22:	eeb0 8a40 	vmov.f32	s16, s0
 8009b26:	eef0 8a60 	vmov.f32	s17, s1
 8009b2a:	f000 f831 	bl	8009b90 <__fpclassifyf>
 8009b2e:	b930      	cbnz	r0, 8009b3e <fmaxf+0x22>
 8009b30:	eeb0 8a68 	vmov.f32	s16, s17
 8009b34:	eeb0 0a48 	vmov.f32	s0, s16
 8009b38:	ecbd 8b02 	vpop	{d8}
 8009b3c:	bd08      	pop	{r3, pc}
 8009b3e:	eeb0 0a68 	vmov.f32	s0, s17
 8009b42:	f000 f825 	bl	8009b90 <__fpclassifyf>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d0f4      	beq.n	8009b34 <fmaxf+0x18>
 8009b4a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b52:	dded      	ble.n	8009b30 <fmaxf+0x14>
 8009b54:	e7ee      	b.n	8009b34 <fmaxf+0x18>

08009b56 <fminf>:
 8009b56:	b508      	push	{r3, lr}
 8009b58:	ed2d 8b02 	vpush	{d8}
 8009b5c:	eeb0 8a40 	vmov.f32	s16, s0
 8009b60:	eef0 8a60 	vmov.f32	s17, s1
 8009b64:	f000 f814 	bl	8009b90 <__fpclassifyf>
 8009b68:	b930      	cbnz	r0, 8009b78 <fminf+0x22>
 8009b6a:	eeb0 8a68 	vmov.f32	s16, s17
 8009b6e:	eeb0 0a48 	vmov.f32	s0, s16
 8009b72:	ecbd 8b02 	vpop	{d8}
 8009b76:	bd08      	pop	{r3, pc}
 8009b78:	eeb0 0a68 	vmov.f32	s0, s17
 8009b7c:	f000 f808 	bl	8009b90 <__fpclassifyf>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d0f4      	beq.n	8009b6e <fminf+0x18>
 8009b84:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b8c:	d5ed      	bpl.n	8009b6a <fminf+0x14>
 8009b8e:	e7ee      	b.n	8009b6e <fminf+0x18>

08009b90 <__fpclassifyf>:
 8009b90:	ee10 3a10 	vmov	r3, s0
 8009b94:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8009b98:	d00d      	beq.n	8009bb6 <__fpclassifyf+0x26>
 8009b9a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8009b9e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8009ba2:	d30a      	bcc.n	8009bba <__fpclassifyf+0x2a>
 8009ba4:	4b07      	ldr	r3, [pc, #28]	@ (8009bc4 <__fpclassifyf+0x34>)
 8009ba6:	1e42      	subs	r2, r0, #1
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d908      	bls.n	8009bbe <__fpclassifyf+0x2e>
 8009bac:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8009bb0:	4258      	negs	r0, r3
 8009bb2:	4158      	adcs	r0, r3
 8009bb4:	4770      	bx	lr
 8009bb6:	2002      	movs	r0, #2
 8009bb8:	4770      	bx	lr
 8009bba:	2004      	movs	r0, #4
 8009bbc:	4770      	bx	lr
 8009bbe:	2003      	movs	r0, #3
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	007ffffe 	.word	0x007ffffe

08009bc8 <__kernel_cosf>:
 8009bc8:	ee10 3a10 	vmov	r3, s0
 8009bcc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bd0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009bd4:	eef0 6a40 	vmov.f32	s13, s0
 8009bd8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009bdc:	d204      	bcs.n	8009be8 <__kernel_cosf+0x20>
 8009bde:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8009be2:	ee17 2a90 	vmov	r2, s15
 8009be6:	b342      	cbz	r2, 8009c3a <__kernel_cosf+0x72>
 8009be8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8009bec:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8009c58 <__kernel_cosf+0x90>
 8009bf0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8009c5c <__kernel_cosf+0x94>
 8009bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8009c60 <__kernel_cosf+0x98>)
 8009bf6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009c64 <__kernel_cosf+0x9c>
 8009c00:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009c04:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8009c68 <__kernel_cosf+0xa0>
 8009c08:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009c0c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8009c6c <__kernel_cosf+0xa4>
 8009c10:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009c14:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8009c70 <__kernel_cosf+0xa8>
 8009c18:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009c1c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8009c20:	ee26 6a07 	vmul.f32	s12, s12, s14
 8009c24:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009c28:	eee7 0a06 	vfma.f32	s1, s14, s12
 8009c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c30:	d804      	bhi.n	8009c3c <__kernel_cosf+0x74>
 8009c32:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8009c36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009c3a:	4770      	bx	lr
 8009c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8009c74 <__kernel_cosf+0xac>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	bf9a      	itte	ls
 8009c42:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8009c46:	ee07 3a10 	vmovls	s14, r3
 8009c4a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8009c4e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009c52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c56:	e7ec      	b.n	8009c32 <__kernel_cosf+0x6a>
 8009c58:	ad47d74e 	.word	0xad47d74e
 8009c5c:	310f74f6 	.word	0x310f74f6
 8009c60:	3e999999 	.word	0x3e999999
 8009c64:	b493f27c 	.word	0xb493f27c
 8009c68:	37d00d01 	.word	0x37d00d01
 8009c6c:	bab60b61 	.word	0xbab60b61
 8009c70:	3d2aaaab 	.word	0x3d2aaaab
 8009c74:	3f480000 	.word	0x3f480000

08009c78 <__kernel_sinf>:
 8009c78:	ee10 3a10 	vmov	r3, s0
 8009c7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c80:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8009c84:	d204      	bcs.n	8009c90 <__kernel_sinf+0x18>
 8009c86:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009c8a:	ee17 3a90 	vmov	r3, s15
 8009c8e:	b35b      	cbz	r3, 8009ce8 <__kernel_sinf+0x70>
 8009c90:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009c94:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009cec <__kernel_sinf+0x74>
 8009c98:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8009cf0 <__kernel_sinf+0x78>
 8009c9c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009ca0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8009cf4 <__kernel_sinf+0x7c>
 8009ca4:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009ca8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8009cf8 <__kernel_sinf+0x80>
 8009cac:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009cb0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8009cfc <__kernel_sinf+0x84>
 8009cb4:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009cb8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009cbc:	b930      	cbnz	r0, 8009ccc <__kernel_sinf+0x54>
 8009cbe:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8009d00 <__kernel_sinf+0x88>
 8009cc2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009cc6:	eea6 0a26 	vfma.f32	s0, s12, s13
 8009cca:	4770      	bx	lr
 8009ccc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009cd0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009cd4:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009cd8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009cdc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8009d04 <__kernel_sinf+0x8c>
 8009ce0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009ce4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	2f2ec9d3 	.word	0x2f2ec9d3
 8009cf0:	b2d72f34 	.word	0xb2d72f34
 8009cf4:	3638ef1b 	.word	0x3638ef1b
 8009cf8:	b9500d01 	.word	0xb9500d01
 8009cfc:	3c088889 	.word	0x3c088889
 8009d00:	be2aaaab 	.word	0xbe2aaaab
 8009d04:	3e2aaaab 	.word	0x3e2aaaab

08009d08 <__ieee754_rem_pio2f>:
 8009d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d0a:	ee10 6a10 	vmov	r6, s0
 8009d0e:	4b88      	ldr	r3, [pc, #544]	@ (8009f30 <__ieee754_rem_pio2f+0x228>)
 8009d10:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8009d14:	429d      	cmp	r5, r3
 8009d16:	b087      	sub	sp, #28
 8009d18:	4604      	mov	r4, r0
 8009d1a:	d805      	bhi.n	8009d28 <__ieee754_rem_pio2f+0x20>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	ed80 0a00 	vstr	s0, [r0]
 8009d22:	6043      	str	r3, [r0, #4]
 8009d24:	2000      	movs	r0, #0
 8009d26:	e022      	b.n	8009d6e <__ieee754_rem_pio2f+0x66>
 8009d28:	4b82      	ldr	r3, [pc, #520]	@ (8009f34 <__ieee754_rem_pio2f+0x22c>)
 8009d2a:	429d      	cmp	r5, r3
 8009d2c:	d83a      	bhi.n	8009da4 <__ieee754_rem_pio2f+0x9c>
 8009d2e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009d32:	2e00      	cmp	r6, #0
 8009d34:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8009f38 <__ieee754_rem_pio2f+0x230>
 8009d38:	4a80      	ldr	r2, [pc, #512]	@ (8009f3c <__ieee754_rem_pio2f+0x234>)
 8009d3a:	f023 030f 	bic.w	r3, r3, #15
 8009d3e:	dd18      	ble.n	8009d72 <__ieee754_rem_pio2f+0x6a>
 8009d40:	4293      	cmp	r3, r2
 8009d42:	ee70 7a47 	vsub.f32	s15, s0, s14
 8009d46:	bf09      	itett	eq
 8009d48:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8009f40 <__ieee754_rem_pio2f+0x238>
 8009d4c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8009f44 <__ieee754_rem_pio2f+0x23c>
 8009d50:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8009f48 <__ieee754_rem_pio2f+0x240>
 8009d54:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8009d58:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8009d5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d60:	ed80 7a00 	vstr	s14, [r0]
 8009d64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009d68:	edc0 7a01 	vstr	s15, [r0, #4]
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	b007      	add	sp, #28
 8009d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d72:	4293      	cmp	r3, r2
 8009d74:	ee70 7a07 	vadd.f32	s15, s0, s14
 8009d78:	bf09      	itett	eq
 8009d7a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8009f40 <__ieee754_rem_pio2f+0x238>
 8009d7e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8009f44 <__ieee754_rem_pio2f+0x23c>
 8009d82:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8009f48 <__ieee754_rem_pio2f+0x240>
 8009d86:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8009d8a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009d8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d92:	ed80 7a00 	vstr	s14, [r0]
 8009d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d9a:	edc0 7a01 	vstr	s15, [r0, #4]
 8009d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009da2:	e7e4      	b.n	8009d6e <__ieee754_rem_pio2f+0x66>
 8009da4:	4b69      	ldr	r3, [pc, #420]	@ (8009f4c <__ieee754_rem_pio2f+0x244>)
 8009da6:	429d      	cmp	r5, r3
 8009da8:	d873      	bhi.n	8009e92 <__ieee754_rem_pio2f+0x18a>
 8009daa:	f000 f8dd 	bl	8009f68 <fabsf>
 8009dae:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8009f50 <__ieee754_rem_pio2f+0x248>
 8009db2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009db6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009dba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009dc2:	ee17 0a90 	vmov	r0, s15
 8009dc6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009f38 <__ieee754_rem_pio2f+0x230>
 8009dca:	eea7 0a67 	vfms.f32	s0, s14, s15
 8009dce:	281f      	cmp	r0, #31
 8009dd0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8009f44 <__ieee754_rem_pio2f+0x23c>
 8009dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dd8:	eeb1 6a47 	vneg.f32	s12, s14
 8009ddc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009de0:	ee16 1a90 	vmov	r1, s13
 8009de4:	dc09      	bgt.n	8009dfa <__ieee754_rem_pio2f+0xf2>
 8009de6:	4a5b      	ldr	r2, [pc, #364]	@ (8009f54 <__ieee754_rem_pio2f+0x24c>)
 8009de8:	1e47      	subs	r7, r0, #1
 8009dea:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8009dee:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8009df2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d107      	bne.n	8009e0a <__ieee754_rem_pio2f+0x102>
 8009dfa:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8009dfe:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8009e02:	2a08      	cmp	r2, #8
 8009e04:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8009e08:	dc14      	bgt.n	8009e34 <__ieee754_rem_pio2f+0x12c>
 8009e0a:	6021      	str	r1, [r4, #0]
 8009e0c:	ed94 7a00 	vldr	s14, [r4]
 8009e10:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009e14:	2e00      	cmp	r6, #0
 8009e16:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009e1a:	ed84 0a01 	vstr	s0, [r4, #4]
 8009e1e:	daa6      	bge.n	8009d6e <__ieee754_rem_pio2f+0x66>
 8009e20:	eeb1 7a47 	vneg.f32	s14, s14
 8009e24:	eeb1 0a40 	vneg.f32	s0, s0
 8009e28:	ed84 7a00 	vstr	s14, [r4]
 8009e2c:	ed84 0a01 	vstr	s0, [r4, #4]
 8009e30:	4240      	negs	r0, r0
 8009e32:	e79c      	b.n	8009d6e <__ieee754_rem_pio2f+0x66>
 8009e34:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8009f40 <__ieee754_rem_pio2f+0x238>
 8009e38:	eef0 6a40 	vmov.f32	s13, s0
 8009e3c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8009e40:	ee70 7a66 	vsub.f32	s15, s0, s13
 8009e44:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009e48:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009f48 <__ieee754_rem_pio2f+0x240>
 8009e4c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009e50:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8009e54:	ee15 2a90 	vmov	r2, s11
 8009e58:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009e5c:	1a5b      	subs	r3, r3, r1
 8009e5e:	2b19      	cmp	r3, #25
 8009e60:	dc04      	bgt.n	8009e6c <__ieee754_rem_pio2f+0x164>
 8009e62:	edc4 5a00 	vstr	s11, [r4]
 8009e66:	eeb0 0a66 	vmov.f32	s0, s13
 8009e6a:	e7cf      	b.n	8009e0c <__ieee754_rem_pio2f+0x104>
 8009e6c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8009f58 <__ieee754_rem_pio2f+0x250>
 8009e70:	eeb0 0a66 	vmov.f32	s0, s13
 8009e74:	eea6 0a25 	vfma.f32	s0, s12, s11
 8009e78:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009e7c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009f5c <__ieee754_rem_pio2f+0x254>
 8009e80:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009e84:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8009e88:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009e8c:	ed84 7a00 	vstr	s14, [r4]
 8009e90:	e7bc      	b.n	8009e0c <__ieee754_rem_pio2f+0x104>
 8009e92:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8009e96:	d306      	bcc.n	8009ea6 <__ieee754_rem_pio2f+0x19e>
 8009e98:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009e9c:	edc0 7a01 	vstr	s15, [r0, #4]
 8009ea0:	edc0 7a00 	vstr	s15, [r0]
 8009ea4:	e73e      	b.n	8009d24 <__ieee754_rem_pio2f+0x1c>
 8009ea6:	15ea      	asrs	r2, r5, #23
 8009ea8:	3a86      	subs	r2, #134	@ 0x86
 8009eaa:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009eb6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8009f60 <__ieee754_rem_pio2f+0x258>
 8009eba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ec2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8009ec6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009eca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8009ece:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009ed2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ed6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8009eda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009ede:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ee6:	edcd 7a05 	vstr	s15, [sp, #20]
 8009eea:	d11e      	bne.n	8009f2a <__ieee754_rem_pio2f+0x222>
 8009eec:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8009ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef4:	bf0c      	ite	eq
 8009ef6:	2301      	moveq	r3, #1
 8009ef8:	2302      	movne	r3, #2
 8009efa:	491a      	ldr	r1, [pc, #104]	@ (8009f64 <__ieee754_rem_pio2f+0x25c>)
 8009efc:	9101      	str	r1, [sp, #4]
 8009efe:	2102      	movs	r1, #2
 8009f00:	9100      	str	r1, [sp, #0]
 8009f02:	a803      	add	r0, sp, #12
 8009f04:	4621      	mov	r1, r4
 8009f06:	f000 f837 	bl	8009f78 <__kernel_rem_pio2f>
 8009f0a:	2e00      	cmp	r6, #0
 8009f0c:	f6bf af2f 	bge.w	8009d6e <__ieee754_rem_pio2f+0x66>
 8009f10:	edd4 7a00 	vldr	s15, [r4]
 8009f14:	eef1 7a67 	vneg.f32	s15, s15
 8009f18:	edc4 7a00 	vstr	s15, [r4]
 8009f1c:	edd4 7a01 	vldr	s15, [r4, #4]
 8009f20:	eef1 7a67 	vneg.f32	s15, s15
 8009f24:	edc4 7a01 	vstr	s15, [r4, #4]
 8009f28:	e782      	b.n	8009e30 <__ieee754_rem_pio2f+0x128>
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e7e5      	b.n	8009efa <__ieee754_rem_pio2f+0x1f2>
 8009f2e:	bf00      	nop
 8009f30:	3f490fd8 	.word	0x3f490fd8
 8009f34:	4016cbe3 	.word	0x4016cbe3
 8009f38:	3fc90f80 	.word	0x3fc90f80
 8009f3c:	3fc90fd0 	.word	0x3fc90fd0
 8009f40:	37354400 	.word	0x37354400
 8009f44:	37354443 	.word	0x37354443
 8009f48:	2e85a308 	.word	0x2e85a308
 8009f4c:	43490f80 	.word	0x43490f80
 8009f50:	3f22f984 	.word	0x3f22f984
 8009f54:	0800a9a4 	.word	0x0800a9a4
 8009f58:	2e85a300 	.word	0x2e85a300
 8009f5c:	248d3132 	.word	0x248d3132
 8009f60:	43800000 	.word	0x43800000
 8009f64:	0800aa24 	.word	0x0800aa24

08009f68 <fabsf>:
 8009f68:	ee10 3a10 	vmov	r3, s0
 8009f6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f70:	ee00 3a10 	vmov	s0, r3
 8009f74:	4770      	bx	lr
	...

08009f78 <__kernel_rem_pio2f>:
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	ed2d 8b04 	vpush	{d8-d9}
 8009f80:	b0d9      	sub	sp, #356	@ 0x164
 8009f82:	4690      	mov	r8, r2
 8009f84:	9001      	str	r0, [sp, #4]
 8009f86:	4ab6      	ldr	r2, [pc, #728]	@ (800a260 <__kernel_rem_pio2f+0x2e8>)
 8009f88:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8009f8a:	f118 0f04 	cmn.w	r8, #4
 8009f8e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8009f92:	460f      	mov	r7, r1
 8009f94:	f103 3bff 	add.w	fp, r3, #4294967295
 8009f98:	db26      	blt.n	8009fe8 <__kernel_rem_pio2f+0x70>
 8009f9a:	f1b8 0203 	subs.w	r2, r8, #3
 8009f9e:	bf48      	it	mi
 8009fa0:	f108 0204 	addmi.w	r2, r8, #4
 8009fa4:	10d2      	asrs	r2, r2, #3
 8009fa6:	1c55      	adds	r5, r2, #1
 8009fa8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8009faa:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800a270 <__kernel_rem_pio2f+0x2f8>
 8009fae:	00e8      	lsls	r0, r5, #3
 8009fb0:	eba2 060b 	sub.w	r6, r2, fp
 8009fb4:	9002      	str	r0, [sp, #8]
 8009fb6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8009fba:	eb0a 0c0b 	add.w	ip, sl, fp
 8009fbe:	ac1c      	add	r4, sp, #112	@ 0x70
 8009fc0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	4560      	cmp	r0, ip
 8009fc8:	dd10      	ble.n	8009fec <__kernel_rem_pio2f+0x74>
 8009fca:	a91c      	add	r1, sp, #112	@ 0x70
 8009fcc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8009fd0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8009fd4:	2600      	movs	r6, #0
 8009fd6:	4556      	cmp	r6, sl
 8009fd8:	dc24      	bgt.n	800a024 <__kernel_rem_pio2f+0xac>
 8009fda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009fde:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800a270 <__kernel_rem_pio2f+0x2f8>
 8009fe2:	4684      	mov	ip, r0
 8009fe4:	2400      	movs	r4, #0
 8009fe6:	e016      	b.n	800a016 <__kernel_rem_pio2f+0x9e>
 8009fe8:	2200      	movs	r2, #0
 8009fea:	e7dc      	b.n	8009fa6 <__kernel_rem_pio2f+0x2e>
 8009fec:	42c6      	cmn	r6, r0
 8009fee:	bf5d      	ittte	pl
 8009ff0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8009ff4:	ee07 1a90 	vmovpl	s15, r1
 8009ff8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009ffc:	eef0 7a47 	vmovmi.f32	s15, s14
 800a000:	ece4 7a01 	vstmia	r4!, {s15}
 800a004:	3001      	adds	r0, #1
 800a006:	e7de      	b.n	8009fc6 <__kernel_rem_pio2f+0x4e>
 800a008:	ecfe 6a01 	vldmia	lr!, {s13}
 800a00c:	ed3c 7a01 	vldmdb	ip!, {s14}
 800a010:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a014:	3401      	adds	r4, #1
 800a016:	455c      	cmp	r4, fp
 800a018:	ddf6      	ble.n	800a008 <__kernel_rem_pio2f+0x90>
 800a01a:	ece9 7a01 	vstmia	r9!, {s15}
 800a01e:	3601      	adds	r6, #1
 800a020:	3004      	adds	r0, #4
 800a022:	e7d8      	b.n	8009fd6 <__kernel_rem_pio2f+0x5e>
 800a024:	a908      	add	r1, sp, #32
 800a026:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a02a:	9104      	str	r1, [sp, #16]
 800a02c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800a02e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800a26c <__kernel_rem_pio2f+0x2f4>
 800a032:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800a268 <__kernel_rem_pio2f+0x2f0>
 800a036:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800a03a:	9203      	str	r2, [sp, #12]
 800a03c:	4654      	mov	r4, sl
 800a03e:	00a2      	lsls	r2, r4, #2
 800a040:	9205      	str	r2, [sp, #20]
 800a042:	aa58      	add	r2, sp, #352	@ 0x160
 800a044:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800a048:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800a04c:	a944      	add	r1, sp, #272	@ 0x110
 800a04e:	aa08      	add	r2, sp, #32
 800a050:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800a054:	4694      	mov	ip, r2
 800a056:	4626      	mov	r6, r4
 800a058:	2e00      	cmp	r6, #0
 800a05a:	dc4c      	bgt.n	800a0f6 <__kernel_rem_pio2f+0x17e>
 800a05c:	4628      	mov	r0, r5
 800a05e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a062:	f000 f9f1 	bl	800a448 <scalbnf>
 800a066:	eeb0 8a40 	vmov.f32	s16, s0
 800a06a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800a06e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a072:	f000 fa4f 	bl	800a514 <floorf>
 800a076:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800a07a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a07e:	2d00      	cmp	r5, #0
 800a080:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a084:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a088:	ee17 9a90 	vmov	r9, s15
 800a08c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a090:	ee38 8a67 	vsub.f32	s16, s16, s15
 800a094:	dd41      	ble.n	800a11a <__kernel_rem_pio2f+0x1a2>
 800a096:	f104 3cff 	add.w	ip, r4, #4294967295
 800a09a:	a908      	add	r1, sp, #32
 800a09c:	f1c5 0e08 	rsb	lr, r5, #8
 800a0a0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800a0a4:	fa46 f00e 	asr.w	r0, r6, lr
 800a0a8:	4481      	add	r9, r0
 800a0aa:	fa00 f00e 	lsl.w	r0, r0, lr
 800a0ae:	1a36      	subs	r6, r6, r0
 800a0b0:	f1c5 0007 	rsb	r0, r5, #7
 800a0b4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800a0b8:	4106      	asrs	r6, r0
 800a0ba:	2e00      	cmp	r6, #0
 800a0bc:	dd3c      	ble.n	800a138 <__kernel_rem_pio2f+0x1c0>
 800a0be:	f04f 0e00 	mov.w	lr, #0
 800a0c2:	f109 0901 	add.w	r9, r9, #1
 800a0c6:	4670      	mov	r0, lr
 800a0c8:	4574      	cmp	r4, lr
 800a0ca:	dc68      	bgt.n	800a19e <__kernel_rem_pio2f+0x226>
 800a0cc:	2d00      	cmp	r5, #0
 800a0ce:	dd03      	ble.n	800a0d8 <__kernel_rem_pio2f+0x160>
 800a0d0:	2d01      	cmp	r5, #1
 800a0d2:	d074      	beq.n	800a1be <__kernel_rem_pio2f+0x246>
 800a0d4:	2d02      	cmp	r5, #2
 800a0d6:	d07d      	beq.n	800a1d4 <__kernel_rem_pio2f+0x25c>
 800a0d8:	2e02      	cmp	r6, #2
 800a0da:	d12d      	bne.n	800a138 <__kernel_rem_pio2f+0x1c0>
 800a0dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a0e0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a0e4:	b340      	cbz	r0, 800a138 <__kernel_rem_pio2f+0x1c0>
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	9306      	str	r3, [sp, #24]
 800a0ea:	f000 f9ad 	bl	800a448 <scalbnf>
 800a0ee:	9b06      	ldr	r3, [sp, #24]
 800a0f0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a0f4:	e020      	b.n	800a138 <__kernel_rem_pio2f+0x1c0>
 800a0f6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a0fa:	3e01      	subs	r6, #1
 800a0fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a104:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a108:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a10c:	ecac 0a01 	vstmia	ip!, {s0}
 800a110:	ed30 0a01 	vldmdb	r0!, {s0}
 800a114:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a118:	e79e      	b.n	800a058 <__kernel_rem_pio2f+0xe0>
 800a11a:	d105      	bne.n	800a128 <__kernel_rem_pio2f+0x1b0>
 800a11c:	1e60      	subs	r0, r4, #1
 800a11e:	a908      	add	r1, sp, #32
 800a120:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800a124:	11f6      	asrs	r6, r6, #7
 800a126:	e7c8      	b.n	800a0ba <__kernel_rem_pio2f+0x142>
 800a128:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800a12c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a134:	da31      	bge.n	800a19a <__kernel_rem_pio2f+0x222>
 800a136:	2600      	movs	r6, #0
 800a138:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a140:	f040 8098 	bne.w	800a274 <__kernel_rem_pio2f+0x2fc>
 800a144:	1e60      	subs	r0, r4, #1
 800a146:	2200      	movs	r2, #0
 800a148:	4550      	cmp	r0, sl
 800a14a:	da4b      	bge.n	800a1e4 <__kernel_rem_pio2f+0x26c>
 800a14c:	2a00      	cmp	r2, #0
 800a14e:	d065      	beq.n	800a21c <__kernel_rem_pio2f+0x2a4>
 800a150:	3c01      	subs	r4, #1
 800a152:	ab08      	add	r3, sp, #32
 800a154:	3d08      	subs	r5, #8
 800a156:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0f8      	beq.n	800a150 <__kernel_rem_pio2f+0x1d8>
 800a15e:	4628      	mov	r0, r5
 800a160:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a164:	f000 f970 	bl	800a448 <scalbnf>
 800a168:	1c63      	adds	r3, r4, #1
 800a16a:	aa44      	add	r2, sp, #272	@ 0x110
 800a16c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800a26c <__kernel_rem_pio2f+0x2f4>
 800a170:	0099      	lsls	r1, r3, #2
 800a172:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a176:	4623      	mov	r3, r4
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f280 80a9 	bge.w	800a2d0 <__kernel_rem_pio2f+0x358>
 800a17e:	4623      	mov	r3, r4
 800a180:	2b00      	cmp	r3, #0
 800a182:	f2c0 80c7 	blt.w	800a314 <__kernel_rem_pio2f+0x39c>
 800a186:	aa44      	add	r2, sp, #272	@ 0x110
 800a188:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800a18c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800a264 <__kernel_rem_pio2f+0x2ec>
 800a190:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800a270 <__kernel_rem_pio2f+0x2f8>
 800a194:	2000      	movs	r0, #0
 800a196:	1ae2      	subs	r2, r4, r3
 800a198:	e0b1      	b.n	800a2fe <__kernel_rem_pio2f+0x386>
 800a19a:	2602      	movs	r6, #2
 800a19c:	e78f      	b.n	800a0be <__kernel_rem_pio2f+0x146>
 800a19e:	f852 1b04 	ldr.w	r1, [r2], #4
 800a1a2:	b948      	cbnz	r0, 800a1b8 <__kernel_rem_pio2f+0x240>
 800a1a4:	b121      	cbz	r1, 800a1b0 <__kernel_rem_pio2f+0x238>
 800a1a6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800a1aa:	f842 1c04 	str.w	r1, [r2, #-4]
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	f10e 0e01 	add.w	lr, lr, #1
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	e787      	b.n	800a0c8 <__kernel_rem_pio2f+0x150>
 800a1b8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800a1bc:	e7f5      	b.n	800a1aa <__kernel_rem_pio2f+0x232>
 800a1be:	f104 3cff 	add.w	ip, r4, #4294967295
 800a1c2:	aa08      	add	r2, sp, #32
 800a1c4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800a1c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a1cc:	a908      	add	r1, sp, #32
 800a1ce:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800a1d2:	e781      	b.n	800a0d8 <__kernel_rem_pio2f+0x160>
 800a1d4:	f104 3cff 	add.w	ip, r4, #4294967295
 800a1d8:	aa08      	add	r2, sp, #32
 800a1da:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800a1de:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800a1e2:	e7f3      	b.n	800a1cc <__kernel_rem_pio2f+0x254>
 800a1e4:	a908      	add	r1, sp, #32
 800a1e6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800a1ea:	3801      	subs	r0, #1
 800a1ec:	430a      	orrs	r2, r1
 800a1ee:	e7ab      	b.n	800a148 <__kernel_rem_pio2f+0x1d0>
 800a1f0:	3201      	adds	r2, #1
 800a1f2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800a1f6:	2e00      	cmp	r6, #0
 800a1f8:	d0fa      	beq.n	800a1f0 <__kernel_rem_pio2f+0x278>
 800a1fa:	9905      	ldr	r1, [sp, #20]
 800a1fc:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800a200:	eb0d 0001 	add.w	r0, sp, r1
 800a204:	18e6      	adds	r6, r4, r3
 800a206:	a91c      	add	r1, sp, #112	@ 0x70
 800a208:	f104 0c01 	add.w	ip, r4, #1
 800a20c:	384c      	subs	r0, #76	@ 0x4c
 800a20e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800a212:	4422      	add	r2, r4
 800a214:	4562      	cmp	r2, ip
 800a216:	da04      	bge.n	800a222 <__kernel_rem_pio2f+0x2aa>
 800a218:	4614      	mov	r4, r2
 800a21a:	e710      	b.n	800a03e <__kernel_rem_pio2f+0xc6>
 800a21c:	9804      	ldr	r0, [sp, #16]
 800a21e:	2201      	movs	r2, #1
 800a220:	e7e7      	b.n	800a1f2 <__kernel_rem_pio2f+0x27a>
 800a222:	9903      	ldr	r1, [sp, #12]
 800a224:	f8dd e004 	ldr.w	lr, [sp, #4]
 800a228:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800a22c:	9105      	str	r1, [sp, #20]
 800a22e:	ee07 1a90 	vmov	s15, r1
 800a232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a236:	2400      	movs	r4, #0
 800a238:	ece6 7a01 	vstmia	r6!, {s15}
 800a23c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800a270 <__kernel_rem_pio2f+0x2f8>
 800a240:	46b1      	mov	r9, r6
 800a242:	455c      	cmp	r4, fp
 800a244:	dd04      	ble.n	800a250 <__kernel_rem_pio2f+0x2d8>
 800a246:	ece0 7a01 	vstmia	r0!, {s15}
 800a24a:	f10c 0c01 	add.w	ip, ip, #1
 800a24e:	e7e1      	b.n	800a214 <__kernel_rem_pio2f+0x29c>
 800a250:	ecfe 6a01 	vldmia	lr!, {s13}
 800a254:	ed39 7a01 	vldmdb	r9!, {s14}
 800a258:	3401      	adds	r4, #1
 800a25a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a25e:	e7f0      	b.n	800a242 <__kernel_rem_pio2f+0x2ca>
 800a260:	0800ad68 	.word	0x0800ad68
 800a264:	0800ad3c 	.word	0x0800ad3c
 800a268:	43800000 	.word	0x43800000
 800a26c:	3b800000 	.word	0x3b800000
 800a270:	00000000 	.word	0x00000000
 800a274:	9b02      	ldr	r3, [sp, #8]
 800a276:	eeb0 0a48 	vmov.f32	s0, s16
 800a27a:	eba3 0008 	sub.w	r0, r3, r8
 800a27e:	f000 f8e3 	bl	800a448 <scalbnf>
 800a282:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800a268 <__kernel_rem_pio2f+0x2f0>
 800a286:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a28e:	db19      	blt.n	800a2c4 <__kernel_rem_pio2f+0x34c>
 800a290:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800a26c <__kernel_rem_pio2f+0x2f4>
 800a294:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a298:	aa08      	add	r2, sp, #32
 800a29a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a29e:	3508      	adds	r5, #8
 800a2a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2a4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a2a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a2ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a2b0:	ee10 3a10 	vmov	r3, s0
 800a2b4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a2b8:	ee17 3a90 	vmov	r3, s15
 800a2bc:	3401      	adds	r4, #1
 800a2be:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a2c2:	e74c      	b.n	800a15e <__kernel_rem_pio2f+0x1e6>
 800a2c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a2c8:	aa08      	add	r2, sp, #32
 800a2ca:	ee10 3a10 	vmov	r3, s0
 800a2ce:	e7f6      	b.n	800a2be <__kernel_rem_pio2f+0x346>
 800a2d0:	a808      	add	r0, sp, #32
 800a2d2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800a2d6:	9001      	str	r0, [sp, #4]
 800a2d8:	ee07 0a90 	vmov	s15, r0
 800a2dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800a2e6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a2ea:	ed62 7a01 	vstmdb	r2!, {s15}
 800a2ee:	e743      	b.n	800a178 <__kernel_rem_pio2f+0x200>
 800a2f0:	ecfc 6a01 	vldmia	ip!, {s13}
 800a2f4:	ecb5 7a01 	vldmia	r5!, {s14}
 800a2f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	4550      	cmp	r0, sl
 800a300:	dc01      	bgt.n	800a306 <__kernel_rem_pio2f+0x38e>
 800a302:	4290      	cmp	r0, r2
 800a304:	ddf4      	ble.n	800a2f0 <__kernel_rem_pio2f+0x378>
 800a306:	a858      	add	r0, sp, #352	@ 0x160
 800a308:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a30c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800a310:	3b01      	subs	r3, #1
 800a312:	e735      	b.n	800a180 <__kernel_rem_pio2f+0x208>
 800a314:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a316:	2b02      	cmp	r3, #2
 800a318:	dc09      	bgt.n	800a32e <__kernel_rem_pio2f+0x3b6>
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	dc27      	bgt.n	800a36e <__kernel_rem_pio2f+0x3f6>
 800a31e:	d040      	beq.n	800a3a2 <__kernel_rem_pio2f+0x42a>
 800a320:	f009 0007 	and.w	r0, r9, #7
 800a324:	b059      	add	sp, #356	@ 0x164
 800a326:	ecbd 8b04 	vpop	{d8-d9}
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a330:	2b03      	cmp	r3, #3
 800a332:	d1f5      	bne.n	800a320 <__kernel_rem_pio2f+0x3a8>
 800a334:	aa30      	add	r2, sp, #192	@ 0xc0
 800a336:	1f0b      	subs	r3, r1, #4
 800a338:	4413      	add	r3, r2
 800a33a:	461a      	mov	r2, r3
 800a33c:	4620      	mov	r0, r4
 800a33e:	2800      	cmp	r0, #0
 800a340:	dc50      	bgt.n	800a3e4 <__kernel_rem_pio2f+0x46c>
 800a342:	4622      	mov	r2, r4
 800a344:	2a01      	cmp	r2, #1
 800a346:	dc5d      	bgt.n	800a404 <__kernel_rem_pio2f+0x48c>
 800a348:	ab30      	add	r3, sp, #192	@ 0xc0
 800a34a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800a270 <__kernel_rem_pio2f+0x2f8>
 800a34e:	440b      	add	r3, r1
 800a350:	2c01      	cmp	r4, #1
 800a352:	dc67      	bgt.n	800a424 <__kernel_rem_pio2f+0x4ac>
 800a354:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800a358:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800a35c:	2e00      	cmp	r6, #0
 800a35e:	d167      	bne.n	800a430 <__kernel_rem_pio2f+0x4b8>
 800a360:	edc7 6a00 	vstr	s13, [r7]
 800a364:	ed87 7a01 	vstr	s14, [r7, #4]
 800a368:	edc7 7a02 	vstr	s15, [r7, #8]
 800a36c:	e7d8      	b.n	800a320 <__kernel_rem_pio2f+0x3a8>
 800a36e:	ab30      	add	r3, sp, #192	@ 0xc0
 800a370:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800a270 <__kernel_rem_pio2f+0x2f8>
 800a374:	440b      	add	r3, r1
 800a376:	4622      	mov	r2, r4
 800a378:	2a00      	cmp	r2, #0
 800a37a:	da24      	bge.n	800a3c6 <__kernel_rem_pio2f+0x44e>
 800a37c:	b34e      	cbz	r6, 800a3d2 <__kernel_rem_pio2f+0x45a>
 800a37e:	eef1 7a47 	vneg.f32	s15, s14
 800a382:	edc7 7a00 	vstr	s15, [r7]
 800a386:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800a38a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a38e:	aa31      	add	r2, sp, #196	@ 0xc4
 800a390:	2301      	movs	r3, #1
 800a392:	429c      	cmp	r4, r3
 800a394:	da20      	bge.n	800a3d8 <__kernel_rem_pio2f+0x460>
 800a396:	b10e      	cbz	r6, 800a39c <__kernel_rem_pio2f+0x424>
 800a398:	eef1 7a67 	vneg.f32	s15, s15
 800a39c:	edc7 7a01 	vstr	s15, [r7, #4]
 800a3a0:	e7be      	b.n	800a320 <__kernel_rem_pio2f+0x3a8>
 800a3a2:	ab30      	add	r3, sp, #192	@ 0xc0
 800a3a4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800a270 <__kernel_rem_pio2f+0x2f8>
 800a3a8:	440b      	add	r3, r1
 800a3aa:	2c00      	cmp	r4, #0
 800a3ac:	da05      	bge.n	800a3ba <__kernel_rem_pio2f+0x442>
 800a3ae:	b10e      	cbz	r6, 800a3b4 <__kernel_rem_pio2f+0x43c>
 800a3b0:	eef1 7a67 	vneg.f32	s15, s15
 800a3b4:	edc7 7a00 	vstr	s15, [r7]
 800a3b8:	e7b2      	b.n	800a320 <__kernel_rem_pio2f+0x3a8>
 800a3ba:	ed33 7a01 	vldmdb	r3!, {s14}
 800a3be:	3c01      	subs	r4, #1
 800a3c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3c4:	e7f1      	b.n	800a3aa <__kernel_rem_pio2f+0x432>
 800a3c6:	ed73 7a01 	vldmdb	r3!, {s15}
 800a3ca:	3a01      	subs	r2, #1
 800a3cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a3d0:	e7d2      	b.n	800a378 <__kernel_rem_pio2f+0x400>
 800a3d2:	eef0 7a47 	vmov.f32	s15, s14
 800a3d6:	e7d4      	b.n	800a382 <__kernel_rem_pio2f+0x40a>
 800a3d8:	ecb2 7a01 	vldmia	r2!, {s14}
 800a3dc:	3301      	adds	r3, #1
 800a3de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3e2:	e7d6      	b.n	800a392 <__kernel_rem_pio2f+0x41a>
 800a3e4:	ed72 7a01 	vldmdb	r2!, {s15}
 800a3e8:	edd2 6a01 	vldr	s13, [r2, #4]
 800a3ec:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a3f0:	3801      	subs	r0, #1
 800a3f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3f6:	ed82 7a00 	vstr	s14, [r2]
 800a3fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3fe:	edc2 7a01 	vstr	s15, [r2, #4]
 800a402:	e79c      	b.n	800a33e <__kernel_rem_pio2f+0x3c6>
 800a404:	ed73 7a01 	vldmdb	r3!, {s15}
 800a408:	edd3 6a01 	vldr	s13, [r3, #4]
 800a40c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a410:	3a01      	subs	r2, #1
 800a412:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a416:	ed83 7a00 	vstr	s14, [r3]
 800a41a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a41e:	edc3 7a01 	vstr	s15, [r3, #4]
 800a422:	e78f      	b.n	800a344 <__kernel_rem_pio2f+0x3cc>
 800a424:	ed33 7a01 	vldmdb	r3!, {s14}
 800a428:	3c01      	subs	r4, #1
 800a42a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a42e:	e78f      	b.n	800a350 <__kernel_rem_pio2f+0x3d8>
 800a430:	eef1 6a66 	vneg.f32	s13, s13
 800a434:	eeb1 7a47 	vneg.f32	s14, s14
 800a438:	edc7 6a00 	vstr	s13, [r7]
 800a43c:	ed87 7a01 	vstr	s14, [r7, #4]
 800a440:	eef1 7a67 	vneg.f32	s15, s15
 800a444:	e790      	b.n	800a368 <__kernel_rem_pio2f+0x3f0>
 800a446:	bf00      	nop

0800a448 <scalbnf>:
 800a448:	ee10 3a10 	vmov	r3, s0
 800a44c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a450:	d02b      	beq.n	800a4aa <scalbnf+0x62>
 800a452:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a456:	d302      	bcc.n	800a45e <scalbnf+0x16>
 800a458:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a45c:	4770      	bx	lr
 800a45e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a462:	d123      	bne.n	800a4ac <scalbnf+0x64>
 800a464:	4b24      	ldr	r3, [pc, #144]	@ (800a4f8 <scalbnf+0xb0>)
 800a466:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800a4fc <scalbnf+0xb4>
 800a46a:	4298      	cmp	r0, r3
 800a46c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a470:	db17      	blt.n	800a4a2 <scalbnf+0x5a>
 800a472:	ee10 3a10 	vmov	r3, s0
 800a476:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a47a:	3a19      	subs	r2, #25
 800a47c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a480:	4288      	cmp	r0, r1
 800a482:	dd15      	ble.n	800a4b0 <scalbnf+0x68>
 800a484:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800a500 <scalbnf+0xb8>
 800a488:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800a504 <scalbnf+0xbc>
 800a48c:	ee10 3a10 	vmov	r3, s0
 800a490:	eeb0 7a67 	vmov.f32	s14, s15
 800a494:	2b00      	cmp	r3, #0
 800a496:	bfb8      	it	lt
 800a498:	eef0 7a66 	vmovlt.f32	s15, s13
 800a49c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a4a0:	4770      	bx	lr
 800a4a2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a508 <scalbnf+0xc0>
 800a4a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a4aa:	4770      	bx	lr
 800a4ac:	0dd2      	lsrs	r2, r2, #23
 800a4ae:	e7e5      	b.n	800a47c <scalbnf+0x34>
 800a4b0:	4410      	add	r0, r2
 800a4b2:	28fe      	cmp	r0, #254	@ 0xfe
 800a4b4:	dce6      	bgt.n	800a484 <scalbnf+0x3c>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	dd06      	ble.n	800a4c8 <scalbnf+0x80>
 800a4ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a4be:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a4c2:	ee00 3a10 	vmov	s0, r3
 800a4c6:	4770      	bx	lr
 800a4c8:	f110 0f16 	cmn.w	r0, #22
 800a4cc:	da09      	bge.n	800a4e2 <scalbnf+0x9a>
 800a4ce:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a508 <scalbnf+0xc0>
 800a4d2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800a50c <scalbnf+0xc4>
 800a4d6:	ee10 3a10 	vmov	r3, s0
 800a4da:	eeb0 7a67 	vmov.f32	s14, s15
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	e7d9      	b.n	800a496 <scalbnf+0x4e>
 800a4e2:	3019      	adds	r0, #25
 800a4e4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a4e8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a4ec:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a510 <scalbnf+0xc8>
 800a4f0:	ee07 3a90 	vmov	s15, r3
 800a4f4:	e7d7      	b.n	800a4a6 <scalbnf+0x5e>
 800a4f6:	bf00      	nop
 800a4f8:	ffff3cb0 	.word	0xffff3cb0
 800a4fc:	4c000000 	.word	0x4c000000
 800a500:	7149f2ca 	.word	0x7149f2ca
 800a504:	f149f2ca 	.word	0xf149f2ca
 800a508:	0da24260 	.word	0x0da24260
 800a50c:	8da24260 	.word	0x8da24260
 800a510:	33000000 	.word	0x33000000

0800a514 <floorf>:
 800a514:	ee10 3a10 	vmov	r3, s0
 800a518:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a51c:	3a7f      	subs	r2, #127	@ 0x7f
 800a51e:	2a16      	cmp	r2, #22
 800a520:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a524:	dc2b      	bgt.n	800a57e <floorf+0x6a>
 800a526:	2a00      	cmp	r2, #0
 800a528:	da12      	bge.n	800a550 <floorf+0x3c>
 800a52a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a590 <floorf+0x7c>
 800a52e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a532:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a53a:	dd06      	ble.n	800a54a <floorf+0x36>
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	da24      	bge.n	800a58a <floorf+0x76>
 800a540:	2900      	cmp	r1, #0
 800a542:	4b14      	ldr	r3, [pc, #80]	@ (800a594 <floorf+0x80>)
 800a544:	bf08      	it	eq
 800a546:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800a54a:	ee00 3a10 	vmov	s0, r3
 800a54e:	4770      	bx	lr
 800a550:	4911      	ldr	r1, [pc, #68]	@ (800a598 <floorf+0x84>)
 800a552:	4111      	asrs	r1, r2
 800a554:	420b      	tst	r3, r1
 800a556:	d0fa      	beq.n	800a54e <floorf+0x3a>
 800a558:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800a590 <floorf+0x7c>
 800a55c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a560:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a568:	ddef      	ble.n	800a54a <floorf+0x36>
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	bfbe      	ittt	lt
 800a56e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800a572:	fa40 f202 	asrlt.w	r2, r0, r2
 800a576:	189b      	addlt	r3, r3, r2
 800a578:	ea23 0301 	bic.w	r3, r3, r1
 800a57c:	e7e5      	b.n	800a54a <floorf+0x36>
 800a57e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a582:	d3e4      	bcc.n	800a54e <floorf+0x3a>
 800a584:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a588:	4770      	bx	lr
 800a58a:	2300      	movs	r3, #0
 800a58c:	e7dd      	b.n	800a54a <floorf+0x36>
 800a58e:	bf00      	nop
 800a590:	7149f2ca 	.word	0x7149f2ca
 800a594:	bf800000 	.word	0xbf800000
 800a598:	007fffff 	.word	0x007fffff

0800a59c <_init>:
 800a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59e:	bf00      	nop
 800a5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a2:	bc08      	pop	{r3}
 800a5a4:	469e      	mov	lr, r3
 800a5a6:	4770      	bx	lr

0800a5a8 <_fini>:
 800a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5aa:	bf00      	nop
 800a5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ae:	bc08      	pop	{r3}
 800a5b0:	469e      	mov	lr, r3
 800a5b2:	4770      	bx	lr
